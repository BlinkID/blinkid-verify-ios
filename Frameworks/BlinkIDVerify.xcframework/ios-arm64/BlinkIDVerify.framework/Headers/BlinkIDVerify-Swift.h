#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef BLINKIDVERIFY_SWIFT_H
#define BLINKIDVERIFY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BlinkIDVerify",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSq16debugDescriptionSSvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {






































template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Optional<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Array<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Array<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {























































































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {











































































































































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sq16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqsRi_zrlEyxSgxcfc");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Optional<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
























































































































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {








































































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {












































































































































































































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_repeatedValue[sizeof(T_0_0)];
  auto &consumedParamCopy_repeatedValue = *(new(copyBuffer_consumedParamCopy_repeatedValue) T_0_0(repeatedValue));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_repeatedValue(consumedParamCopy_repeatedValue);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(consumedParamCopy_repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(Array<T_0_0>)) char copyBuffer_consumedParamCopy_elements[sizeof(Array<T_0_0>)];
  auto &consumedParamCopy_elements = *(new(copyBuffer_consumedParamCopy_elements) Array<T_0_0>(elements));
  swift::_impl::ConsumedValueStorageDestroyer<Array<T_0_0>> storageGuard_consumedParamCopy_elements(consumedParamCopy_elements);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(consumedParamCopy_elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_target[sizeof(String)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) String(target));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_target[sizeof(UTF8View)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) UTF8View(target));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Optional<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSq16debugDescriptionSSvg(swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_some[sizeof(T_0_0)];
  auto &consumedParamCopy_some = *(new(copyBuffer_consumedParamCopy_some) T_0_0(some_));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_some(consumedParamCopy_some);
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(consumedParamCopy_some), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_newValue[sizeof(UTF8View)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) UTF8View(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_newValue[sizeof(String)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) String(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

class BitwiseCopyable { } SWIFT_UNAVAILABLE_MSG("protocol 'BitwiseCopyable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CFloat16'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

class Copyable { } SWIFT_UNAVAILABLE_MSG("protocol 'Copyable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift macro 'DebugDescription()'.

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class Escapable { } SWIFT_UNAVAILABLE_MSG("protocol 'Escapable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift global function 'exchange(_:with:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'getVaList(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("BlinkIDVerify", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {
extern "C" {
#endif

SWIFT_EXTERN void $s13BlinkIDVerify24AdditionalProcessingInfoV05frontD6StatusAA0dG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify24AdditionalProcessingInfoV04backD6StatusAA0dG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify24AdditionalProcessingInfoV15recognitionModeAA011RecognitionG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify24AdditionalProcessingInfoV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify17AnonymizationModeO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s13BlinkIDVerify17AnonymizationModeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify17AnonymizationModeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19BarcodeAnomalyCheckV7overallAA06TieredE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19BarcodeAnomalyCheckV07contentE0AA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19BarcodeAnomalyCheckV04readE0AA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify19BarcodeAnomalyCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB13CaptureResultV20frontCameraFrameJpegAA12EncodedImageVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB13CaptureResultV19backCameraFrameJpegAA12EncodedImageVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB13CaptureResultV22barcodeCameraFrameJpegAA12EncodedImageVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB13CaptureResultV02toaB7Request15requestSettingsAA0abF0VAA0abfH0VSg_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull requestSettings, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // toBlinkIDVerifyRequest(requestSettings:)
SWIFT_EXTERN void $s13BlinkIDVerify0aB16EndpointResponseV16processingStatusAA0ab10ProcessingF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB16EndpointResponseV12verificationAA13DetailedCheckVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB16EndpointResponseV6checksAA10CheckArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify0aB16EndpointResponseV17processIndicatorsSayAA16ProcessIndicatorVGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB16EndpointResponseV10extractionAA10ExtractionVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify0aB16EndpointResponseV8messagesSayAA13VerifyMessageVGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB16EndpointResponseV7runtimeAA13VerifyRuntimeVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify0aB16EndpointResponseV6imagesSayAA11ImageResultVGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB16EndpointResponseV11optionsUsedAA0aB17ProcessingOptionsVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB16EndpointResponseV11useCaseUsedAA0ab13ProcessingUseF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify0aB16EndpointResponseV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(char * _Nonnull result, struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 value) {
  memcpy(result + 0, &value._1, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImageSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 result;
  memcpy(&result._1, value + 0, 1);
  return result;
}

SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImageSbSgvs(struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify0aB17ProcessingOptionsV15returnFaceImageSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV15returnFaceImageSbSgvs(struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify0aB17ProcessingOptionsV20returnSignatureImageSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV20returnSignatureImageSbSgvs(struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify0aB17ProcessingOptionsV22treatExpirationAsFraudSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV22treatExpirationAsFraudSbSgvs(struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV16screenMatchLevelAA0fG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV16screenMatchLevelAA0fG0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV19photocopyMatchLevelAA0fG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV19photocopyMatchLevelAA0fG0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV23visualAnomalyMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV23visualAnomalyMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV24barcodeAnomalyMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV24barcodeAnomalyMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV22photoForgeryMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV22photoForgeryMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV32staticSecurityFeaturesMatchLevelAA0hI0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV32staticSecurityFeaturesMatchLevelAA0hI0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV09dataMatchF5LevelAA0fG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV09dataMatchF5LevelAA0fG0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV20imageQualitySettingsAA05ImagefG0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV20imageQualitySettingsAA05ImagefG0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV17returnImageFormatAA0fG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV17returnImageFormatAA0fG0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV17anonymizationModeAA013AnonymizationF0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV17anonymizationModeAA013AnonymizationF0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV8sideModeAA016VerificationSideF0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV8sideModeAA016VerificationSideF0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImage0e4FaceH00e9SignatureH022treatExpirationAsFraud16screenMatchLevel09photocopypQ0013visualAnomalypQ007barcodetpQ0012photoForgerypQ0022staticSecurityFeaturespQ004datappQ020imageQualitySettings0eH6Format17anonymizationMode8sideModeACSbSg_A3sA0pQ0OSgA6vA0H15QualitySettingsVSgAA0H6FormatOSgAA17AnonymizationModeOSgAA20VerificationSideModeOSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 returnFullDocumentImage, struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 returnFaceImage, struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 returnSignatureImage, struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 treatExpirationAsFraud, const void * _Nonnull screenMatchLevel, const void * _Nonnull photocopyMatchLevel, const void * _Nonnull visualAnomalyMatchLevel, const void * _Nonnull barcodeAnomalyMatchLevel, const void * _Nonnull photoForgeryMatchLevel, const void * _Nonnull staticSecurityFeaturesMatchLevel, const void * _Nonnull dataMatchMatchLevel, const void * _Nonnull imageQualitySettings, const void * _Nonnull returnImageFormat, const void * _Nonnull anonymizationMode, const void * _Nonnull sideMode) SWIFT_NOEXCEPT SWIFT_CALL; // init(returnFullDocumentImage:returnFaceImage:returnSignatureImage:treatExpirationAsFraud:screenMatchLevel:photocopyMatchLevel:visualAnomalyMatchLevel:barcodeAnomalyMatchLevel:photoForgeryMatchLevel:staticSecurityFeaturesMatchLevel:dataMatchMatchLevel:imageQualitySettings:returnImageFormat:anonymizationMode:sideMode:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify0aB17ProcessingOptionsV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB16ProcessingStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify0aB16ProcessingStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicyAA08DocumentgH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicyAA08DocumentgH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV19verificationContextAA012VerificationG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV19verificationContextAA012VerificationG0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV20manualReviewStrategyAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV20manualReviewStrategyAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV23manualReviewSensitivityAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV23manualReviewSensitivityAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicy19verificationContext20manualReviewStrategy0kL11SensitivityAcA08DocumentgH0OSg_AA0gJ0OSgAA0lM0OSgAA0lN0OSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull documentVerificationPolicy, const void * _Nonnull verificationContext, const void * _Nonnull manualReviewStrategy, const void * _Nonnull manualReviewSensitivity) SWIFT_NOEXCEPT SWIFT_CALL; // init(documentVerificationPolicy:verificationContext:manualReviewStrategy:manualReviewSensitivity:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify0aB17ProcessingUseCaseV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB7RequestV7optionsAA0aB17ProcessingOptionsVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB7RequestV7optionsAA0aB17ProcessingOptionsVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB7RequestV7useCaseAA0ab13ProcessingUseE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB7RequestV7useCaseAA0ab13ProcessingUseE0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify0aB7RequestV7traceIdSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s13BlinkIDVerify0aB7RequestV7traceIdSSSgvs(struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify0aB7RequestV9sessionIDSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB7RequestV9sessionIDSSSgvs(struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImageSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImageSbSgvs(struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify0aB15RequestSettingsV15returnFaceImageSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV15returnFaceImageSbSgvs(struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify0aB15RequestSettingsV20returnSignatureImageSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV20returnSignatureImageSbSgvs(struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV17returnImageFormatAA0fG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV17returnImageFormatAA0fG0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV17anonymizationModeAA013AnonymizationF0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV17anonymizationModeAA013AnonymizationF0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify0aB15RequestSettingsV7traceIdSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV7traceIdSSSgvs(struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImage0e4FaceH00e9SignatureH00eH6Format17anonymizationMode7traceIdACSbSg_A2jA0hK0OSgAA013AnonymizationM0OSgSSSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 returnFullDocumentImage, struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 returnFaceImage, struct swift_interop_passStub_BlinkIDVerify_uint8_t_0_1 returnSignatureImage, const void * _Nonnull returnImageFormat, const void * _Nonnull anonymizationMode, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 traceId) SWIFT_NOEXCEPT SWIFT_CALL; // init(returnFullDocumentImage:returnFaceImage:returnSignatureImage:returnImageFormat:anonymizationMode:traceId:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify0aB11SdkSettingsV10licenseKeySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB11SdkSettingsV10licenseKeySSvs(struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify0aB11SdkSettingsV8licenseeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB11SdkSettingsV8licenseeSSSgvs(struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify0aB11SdkSettingsV15helloLogEnabledSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB11SdkSettingsV15helloLogEnabledSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify0aB11SdkSettingsV17downloadResourcesSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB11SdkSettingsV17downloadResourcesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify0aB11SdkSettingsV19resourceDownloadUrlSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB11SdkSettingsV19resourceDownloadUrlSSvs(struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify0aB11SdkSettingsV19resourceLocalFolderSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB11SdkSettingsV22resourceRequestTimeoutAA0fG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB11SdkSettingsV22resourceRequestTimeoutAA0fG0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify0aB7ServiceV8settingsAcA0abC8SettingsV_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull settings) SWIFT_NOEXCEPT SWIFT_CALL; // init(settings:)
SWIFT_EXTERN void $s13BlinkIDVerify0aB15ServiceSettingsV012verificationC7BaseUrl15mbClientSdkName0hiJ7Version0h6RunnerL0ACSS_SSSgA2HtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 verificationServiceBaseUrl, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 mbClientSdkName, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 mbClientSdkVersion, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 mbRunnerVersion) SWIFT_NOEXCEPT SWIFT_CALL; // init(verificationServiceBaseUrl:mbClientSdkName:mbClientSdkVersion:mbRunnerVersion:)
SWIFT_EXTERN void $s13BlinkIDVerify0aB15ServiceSettingsV012verificationC7BaseUrl5token15mbClientSdkName0ijK7Version0i6RunnerM0ACSS_S2SSgA2ItcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 verificationServiceBaseUrl, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 token, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 mbClientSdkName, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 mbClientSdkVersion, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 mbRunnerVersion) SWIFT_NOEXCEPT SWIFT_CALL; // init(verificationServiceBaseUrl:token:mbClientSdkName:mbClientSdkVersion:mbRunnerVersion:)
SWIFT_EXTERN double $s13BlinkIDVerify6BoundsV1xSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13BlinkIDVerify6BoundsV1ySdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13BlinkIDVerify6BoundsV5widthSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13BlinkIDVerify6BoundsV6heightSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify6BoundsV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN MBSampleBufferWrapper *_Nonnull $s13BlinkIDVerify11CameraFrameV6bufferSo21MBSampleBufferWrapperCvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11CameraFrameV3roiAA16RegionOfInterestVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11CameraFrameV11orientationAA0cD16VideoOrientationOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, MBSampleBufferWrapper *_Nonnull buffer, const void * _Nonnull roi, const void * _Nonnull orientation) SWIFT_NOEXCEPT SWIFT_CALL; // init(buffer:roi:orientation:)
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify11CameraFrameV5widthSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify11CameraFrameV6heightSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify27CameraFrameVideoOrientationO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify13CapturePolicyO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14CaptureSessionC22cancelActiveProcessingyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cancelActiveProcessing()
SWIFT_EXTERN void $s13BlinkIDVerify14CaptureSessionC7restartyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // restart()
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV13capturePolicyAA0cG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV13capturePolicyAA0cG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify22CaptureSessionSettingsV22treatExpirationAsFraudSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV22treatExpirationAsFraudSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV24screenAnalysisMatchLevelAA0hI0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV24screenAnalysisMatchLevelAA0hI0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV27photocopyAnalysisMatchLevelAA0hI0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV27photocopyAnalysisMatchLevelAA0hI0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV23visualAnomalyMatchLevelAA0hI0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV23visualAnomalyMatchLevelAA0hI0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV22photoForgeryMatchLevelAA0hI0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV22photoForgeryMatchLevelAA0hI0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV32staticSecurityFeaturesMatchLevelAA0iJ0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV32staticSecurityFeaturesMatchLevelAA0iJ0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV24barcodeAnomalyMatchLevelAA0hI0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV24barcodeAnomalyMatchLevelAA0hI0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV09dataMatchG5LevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV09dataMatchG5LevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV012imageQualityE0AA05ImagegE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV012imageQualityE0AA05ImagegE0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV7useCaseAA0ab13ProcessingUseG0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV7useCaseAA0ab13ProcessingUseG0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s13BlinkIDVerify22CaptureSessionSettingsV19stepTimeoutDurationSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV19stepTimeoutDurationSdvs(double value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify22CaptureSessionSettingsV13capturePolicy22treatExpirationAsFraud24screenAnalysisMatchLevel09photocopymnO0013visualAnomalynO0012photoForgerynO0022staticSecurityFeaturesnO007barcodernO004datannO0012imageQualityE07useCase19stepTimeoutDurationAcA0cG0O_SbAA0nO0OSgA6tA012ImageQualityE0VSgAA0aB17ProcessingUseCaseVSgSdtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull capturePolicy, bool treatExpirationAsFraud, const void * _Nonnull screenAnalysisMatchLevel, const void * _Nonnull photocopyAnalysisMatchLevel, const void * _Nonnull visualAnomalyMatchLevel, const void * _Nonnull photoForgeryMatchLevel, const void * _Nonnull staticSecurityFeaturesMatchLevel, const void * _Nonnull barcodeAnomalyMatchLevel, const void * _Nonnull dataMatchMatchLevel, const void * _Nonnull imageQualitySettings, const void * _Nonnull useCase, double stepTimeoutDuration) SWIFT_NOEXCEPT SWIFT_CALL; // init(capturePolicy:treatExpirationAsFraud:screenAnalysisMatchLevel:photocopyAnalysisMatchLevel:visualAnomalyMatchLevel:photoForgeryMatchLevel:staticSecurityFeaturesMatchLevel:barcodeAnomalyMatchLevel:dataMatchMatchLevel:imageQualitySettings:useCase:stepTimeoutDuration:)
SWIFT_EXTERN void $s13BlinkIDVerify15CardOrientationO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify15CardOrientationO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12CardRotationO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify12CardRotationO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14CertaintyLevelO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify14CertaintyLevelO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10CheckArrayV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11CheckResultO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11CheckResultO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9CheckTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify9CheckTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10CheckValueO11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9ClassInfoV7countryAA7CountryOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9ClassInfoV6regionAA6RegionOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9ClassInfoV4typeAA12DocumentTypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify9ClassInfoV20isoAlpha3CountryCodeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify9ClassInfoV20isoAlpha2CountryCodeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify9ClassInfoV21isoNumericCountryCodeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify9ClassInfoV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify7CountryO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify7CountryO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV7overallAA08DetailedD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV05matchD0AA05MatchD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV05logicD0AA05LogicD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV06formatD0AA06FormatD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV014barcodeAnomalyD0AA07BarcodefD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV03mrzD0AA03MrzD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV010suspiciouscD0AA010SuspiciouscD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9DataCheckV013dataIntegrityD0AA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify9DataCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14DateLogicCheckV7overallAA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14DateLogicCheckV017dateOfBirthBeforecg5IssueE0AA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14DateLogicCheckV017dateOfBirthBeforecg6ExpiryE0AA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14DateLogicCheckV017dateOfIssueBeforecg6ExpiryE0AA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14DateLogicCheckV017dateOfBirthInPastE0AA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14DateLogicCheckV017dateOfIssueInPastE0AA0E6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify14DateLogicCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify10DateResultV3daySivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify10DateResultV5monthSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify10DateResultV4yearSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10DateResultV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify10DateResultV5fieldSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10DateResultV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10DateResultV7resultsAA0D5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify10DateResultV08originalD0SSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify10DateResultV18successfullyParsedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify10DateResultV23filledByDomainKnowledgeSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10DateResultV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify16DateResultSimpleV3daySivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify16DateResultSimpleV5monthSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify16DateResultSimpleV4yearSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify16DateResultSimpleV14originalStringSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify16DateResultSimpleV18successfullyParsedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify16DateResultSimpleV23filledByDomainKnowledgeSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify16DetailDictionaryV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13DetailedCheckV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13DetailedCheckV4nameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13DetailedCheckV6resultAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 $s13BlinkIDVerify13DetailedCheckV15performedChecksSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13DetailedCheckV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13DetailedCheckV6checksAA0D5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13DetailedCheckV18recommendedOutcomeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13DetailedCheckV14certaintyLevelAA09CertaintyF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13DetailedCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify18DetailedDateResultV3daySivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify18DetailedDateResultV5monthSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify18DetailedDateResultV4yearSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify18DetailedDateResultV4typeAA0E4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify18DetailedDateResultV5fieldSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify18DetailedDateResultV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify18DetailedDateResultV7resultsAA0E5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify18DetailedDateResultV08originalE0SayAA0c6StringE0VGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify18DetailedDateResultV18successfullyParsedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify18DetailedDateResultV23filledByDomainKnowledgeSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify18DetailedDateResultV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20DetailedStringResultV4typeAA0E4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify20DetailedStringResultV5fieldSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20DetailedStringResultV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20DetailedStringResultV7resultsAA0E5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify20DetailedStringResultV5valueSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20DetailedStringResultV8locationAA12LocationInfoVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20DetailedStringResultV4sideAA4SideOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20DetailedStringResultV6scriptAA12VerifyScriptOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify20DetailedStringResultV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify15DetectionStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify15DetectionStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify10DimensionsV5widthSfSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify10DimensionsV6heightSfSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10DimensionsV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify24DocumentImageColorStatusO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify24DocumentImageColorStatusO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify26DocumentLocalizationStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify16DocumentLocationV8locationAA13QuadrilateralVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify16DocumentLocationV11orientationAA15CardOrientationOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12DocumentTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify12DocumentTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify26DocumentVerificationPolicyO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify26DocumentVerificationPolicyO11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify26DocumentVerificationPolicyO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify26DocumentVerificationPolicyO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12EncodedImageV11orientationAA0D11OrientationOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s13BlinkIDVerify12EncodedImageV02uiD0So7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV16processingStatusAA010ProcessingE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV17recognitionStatusAA11ResultStateOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV7overallAA11ResultArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV3vizAA9VizResultVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV3mrzAA11ResultArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV7barcodeAA11ResultArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV9classInfoAA05ClassE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ExtractionV14additionalInfoAA020AdditionalProcessingE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10ExtractionV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10FieldCheckV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify10FieldCheckV4nameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10FieldCheckV6resultAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 $s13BlinkIDVerify10FieldCheckV15performedChecksSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10FieldCheckV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10FieldCheckV6checksAA0D5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10FieldCheckV5fieldAA0C4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10FieldCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9FieldTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify9FieldTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV7overallAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV011dateOfBirthD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV012dateOfExpiryD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV011dateOfIssueD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV014documentNumberD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV024documentAdditionalNumberD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV032documentOptionalAdditionalNumberD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV016personalIdNumberD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV026additionalPersonalIdNumberD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV06genderD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV011nationalityD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV016issuingAuthorityD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV013maritalStatusD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV08religionD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV018classEffectiveDateD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11FormatCheckV015classExpiryDateD0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11FormatCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19FrameAnalysisResultV28verificationProcessingStatusAA0abgH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19FrameAnalysisResultV16processingStatusAA010ProcessingG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19FrameAnalysisResultV16documentLocationAA08DocumentG0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19FrameAnalysisResultV26documentLocalizationStatusAA08DocumentgH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify19FrameAnalysisResultV12blurDetectedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify19FrameAnalysisResultV13glareDetectedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify19FrameAnalysisResultV17occlusionDetectedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify19FrameAnalysisResultV12tiltDetectedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19FrameAnalysisResultV5moireAA05ImageD15DetectionStatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19FrameAnalysisResultV10monochromeAA24DocumentImageColorStatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19FrameAnalysisResultV15detectionStatusAA09DetectionG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify19FrameAnalysisResultV22hasBarcodeReadingIssueSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify28ImageAnalysisDetectionStatusO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint8_t_0_1 $s13BlinkIDVerify19ImageAnalysisResultV7blurredSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV08documentC11ColorStatusAA08DocumentcgH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV08documentC11MoireStatusAA0cd9DetectionH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV19faceDetectionStatusAA0cdgH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV18mrzDetectionStatusAA0cdgH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV22barcodeDetectionStatusAA0cdgH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV15cardOrientationAA04CardG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV12cardRotationAA04CardG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19ImageAnalysisResultV21realIDDetectionStatusAA0cd9DetectionH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11ImageFormatO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11ImageFormatO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11ImageFormatO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify16ImageOrientationO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify26ImageQualityInterpretationO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify26ImageQualityInterpretationO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify26ImageQualityInterpretationO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV15glareMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV15glareMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV18lightingMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV18lightingMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV19sharpnessMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV19sharpnessMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV23handOcclusionMatchLevelAA0hI0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV23handOcclusionMatchLevelAA0hI0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV13dpiMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV13dpiMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV14tiltMatchLevelAA0gH0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV14tiltMatchLevelAA0gH0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV05imageD14InterpretationAA0cdG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV05imageD14InterpretationAA0cdG0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevel05glaregH008lightinggH009sharpnessgH0013handOcclusiongH003dpigH004tiltgH005imageD14InterpretationAcA0gH0OSg_A6nA0cdQ0OSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull blurMatchLevel, const void * _Nonnull glareMatchLevel, const void * _Nonnull lightingMatchLevel, const void * _Nonnull sharpnessMatchLevel, const void * _Nonnull handOcclusionMatchLevel, const void * _Nonnull dpiMatchLevel, const void * _Nonnull tiltMatchLevel, const void * _Nonnull imageQualityInterpretation) SWIFT_NOEXCEPT SWIFT_CALL; // init(blurMatchLevel:glareMatchLevel:lightingMatchLevel:sharpnessMatchLevel:handOcclusionMatchLevel:dpiMatchLevel:tiltMatchLevel:imageQualityInterpretation:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify20ImageQualitySettingsV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11ImageResultV4nameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s13BlinkIDVerify11ImageResultV5imageSo7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11ImageResultV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify15IndicatorResultO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify15IndicatorResultO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13IndicatorTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13IndicatorTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void * _Nonnull $s13BlinkIDVerify10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0VtcfC(UIImage *_Nonnull uiImage, const void * _Nonnull regionOfInterest, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // init(uiImage:regionOfInterest:)
SWIFT_EXTERN void * _Nonnull $s13BlinkIDVerify10InputImageC11cameraFrameAcA06CameraF0V_tcfC(const void * _Nonnull cameraFrame, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // init(cameraFrame:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify22InvalidLicenseKeyErrorV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12LocationInfoV13topLeftCornerAA8Point2dfVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12LocationInfoV10dimensionsAA10DimensionsVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12LocationInfoV4sideAA4SideOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify12LocationInfoV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10LogicCheckV7overallAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10LogicCheckV04datecD0AA04DatecD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10LogicCheckV014documentNumberC0AA0fC0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10LogicCheckV016personalIdNumberC0AA0gC0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10LogicCheckV022inventoryControlNumberC0AA0gC0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10LogicCheckV021documentDiscriminatorC0AA06NumberC0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10LogicCheckV016customerIdNumberC0AA0gC0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10LogicCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV7overallAA06TieredD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV09firstNameC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV08lastNameC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV08fullNameC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV07addressC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV012placeOfBirthC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV04raceC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV08religionC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV010professionC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV013maritalStatusC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV017residentialStatusC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV08employerC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV011dateOfBirthC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV011dateOfIssueC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV012dateOfExpiryC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV014documentNumberC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV016personalIdNumberC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV024documentAdditionalNumberC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchCheckV032documentOptionalAdditionalNumberC0AA05FieldD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10MatchCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10MatchLevelO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10MatchLevelO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10MatchLevelO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify18MemoryReserveErrorV011minRequiredC0Sivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify18MemoryReserveErrorV011minRequiredC0ACSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t minRequiredMemory) SWIFT_NOEXCEPT SWIFT_CALL; // init(minRequiredMemory:)
SWIFT_EXTERN void $s13BlinkIDVerify13MessageStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13MessageStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13MissingBundleV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify14ModelLoadErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify14ModelLoadErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify8MrzCheckV7overallAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify8MrzCheckV6parsedAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify8MrzCheckV11checkDigitsAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify8MrzCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11NumberLogicV7overallAA11CheckResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11NumberLogicV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN int32_t $s13BlinkIDVerify5PointV1xs5Int32Vvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN int32_t $s13BlinkIDVerify5PointV1ys5Int32Vvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify8Point2dfV1xSfSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8 $s13BlinkIDVerify8Point2dfV1ySfSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify8Point2dfV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify16ProcessIndicatorV4nameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify16ProcessIndicatorV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify16ProcessIndicatorV6resultAA0D6ResultOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify16ProcessIndicatorV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13ProcessResultV013frameAnalysisD0AA05FramefD0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13ProcessResultV18resultCompletenessAA0dF0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify16ProcessingStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify16ProcessingStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13QuadrilateralV9upperLeftAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13QuadrilateralV10upperRightAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13QuadrilateralV10lowerRightAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13QuadrilateralV9lowerLeftAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify15RecognitionModeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify15RecognitionModeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify6RegionO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify6RegionO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13BlinkIDVerify16RegionOfInterestV1xSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13BlinkIDVerify16RegionOfInterestV1ySfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13BlinkIDVerify16RegionOfInterestV5widthSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s13BlinkIDVerify16RegionOfInterestV6heightSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify16RegionOfInterestV1x1y5width6heightACSf_S3ftcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, float x, float y, float width, float height) SWIFT_NOEXCEPT SWIFT_CALL; // init(x:y:width:height:)
SWIFT_EXTERN void $s13BlinkIDVerify12RequestErrorO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s13BlinkIDVerify12RequestErrorO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify17ResourceLoadErrorV4nameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify17ResourceLoadErrorV5errorAA05ModeldE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify14ResourcesErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11ResultArrayV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify18ResultCompletenessV17frontSideFinishedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify18ResultCompletenessV16backSideFinishedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify18ResultCompletenessV20barcodeFrameCapturedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s13BlinkIDVerify18ResultCompletenessV19overallFlowFinishedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11ResultStateO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11ResultStateO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify10ResultTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify10ResultTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11ResultValueO11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify17ReviewSensitivityO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify17ReviewSensitivityO11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify17ReviewSensitivityO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify17ReviewSensitivityO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify14ReviewStrategyO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify14ReviewStrategyO11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify14ReviewStrategyO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify14ReviewStrategyO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify12SDKInitErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify7SegmentV6resultAA11CheckResultOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify7SegmentV4typeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify7SegmentV6boundsAA6BoundsVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify7SegmentV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify4SideO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify4SideO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12StringResultV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify12StringResultV5fieldSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12StringResultV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12StringResultV7resultsAA0D5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify12StringResultV5valueSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify12StringResultV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19SuspiciousDataCheckV7overallAA08DetailedE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19SuspiciousDataCheckV012sampleStringE0AA08DetailedE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19SuspiciousDataCheckV016suspiciousNumberE0AA08DetailedE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify19SuspiciousDataCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11TieredCheckV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify11TieredCheckV4nameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11TieredCheckV6resultAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 $s13BlinkIDVerify11TieredCheckV15performedChecksSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11TieredCheckV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11TieredCheckV6checksAA0D5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11TieredCheckV10matchLevelAA05MatchF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11TieredCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify19VerificationContextO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify19VerificationContextO11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify19VerificationContextO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify19VerificationContextO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify20VerificationSideModeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify20VerificationSideModeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11VerifyCheckV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify11VerifyCheckV4nameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11VerifyCheckV6resultAA0D6ResultOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 $s13BlinkIDVerify11VerifyCheckV15performedChecksSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11VerifyCheckV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify11VerifyCheckV6checksAA0D5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify11VerifyCheckV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13VerifyMessageV4codeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13VerifyMessageV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify13VerifyMessageV6statusAA0D6StatusOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13VerifyMessageV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12VerifyResultV4typeAA0D4TypeOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify12VerifyResultV5fieldSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12VerifyResultV7detailsAA16DetailDictionaryVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12VerifyResultV7resultsAA0D5ArrayVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify12VerifyResultV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 $s13BlinkIDVerify13VerifyRuntimeV9elapsedMss6UInt64VSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13VerifyRuntimeV14serviceVersionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13VerifyRuntimeV13runnerVersionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9 $s13BlinkIDVerify13VerifyRuntimeV19runnerInstanceIndexSiSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13VerifyRuntimeV14wrapperVersionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13VerifyRuntimeV27extractionRecognizerVersionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13VerifyRuntimeV29verificationRecognizerVersionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13VerifyRuntimeV13clientSdkNameSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16 $s13BlinkIDVerify13VerifyRuntimeV16clientSdkVersionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify13VerifyRuntimeV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify12VerifyScriptO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify12VerifyScriptO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9VizResultV5frontAA0D5ArrayVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s13BlinkIDVerify9VizResultV4backAA0D5ArrayVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16 $s13BlinkIDVerify9VizResultV11descriptionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _

#ifdef __cplusplus
}
}
}
namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO") ProcessingStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ProcessingStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO") RecognitionMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::RecognitionMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify24AdditionalProcessingInfoV") AdditionalProcessingInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::AdditionalProcessingInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_AdditionalProcessingInfo;

// Type metadata accessor for AdditionalProcessingInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify24AdditionalProcessingInfoVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify24AdditionalProcessingInfoV") AdditionalProcessingInfo final {
public:
  SWIFT_INLINE_THUNK ~AdditionalProcessingInfo() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24AdditionalProcessingInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AdditionalProcessingInfo(const AdditionalProcessingInfo &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24AdditionalProcessingInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AdditionalProcessingInfo &operator =(const AdditionalProcessingInfo &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24AdditionalProcessingInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AdditionalProcessingInfo &operator =(AdditionalProcessingInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AdditionalProcessingInfo(AdditionalProcessingInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> getFrontProcessingStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify24AdditionalProcessingInfoV05frontD6StatusAA0dG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> getBackProcessingStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify24AdditionalProcessingInfoV04backD6StatusAA0dG0OSgvp");
  SWIFT_INLINE_THUNK RecognitionMode getRecognitionMode() const SWIFT_SYMBOL("s:13BlinkIDVerify24AdditionalProcessingInfoV15recognitionModeAA011RecognitionG0Ovp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify24AdditionalProcessingInfoV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK AdditionalProcessingInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AdditionalProcessingInfo _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24AdditionalProcessingInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AdditionalProcessingInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AdditionalProcessingInfo;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify24AdditionalProcessingInfoVD;
  static inline constexpr $s13BlinkIDVerify24AdditionalProcessingInfoVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AdditionalProcessingInfo {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AdditionalProcessingInfo &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AdditionalProcessingInfo &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AdditionalProcessingInfo returnNewValue(T callable) {
    auto result = AdditionalProcessingInfo::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify24AdditionalProcessingInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::AdditionalProcessingInfo> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify24AdditionalProcessingInfoVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::AdditionalProcessingInfo> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::AdditionalProcessingInfo> = true;
template<>
struct implClassFor<BlinkIDVerify::AdditionalProcessingInfo> { using type = BlinkIDVerify::_impl::_impl_AdditionalProcessingInfo; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO") AnonymizationMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::AnonymizationMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_AnonymizationMode;

// Type metadata accessor for AnonymizationMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify17AnonymizationModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AnonymizationMode
extern "C" {
extern unsigned $s13BlinkIDVerify17AnonymizationModeO4noneyA2CmFWC;
extern unsigned $s13BlinkIDVerify17AnonymizationModeO9imageOnlyyA2CmFWC;
extern unsigned $s13BlinkIDVerify17AnonymizationModeO16resultFieldsOnlyyA2CmFWC;
extern unsigned $s13BlinkIDVerify17AnonymizationModeO10fullResultyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO") AnonymizationMode final {
public:
  SWIFT_INLINE_THUNK ~AnonymizationMode() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AnonymizationMode(const AnonymizationMode &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AnonymizationMode &operator =(const AnonymizationMode &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AnonymizationMode &operator =(AnonymizationMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AnonymizationMode(AnonymizationMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO4noneyA2CmF"),
    imageOnly SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO9imageOnlyyA2CmF"),
    resultFieldsOnly SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO16resultFieldsOnlyyA2CmF"),
    fullResult SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO10fullResultyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } none SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_imageOnly {  // impl struct for case imageOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imageOnly;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } imageOnly SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO9imageOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isImageOnly() const;

  inline const static struct _impl_resultFieldsOnly {  // impl struct for case resultFieldsOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resultFieldsOnly;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } resultFieldsOnly SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO16resultFieldsOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isResultFieldsOnly() const;

  inline const static struct _impl_fullResult {  // impl struct for case fullResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullResult;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } fullResult SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO10fullResultyA2CmF");
  SWIFT_INLINE_THUNK bool isFullResult() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify17AnonymizationModeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s13BlinkIDVerify17AnonymizationModeO9imageOnlyyA2CmFWC) return cases::imageOnly;
    if (tag == _impl::$s13BlinkIDVerify17AnonymizationModeO16resultFieldsOnlyyA2CmFWC) return cases::resultFieldsOnly;
    if (tag == _impl::$s13BlinkIDVerify17AnonymizationModeO10fullResultyA2CmFWC) return cases::fullResult;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO2idSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify17AnonymizationModeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK AnonymizationMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AnonymizationMode _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AnonymizationMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AnonymizationMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify17AnonymizationModeOD;
  static inline constexpr $s13BlinkIDVerify17AnonymizationModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AnonymizationMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AnonymizationMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AnonymizationMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AnonymizationMode returnNewValue(T callable) {
    auto result = AnonymizationMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::AnonymizationMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify17AnonymizationModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::AnonymizationMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::AnonymizationMode> = true;
template<>
struct implClassFor<BlinkIDVerify::AnonymizationMode> { using type = BlinkIDVerify::_impl::_impl_AnonymizationMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV") TieredCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::TieredCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO") CheckResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CheckResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify19BarcodeAnomalyCheckV") BarcodeAnomalyCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BarcodeAnomalyCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BarcodeAnomalyCheck;

// Type metadata accessor for BarcodeAnomalyCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify19BarcodeAnomalyCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify19BarcodeAnomalyCheckV") BarcodeAnomalyCheck final {
public:
  SWIFT_INLINE_THUNK ~BarcodeAnomalyCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeAnomalyCheck(const BarcodeAnomalyCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeAnomalyCheck &operator =(const BarcodeAnomalyCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeAnomalyCheck &operator =(BarcodeAnomalyCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeAnomalyCheck(BarcodeAnomalyCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<TieredCheck> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify19BarcodeAnomalyCheckV7overallAA06TieredE0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getContentCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify19BarcodeAnomalyCheckV07contentE0AA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getReadCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify19BarcodeAnomalyCheckV04readE0AA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify19BarcodeAnomalyCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK BarcodeAnomalyCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeAnomalyCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeAnomalyCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeAnomalyCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify19BarcodeAnomalyCheckVD;
  static inline constexpr $s13BlinkIDVerify19BarcodeAnomalyCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeAnomalyCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeAnomalyCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeAnomalyCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeAnomalyCheck returnNewValue(T callable) {
    auto result = BarcodeAnomalyCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BarcodeAnomalyCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify19BarcodeAnomalyCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BarcodeAnomalyCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BarcodeAnomalyCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::BarcodeAnomalyCheck> { using type = BlinkIDVerify::_impl::_impl_BarcodeAnomalyCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify12EncodedImageV") EncodedImage;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::EncodedImage> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV") BlinkIDVerifyRequestSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyRequestSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV") BlinkIDVerifyRequest;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyRequest> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB13CaptureResultV") BlinkIDVerifyCaptureResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyCaptureResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifyCaptureResult;

// Type metadata accessor for BlinkIDVerifyCaptureResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB13CaptureResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB13CaptureResultV") BlinkIDVerifyCaptureResult final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyCaptureResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB13CaptureResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyCaptureResult(const BlinkIDVerifyCaptureResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB13CaptureResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyCaptureResult &operator =(const BlinkIDVerifyCaptureResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB13CaptureResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyCaptureResult &operator =(BlinkIDVerifyCaptureResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyCaptureResult(BlinkIDVerifyCaptureResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<EncodedImage> getFrontCameraFrameJpeg() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB13CaptureResultV20frontCameraFrameJpegAA12EncodedImageVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<EncodedImage> getBackCameraFrameJpeg() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB13CaptureResultV19backCameraFrameJpegAA12EncodedImageVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<EncodedImage> getBarcodeCameraFrameJpeg() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB13CaptureResultV22barcodeCameraFrameJpegAA12EncodedImageVSgvp");
/// Converts the capture result into a document verification request.
/// This method creates a complete verification request using the captured images
/// and session settings. The request includes:
/// <ul>
///   <li>
///     Front and back document images
///   </li>
///   <li>
///     Barcode image if available
///   </li>
///   <li>
///     All verification settings from the capture session
///   </li>
///   <li>
///     Session identification information
///   </li>
/// </ul>
///
/// returns:
/// A configured <code>BlinkIDVerifyRequest</code> ready for submission
  SWIFT_INLINE_THUNK BlinkIDVerifyRequest toBlinkIDVerifyRequest(const swift::Optional<BlinkIDVerifyRequestSettings>& requestSettings) const SWIFT_SYMBOL("s:13BlinkIDVerify0aB13CaptureResultV02toaB7Request15requestSettingsAA0abF0VAA0abfH0VSg_tF");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyCaptureResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyCaptureResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB13CaptureResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyCaptureResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyCaptureResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB13CaptureResultVD;
  static inline constexpr $s13BlinkIDVerify0aB13CaptureResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyCaptureResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyCaptureResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyCaptureResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyCaptureResult returnNewValue(T callable) {
    auto result = BlinkIDVerifyCaptureResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB13CaptureResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyCaptureResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB13CaptureResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyCaptureResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyCaptureResult> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyCaptureResult> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyCaptureResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO") BlinkIDVerifyProcessingStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyProcessingStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV") DetailedCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DetailedCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify10CheckArrayV") CheckArray;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CheckArray> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessIndicatorV") ProcessIndicator;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ProcessIndicator> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV") Extraction;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Extraction> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyMessageV") VerifyMessage;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VerifyMessage> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV") VerifyRuntime;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VerifyRuntime> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify11ImageResultV") ImageResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV") BlinkIDVerifyProcessingOptions;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyProcessingOptions> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV") BlinkIDVerifyProcessingUseCase;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyProcessingUseCase> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV") BlinkIDVerifyEndpointResponse;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyEndpointResponse> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifyEndpointResponse;

// Type metadata accessor for BlinkIDVerifyEndpointResponse
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB16EndpointResponseVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV") BlinkIDVerifyEndpointResponse final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyEndpointResponse() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16EndpointResponseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyEndpointResponse(const BlinkIDVerifyEndpointResponse &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16EndpointResponseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyEndpointResponse &operator =(const BlinkIDVerifyEndpointResponse &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16EndpointResponseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyEndpointResponse &operator =(BlinkIDVerifyEndpointResponse &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyEndpointResponse(BlinkIDVerifyEndpointResponse &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus getProcessingStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV16processingStatusAA0ab10ProcessingF0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> getVerification() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV12verificationAA13DetailedCheckVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> getChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV6checksAA10CheckArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<ProcessIndicator>> getProcessIndicators() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV17processIndicatorsSayAA16ProcessIndicatorVGSgvp");
  SWIFT_INLINE_THUNK swift::Optional<Extraction> getExtraction() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV10extractionAA10ExtractionVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<VerifyMessage>> getMessages() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV8messagesSayAA13VerifyMessageVGSgvp");
  SWIFT_INLINE_THUNK swift::Optional<VerifyRuntime> getRuntime() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV7runtimeAA13VerifyRuntimeVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<ImageResult>> getImages() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV6imagesSayAA11ImageResultVGSgvp");
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingOptions> getOptionsUsed() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV11optionsUsedAA0aB17ProcessingOptionsVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingUseCase> getUseCaseUsed() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV11useCaseUsedAA0ab13ProcessingUseF0VSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16EndpointResponseV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyEndpointResponse(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyEndpointResponse _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16EndpointResponseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyEndpointResponse(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyEndpointResponse;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB16EndpointResponseVD;
  static inline constexpr $s13BlinkIDVerify0aB16EndpointResponseVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyEndpointResponse {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyEndpointResponse &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyEndpointResponse &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyEndpointResponse returnNewValue(T callable) {
    auto result = BlinkIDVerifyEndpointResponse::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB16EndpointResponseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyEndpointResponse> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB16EndpointResponseVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyEndpointResponse> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyEndpointResponse> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyEndpointResponse> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyEndpointResponse; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


class SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO") MatchLevel;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::MatchLevel> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV") ImageQualitySettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageQualitySettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO") ImageFormat;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageFormat> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO") VerificationSideMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VerificationSideMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifyProcessingOptions;

// Type metadata accessor for BlinkIDVerifyProcessingOptions
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB17ProcessingOptionsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV") BlinkIDVerifyProcessingOptions final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyProcessingOptions() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingOptionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingOptions(const BlinkIDVerifyProcessingOptions &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingOptionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingOptions &operator =(const BlinkIDVerifyProcessingOptions &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingOptionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingOptions &operator =(BlinkIDVerifyProcessingOptions &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyProcessingOptions(BlinkIDVerifyProcessingOptions &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> getReturnFullDocumentImage() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImageSbSgvp");
  SWIFT_INLINE_THUNK void setReturnFullDocumentImage(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImageSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getReturnFaceImage() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV15returnFaceImageSbSgvp");
  SWIFT_INLINE_THUNK void setReturnFaceImage(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV15returnFaceImageSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getReturnSignatureImage() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV20returnSignatureImageSbSgvp");
  SWIFT_INLINE_THUNK void setReturnSignatureImage(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV20returnSignatureImageSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getTreatExpirationAsFraud() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV22treatExpirationAsFraudSbSgvp");
  SWIFT_INLINE_THUNK void setTreatExpirationAsFraud(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV22treatExpirationAsFraudSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getScreenMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV16screenMatchLevelAA0fG0OSgvp");
  SWIFT_INLINE_THUNK void setScreenMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV16screenMatchLevelAA0fG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getPhotocopyMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV19photocopyMatchLevelAA0fG0OSgvp");
  SWIFT_INLINE_THUNK void setPhotocopyMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV19photocopyMatchLevelAA0fG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getVisualAnomalyMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV23visualAnomalyMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setVisualAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV23visualAnomalyMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getBarcodeAnomalyMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV24barcodeAnomalyMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setBarcodeAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV24barcodeAnomalyMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getPhotoForgeryMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV22photoForgeryMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setPhotoForgeryMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV22photoForgeryMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getStaticSecurityFeaturesMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV32staticSecurityFeaturesMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK void setStaticSecurityFeaturesMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV32staticSecurityFeaturesMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getDataMatchMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV09dataMatchF5LevelAA0fG0OSgvp");
  SWIFT_INLINE_THUNK void setDataMatchMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV09dataMatchF5LevelAA0fG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageQualitySettings> getImageQualitySettings() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV20imageQualitySettingsAA05ImagefG0VSgvp");
  SWIFT_INLINE_THUNK void setImageQualitySettings(const swift::Optional<ImageQualitySettings>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV20imageQualitySettingsAA05ImagefG0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageFormat> getReturnImageFormat() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV17returnImageFormatAA0fG0OSgvp");
  SWIFT_INLINE_THUNK void setReturnImageFormat(const swift::Optional<ImageFormat>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV17returnImageFormatAA0fG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> getAnonymizationMode() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV17anonymizationModeAA013AnonymizationF0OSgvp");
  SWIFT_INLINE_THUNK void setAnonymizationMode(const swift::Optional<AnonymizationMode>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV17anonymizationModeAA013AnonymizationF0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<VerificationSideMode> getSideMode() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV8sideModeAA016VerificationSideF0OSgvp");
  SWIFT_INLINE_THUNK void setSideMode(const swift::Optional<VerificationSideMode>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV8sideModeAA016VerificationSideF0OSgvp");
  static SWIFT_INLINE_THUNK BlinkIDVerifyProcessingOptions init(const swift::Optional<bool>& returnFullDocumentImage, const swift::Optional<bool>& returnFaceImage, const swift::Optional<bool>& returnSignatureImage, const swift::Optional<bool>& treatExpirationAsFraud, const swift::Optional<MatchLevel>& screenMatchLevel, const swift::Optional<MatchLevel>& photocopyMatchLevel, const swift::Optional<MatchLevel>& visualAnomalyMatchLevel, const swift::Optional<MatchLevel>& barcodeAnomalyMatchLevel, const swift::Optional<MatchLevel>& photoForgeryMatchLevel, const swift::Optional<MatchLevel>& staticSecurityFeaturesMatchLevel, const swift::Optional<MatchLevel>& dataMatchMatchLevel, const swift::Optional<ImageQualitySettings>& imageQualitySettings, const swift::Optional<ImageFormat>& returnImageFormat, const swift::Optional<AnonymizationMode>& anonymizationMode, const swift::Optional<VerificationSideMode>& sideMode) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImage0e4FaceH00e9SignatureH022treatExpirationAsFraud16screenMatchLevel09photocopypQ0013visualAnomalypQ007barcodetpQ0012photoForgerypQ0022staticSecurityFeaturespQ004datappQ020imageQualitySettings0eH6Format17anonymizationMode8sideModeACSbSg_A3sA0pQ0OSgA6vA0H15QualitySettingsVSgAA0H6FormatOSgAA17AnonymizationModeOSgAA20VerificationSideModeOSgtcfc");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingOptionsV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingOptions(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyProcessingOptions _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingOptionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyProcessingOptions(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyProcessingOptions;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB17ProcessingOptionsVD;
  static inline constexpr $s13BlinkIDVerify0aB17ProcessingOptionsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyProcessingOptions {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyProcessingOptions &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyProcessingOptions &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyProcessingOptions returnNewValue(T callable) {
    auto result = BlinkIDVerifyProcessingOptions::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingOptionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyProcessingOptions> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB17ProcessingOptionsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyProcessingOptions> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyProcessingOptions> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyProcessingOptions> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyProcessingOptions; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

/// Detailed information about the recognition process.
namespace _impl {

class _impl_BlinkIDVerifyProcessingStatus;

// Type metadata accessor for BlinkIDVerifyProcessingStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB16ProcessingStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum BlinkIDVerifyProcessingStatus
extern "C" {
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO12notAvailableyA2CmFWC;
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO16extractionFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO9completedyA2CmFWC;
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO18partiallyCompletedyA2CmFWC;
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO19completedAfterFrontyA2CmFWC;
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO16serverModelErroryA2CmFWC;
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO20fullyCroppedDocumentyA2CmFWC;
extern unsigned $s13BlinkIDVerify0aB16ProcessingStatusO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO") BlinkIDVerifyProcessingStatus final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyProcessingStatus() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus(const BlinkIDVerifyProcessingStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus &operator =(const BlinkIDVerifyProcessingStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus &operator =(BlinkIDVerifyProcessingStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyProcessingStatus(BlinkIDVerifyProcessingStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO12notAvailableyA2CmF"),
    extractionFailed SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO16extractionFailedyA2CmF"),
    completed SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO9completedyA2CmF"),
    partiallyCompleted SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO18partiallyCompletedyA2CmF"),
    completedAfterFront SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO19completedAfterFrontyA2CmF"),
    serverModelError SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO16serverModelErroryA2CmF"),
    fullyCroppedDocument SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO20fullyCroppedDocumentyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_extractionFailed {  // impl struct for case extractionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::extractionFailed;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } extractionFailed SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO16extractionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isExtractionFailed() const;

  inline const static struct _impl_completed {  // impl struct for case completed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::completed;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } completed SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO9completedyA2CmF");
  SWIFT_INLINE_THUNK bool isCompleted() const;

  inline const static struct _impl_partiallyCompleted {  // impl struct for case partiallyCompleted
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::partiallyCompleted;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } partiallyCompleted SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO18partiallyCompletedyA2CmF");
  SWIFT_INLINE_THUNK bool isPartiallyCompleted() const;

  inline const static struct _impl_completedAfterFront {  // impl struct for case completedAfterFront
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::completedAfterFront;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } completedAfterFront SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO19completedAfterFrontyA2CmF");
  SWIFT_INLINE_THUNK bool isCompletedAfterFront() const;

  inline const static struct _impl_serverModelError {  // impl struct for case serverModelError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serverModelError;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } serverModelError SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO16serverModelErroryA2CmF");
  SWIFT_INLINE_THUNK bool isServerModelError() const;

  inline const static struct _impl_fullyCroppedDocument {  // impl struct for case fullyCroppedDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullyCroppedDocument;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } fullyCroppedDocument SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO20fullyCroppedDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isFullyCroppedDocument() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO16extractionFailedyA2CmFWC) return cases::extractionFailed;
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO9completedyA2CmFWC) return cases::completed;
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO18partiallyCompletedyA2CmFWC) return cases::partiallyCompleted;
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO19completedAfterFrontyA2CmFWC) return cases::completedAfterFront;
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO16serverModelErroryA2CmFWC) return cases::serverModelError;
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO20fullyCroppedDocumentyA2CmFWC) return cases::fullyCroppedDocument;
    if (tag == _impl::$s13BlinkIDVerify0aB16ProcessingStatusO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB16ProcessingStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyProcessingStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyProcessingStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB16ProcessingStatusOD;
  static inline constexpr $s13BlinkIDVerify0aB16ProcessingStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyProcessingStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyProcessingStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyProcessingStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyProcessingStatus returnNewValue(T callable) {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyProcessingStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB16ProcessingStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyProcessingStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyProcessingStatus> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyProcessingStatus> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyProcessingStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO") DocumentVerificationPolicy;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DocumentVerificationPolicy> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO") VerificationContext;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VerificationContext> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO") ReviewStrategy;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ReviewStrategy> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO") ReviewSensitivity;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ReviewSensitivity> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifyProcessingUseCase;

// Type metadata accessor for BlinkIDVerifyProcessingUseCase
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB17ProcessingUseCaseVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV") BlinkIDVerifyProcessingUseCase final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyProcessingUseCase() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingUseCase(const BlinkIDVerifyProcessingUseCase &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingUseCase &operator =(const BlinkIDVerifyProcessingUseCase &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingUseCase &operator =(BlinkIDVerifyProcessingUseCase &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyProcessingUseCase(BlinkIDVerifyProcessingUseCase &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentVerificationPolicy> getDocumentVerificationPolicy() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicyAA08DocumentgH0OSgvp");
  SWIFT_INLINE_THUNK void setDocumentVerificationPolicy(const swift::Optional<DocumentVerificationPolicy>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicyAA08DocumentgH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<VerificationContext> getVerificationContext() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV19verificationContextAA012VerificationG0OSgvp");
  SWIFT_INLINE_THUNK void setVerificationContext(const swift::Optional<VerificationContext>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV19verificationContextAA012VerificationG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ReviewStrategy> getManualReviewStrategy() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV20manualReviewStrategyAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setManualReviewStrategy(const swift::Optional<ReviewStrategy>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV20manualReviewStrategyAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ReviewSensitivity> getManualReviewSensitivity() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV23manualReviewSensitivityAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setManualReviewSensitivity(const swift::Optional<ReviewSensitivity>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV23manualReviewSensitivityAA0gH0OSgvp");
  static SWIFT_INLINE_THUNK BlinkIDVerifyProcessingUseCase init(const swift::Optional<DocumentVerificationPolicy>& documentVerificationPolicy, const swift::Optional<VerificationContext>& verificationContext, const swift::Optional<ReviewStrategy>& manualReviewStrategy, const swift::Optional<ReviewSensitivity>& manualReviewSensitivity) SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicy19verificationContext20manualReviewStrategy0kL11SensitivityAcA08DocumentgH0OSg_AA0gJ0OSgAA0lM0OSgAA0lN0OSgtcfc");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB17ProcessingUseCaseV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingUseCase(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyProcessingUseCase _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyProcessingUseCase(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyProcessingUseCase;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB17ProcessingUseCaseVD;
  static inline constexpr $s13BlinkIDVerify0aB17ProcessingUseCaseVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyProcessingUseCase {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyProcessingUseCase &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyProcessingUseCase &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyProcessingUseCase returnNewValue(T callable) {
    auto result = BlinkIDVerifyProcessingUseCase::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyProcessingUseCase> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB17ProcessingUseCaseVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyProcessingUseCase> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyProcessingUseCase> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyProcessingUseCase> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyProcessingUseCase; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify11ImageSourceO") ImageSource;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageSource> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifyRequest;

// Type metadata accessor for BlinkIDVerifyRequest
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB7RequestVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV") BlinkIDVerifyRequest final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyRequest() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7RequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequest(const BlinkIDVerifyRequest &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7RequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequest &operator =(const BlinkIDVerifyRequest &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7RequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequest &operator =(BlinkIDVerifyRequest &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyRequest(BlinkIDVerifyRequest &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingOptions> getOptions() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV7optionsAA0aB17ProcessingOptionsVSgvp");
  SWIFT_INLINE_THUNK void setOptions(const swift::Optional<BlinkIDVerifyProcessingOptions>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV7optionsAA0aB17ProcessingOptionsVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingUseCase> getUseCase() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV7useCaseAA0ab13ProcessingUseE0VSgvp");
  SWIFT_INLINE_THUNK void setUseCase(const swift::Optional<BlinkIDVerifyProcessingUseCase>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV7useCaseAA0ab13ProcessingUseE0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getTraceId() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV7traceIdSSSgvp");
  SWIFT_INLINE_THUNK void setTraceId(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV7traceIdSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getSessionID() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV9sessionIDSSSgvp");
  SWIFT_INLINE_THUNK void setSessionID(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB7RequestV9sessionIDSSSgvp");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyRequest(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyRequest _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7RequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyRequest(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyRequest;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB7RequestVD;
  static inline constexpr $s13BlinkIDVerify0aB7RequestVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyRequest {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyRequest &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyRequest &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyRequest returnNewValue(T callable) {
    auto result = BlinkIDVerifyRequest::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB7RequestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyRequest> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB7RequestVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyRequest> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyRequest> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyRequest> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyRequest; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_BlinkIDVerifyRequestSettings;

// Type metadata accessor for BlinkIDVerifyRequestSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB15RequestSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV") BlinkIDVerifyRequestSettings final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyRequestSettings() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15RequestSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequestSettings(const BlinkIDVerifyRequestSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15RequestSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequestSettings &operator =(const BlinkIDVerifyRequestSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15RequestSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequestSettings &operator =(BlinkIDVerifyRequestSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyRequestSettings(BlinkIDVerifyRequestSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> getReturnFullDocumentImage() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImageSbSgvp");
  SWIFT_INLINE_THUNK void setReturnFullDocumentImage(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImageSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getReturnFaceImage() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV15returnFaceImageSbSgvp");
  SWIFT_INLINE_THUNK void setReturnFaceImage(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV15returnFaceImageSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getReturnSignatureImage() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV20returnSignatureImageSbSgvp");
  SWIFT_INLINE_THUNK void setReturnSignatureImage(const swift::Optional<bool>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV20returnSignatureImageSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageFormat> getReturnImageFormat() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV17returnImageFormatAA0fG0OSgvp");
  SWIFT_INLINE_THUNK void setReturnImageFormat(const swift::Optional<ImageFormat>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV17returnImageFormatAA0fG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> getAnonymizationMode() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV17anonymizationModeAA013AnonymizationF0OSgvp");
  SWIFT_INLINE_THUNK void setAnonymizationMode(const swift::Optional<AnonymizationMode>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV17anonymizationModeAA013AnonymizationF0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getTraceId() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV7traceIdSSSgvp");
  SWIFT_INLINE_THUNK void setTraceId(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV7traceIdSSSgvp");
  static SWIFT_INLINE_THUNK BlinkIDVerifyRequestSettings init(const swift::Optional<bool>& returnFullDocumentImage, const swift::Optional<bool>& returnFaceImage, const swift::Optional<bool>& returnSignatureImage, const swift::Optional<ImageFormat>& returnImageFormat, const swift::Optional<AnonymizationMode>& anonymizationMode, const swift::Optional<swift::String>& traceId) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImage0e4FaceH00e9SignatureH00eH6Format17anonymizationMode7traceIdACSbSg_A2jA0hK0OSgAA013AnonymizationM0OSgSSSgtcfc");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyRequestSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyRequestSettings _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15RequestSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyRequestSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyRequestSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB15RequestSettingsVD;
  static inline constexpr $s13BlinkIDVerify0aB15RequestSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyRequestSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyRequestSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyRequestSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyRequestSettings returnNewValue(T callable) {
    auto result = BlinkIDVerifyRequestSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB15RequestSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyRequestSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB15RequestSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyRequestSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyRequestSettings> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyRequestSettings> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyRequestSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


/// A thread-safe SDK for document verification and scanning operations.
/// <code>BlinkIDVerifySdk</code> provides functionality for creating document scanning sessions
/// and managing SDK lifecycle.
/// Example usage:
/// \code
/// let settings = BlinkIDVerifySdkSettings(
///     licenseKey: "your-license-key",
///     downloadResources: true,
/// )
///
/// do {
///     let sdk = try await BlinkIDVerifySdk.createDocumentVerifySdk(withSettings: settings)
///     let session = await sdk.createScanningSession()
///     // Use the session for document scanning
/// } catch {
///     // Handle initialization errors
/// }
///
/// \endcode
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB3SdkC") BlinkIDVerifySdk;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifySdk> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifySdk;
// Type metadata accessor for BlinkIDVerifySdk
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB3SdkCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB3SdkC") BlinkIDVerifySdk final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK BlinkIDVerifySdk(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_BlinkIDVerifySdk;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB3SdkCD;
  static inline constexpr $s13BlinkIDVerify0aB3SdkCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifySdk {
public:
static SWIFT_INLINE_THUNK BlinkIDVerifySdk makeRetained(void * _Nonnull ptr) noexcept { return BlinkIDVerifySdk(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifySdk> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB3SdkCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifySdk> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifySdk; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify14RequestTimeoutV") RequestTimeout;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::RequestTimeout> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV") BlinkIDVerifySdkSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifySdkSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifySdkSettings;

// Type metadata accessor for BlinkIDVerifySdkSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB11SdkSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV") BlinkIDVerifySdkSettings final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifySdkSettings() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB11SdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifySdkSettings(const BlinkIDVerifySdkSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB11SdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifySdkSettings &operator =(const BlinkIDVerifySdkSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB11SdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifySdkSettings &operator =(BlinkIDVerifySdkSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifySdkSettings(BlinkIDVerifySdkSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getLicenseKey() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV10licenseKeySSvp");
  SWIFT_INLINE_THUNK void setLicenseKey(const swift::String& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV10licenseKeySSvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getLicensee() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV8licenseeSSSgvp");
  SWIFT_INLINE_THUNK void setLicensee(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV8licenseeSSSgvp");
  SWIFT_INLINE_THUNK bool getHelloLogEnabled() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV15helloLogEnabledSbvp");
  SWIFT_INLINE_THUNK void setHelloLogEnabled(bool value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV15helloLogEnabledSbvp");
  SWIFT_INLINE_THUNK bool getDownloadResources() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV17downloadResourcesSbvp");
  SWIFT_INLINE_THUNK void setDownloadResources(bool value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV17downloadResourcesSbvp");
  SWIFT_INLINE_THUNK swift::String getResourceDownloadUrl() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV19resourceDownloadUrlSSvp");
  SWIFT_INLINE_THUNK void setResourceDownloadUrl(const swift::String& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV19resourceDownloadUrlSSvp");
  SWIFT_INLINE_THUNK swift::String getResourceLocalFolder() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV19resourceLocalFolderSSvp");
  SWIFT_INLINE_THUNK RequestTimeout getResourceRequestTimeout() const SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV22resourceRequestTimeoutAA0fG0Vvp");
  SWIFT_INLINE_THUNK void setResourceRequestTimeout(const RequestTimeout& value) SWIFT_SYMBOL("s:13BlinkIDVerify0aB11SdkSettingsV22resourceRequestTimeoutAA0fG0Vvp");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifySdkSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifySdkSettings _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB11SdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifySdkSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifySdkSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB11SdkSettingsVD;
  static inline constexpr $s13BlinkIDVerify0aB11SdkSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifySdkSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifySdkSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifySdkSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifySdkSettings returnNewValue(T callable) {
    auto result = BlinkIDVerifySdkSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB11SdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifySdkSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB11SdkSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifySdkSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifySdkSettings> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifySdkSettings> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifySdkSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB15ServiceSettingsV") BlinkIDVerifyServiceSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyServiceSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify0aB7ServiceV") BlinkIDVerifyService;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::BlinkIDVerifyService> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_BlinkIDVerifyService;

// Type metadata accessor for BlinkIDVerifyService
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB7ServiceVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB7ServiceV") BlinkIDVerifyService final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyService() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7ServiceVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyService(const BlinkIDVerifyService &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7ServiceVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyService &operator =(const BlinkIDVerifyService &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7ServiceVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyService &operator =(BlinkIDVerifyService &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyService(BlinkIDVerifyService &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  static SWIFT_INLINE_THUNK BlinkIDVerifyService init(const BlinkIDVerifyServiceSettings& settings) SWIFT_SYMBOL("s:13BlinkIDVerify0aB7ServiceV8settingsAcA0abC8SettingsV_tcfc");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyService(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyService _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB7ServiceVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyService(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyService;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB7ServiceVD;
  static inline constexpr $s13BlinkIDVerify0aB7ServiceVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyService {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyService &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyService &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyService returnNewValue(T callable) {
    auto result = BlinkIDVerifyService::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB7ServiceVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyService> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB7ServiceVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyService> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyService> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyService> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyService; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_BlinkIDVerifyServiceSettings;

// Type metadata accessor for BlinkIDVerifyServiceSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify0aB15ServiceSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify0aB15ServiceSettingsV") BlinkIDVerifyServiceSettings final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDVerifyServiceSettings() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15ServiceSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings(const BlinkIDVerifyServiceSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15ServiceSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings &operator =(const BlinkIDVerifyServiceSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15ServiceSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings &operator =(BlinkIDVerifyServiceSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyServiceSettings(BlinkIDVerifyServiceSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  static SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings init(const swift::String& verificationServiceBaseUrl, const swift::Optional<swift::String>& mbClientSdkName, const swift::Optional<swift::String>& mbClientSdkVersion, const swift::Optional<swift::String>& mbRunnerVersion) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15ServiceSettingsV012verificationC7BaseUrl15mbClientSdkName0hiJ7Version0h6RunnerL0ACSS_SSSgA2Htcfc");
  static SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings init(const swift::String& verificationServiceBaseUrl, const swift::String& token, const swift::Optional<swift::String>& mbClientSdkName, const swift::Optional<swift::String>& mbClientSdkVersion, const swift::Optional<swift::String>& mbRunnerVersion) SWIFT_SYMBOL("s:13BlinkIDVerify0aB15ServiceSettingsV012verificationC7BaseUrl5token15mbClientSdkName0ijK7Version0i6RunnerM0ACSS_S2SSgA2Itcfc");
private:
  SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify0aB15ServiceSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDVerifyServiceSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDVerifyServiceSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify0aB15ServiceSettingsVD;
  static inline constexpr $s13BlinkIDVerify0aB15ServiceSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDVerifyServiceSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDVerifyServiceSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDVerifyServiceSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDVerifyServiceSettings returnNewValue(T callable) {
    auto result = BlinkIDVerifyServiceSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify0aB15ServiceSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::BlinkIDVerifyServiceSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify0aB15ServiceSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::BlinkIDVerifyServiceSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::BlinkIDVerifyServiceSettings> = true;
template<>
struct implClassFor<BlinkIDVerify::BlinkIDVerifyServiceSettings> { using type = BlinkIDVerify::_impl::_impl_BlinkIDVerifyServiceSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify6BoundsV") Bounds;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Bounds> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_Bounds;

// Type metadata accessor for Bounds
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify6BoundsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify6BoundsV") Bounds final {
public:
  SWIFT_INLINE_THUNK ~Bounds() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6BoundsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Bounds(const Bounds &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6BoundsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Bounds &operator =(const Bounds &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6BoundsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Bounds &operator =(Bounds &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Bounds(Bounds &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK double getX() const SWIFT_SYMBOL("s:13BlinkIDVerify6BoundsV1xSdvp");
  SWIFT_INLINE_THUNK double getY() const SWIFT_SYMBOL("s:13BlinkIDVerify6BoundsV1ySdvp");
  SWIFT_INLINE_THUNK double getWidth() const SWIFT_SYMBOL("s:13BlinkIDVerify6BoundsV5widthSdvp");
  SWIFT_INLINE_THUNK double getHeight() const SWIFT_SYMBOL("s:13BlinkIDVerify6BoundsV6heightSdvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify6BoundsV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK Bounds(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Bounds _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6BoundsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Bounds(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Bounds;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify6BoundsVD;
  static inline constexpr $s13BlinkIDVerify6BoundsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Bounds {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Bounds &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Bounds &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Bounds returnNewValue(T callable) {
    auto result = Bounds::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify6BoundsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Bounds> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify6BoundsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Bounds> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Bounds> = true;
template<>
struct implClassFor<BlinkIDVerify::Bounds> { using type = BlinkIDVerify::_impl::_impl_Bounds; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify16RegionOfInterestV") RegionOfInterest;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::RegionOfInterest> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO") CameraFrameVideoOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CameraFrameVideoOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV") CameraFrame;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CameraFrame> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CameraFrame;

// Type metadata accessor for CameraFrame
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11CameraFrameVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV") CameraFrame final {
public:
  SWIFT_INLINE_THUNK ~CameraFrame() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrame(const CameraFrame &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrame &operator =(const CameraFrame &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CameraFrame &operator =(CameraFrame &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CameraFrame(CameraFrame &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK MBSampleBufferWrapper *_Nonnull getBuffer() const SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV6bufferSo21MBSampleBufferWrapperCvp");
  SWIFT_INLINE_THUNK RegionOfInterest getRoi() const SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV3roiAA16RegionOfInterestVvp");
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation getOrientation() const SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV11orientationAA0cD16VideoOrientationOvp");
/// Creates a new camera frame instance.
/// \param buffer The wrapped sample buffer containing the image data
///
/// \param roi The region of interest within the frame. Defaults to full frame
///
/// \param orientation The orientation of the camera. Defaults to portrait
///
  static SWIFT_INLINE_THUNK CameraFrame init(MBSampleBufferWrapper *_Nonnull buffer, const RegionOfInterest& roi, const CameraFrameVideoOrientation& orientation) SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfc");
  SWIFT_INLINE_THUNK swift::Int getWidth() const SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV5widthSivp");
  SWIFT_INLINE_THUNK swift::Int getHeight() const SWIFT_SYMBOL("s:13BlinkIDVerify11CameraFrameV6heightSivp");
private:
  SWIFT_INLINE_THUNK CameraFrame(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CameraFrame _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CameraFrame(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CameraFrame;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11CameraFrameVD;
  static inline constexpr $s13BlinkIDVerify11CameraFrameVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CameraFrame {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CameraFrame &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CameraFrame &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CameraFrame returnNewValue(T callable) {
    auto result = CameraFrame::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CameraFrame> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11CameraFrameVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CameraFrame> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CameraFrame> = true;
template<>
struct implClassFor<BlinkIDVerify::CameraFrame> { using type = BlinkIDVerify::_impl::_impl_CameraFrame; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

/// Represents the video orientation of a camera frame.
/// This enum defines the possible orientations of the device when capturing
/// camera frames, which is essential for proper image processing.
namespace _impl {

class _impl_CameraFrameVideoOrientation;

// Type metadata accessor for CameraFrameVideoOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify27CameraFrameVideoOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CameraFrameVideoOrientation
extern "C" {
extern unsigned $s13BlinkIDVerify27CameraFrameVideoOrientationO8portraityA2CmFWC;
extern unsigned $s13BlinkIDVerify27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC;
extern unsigned $s13BlinkIDVerify27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC;
extern unsigned $s13BlinkIDVerify27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO") CameraFrameVideoOrientation final {
public:
  SWIFT_INLINE_THUNK ~CameraFrameVideoOrientation() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation(const CameraFrameVideoOrientation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation &operator =(const CameraFrameVideoOrientation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation &operator =(CameraFrameVideoOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CameraFrameVideoOrientation(CameraFrameVideoOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    portrait SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO8portraityA2CmF"),
    portraitUpsideDown SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmF"),
    landscapeRight SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO14landscapeRightyA2CmF"),
    landscapeLeft SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO13landscapeLeftyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_portrait {  // impl struct for case portrait
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portrait;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } portrait SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO8portraityA2CmF");
  SWIFT_INLINE_THUNK bool isPortrait() const;

  inline const static struct _impl_portraitUpsideDown {  // impl struct for case portraitUpsideDown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portraitUpsideDown;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } portraitUpsideDown SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmF");
  SWIFT_INLINE_THUNK bool isPortraitUpsideDown() const;

  inline const static struct _impl_landscapeRight {  // impl struct for case landscapeRight
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::landscapeRight;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } landscapeRight SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO14landscapeRightyA2CmF");
  SWIFT_INLINE_THUNK bool isLandscapeRight() const;

  inline const static struct _impl_landscapeLeft {  // impl struct for case landscapeLeft
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::landscapeLeft;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } landscapeLeft SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO13landscapeLeftyA2CmF");
  SWIFT_INLINE_THUNK bool isLandscapeLeft() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO8portraityA2CmFWC) return cases::portrait;
    if (tag == _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC) return cases::portraitUpsideDown;
    if (tag == _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC) return cases::landscapeRight;
    if (tag == _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC) return cases::landscapeLeft;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13BlinkIDVerify27CameraFrameVideoOrientationO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CameraFrameVideoOrientation _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CameraFrameVideoOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CameraFrameVideoOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify27CameraFrameVideoOrientationOD;
  static inline constexpr $s13BlinkIDVerify27CameraFrameVideoOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CameraFrameVideoOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CameraFrameVideoOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CameraFrameVideoOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CameraFrameVideoOrientation returnNewValue(T callable) {
    auto result = CameraFrameVideoOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CameraFrameVideoOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify27CameraFrameVideoOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CameraFrameVideoOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CameraFrameVideoOrientation> = true;
template<>
struct implClassFor<BlinkIDVerify::CameraFrameVideoOrientation> { using type = BlinkIDVerify::_impl::_impl_CameraFrameVideoOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify13CapturePolicyO") CapturePolicy;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CapturePolicy> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
/// Defines the capture mode for document verification sessions.
/// This enum specifies whether the document capture should be performed
/// using video stream analysis or static photo capture.
namespace _impl {

class _impl_CapturePolicy;

// Type metadata accessor for CapturePolicy
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13CapturePolicyOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CapturePolicy
extern "C" {
extern unsigned $s13BlinkIDVerify13CapturePolicyO5videoyA2CmFWC;
extern unsigned $s13BlinkIDVerify13CapturePolicyO5photoyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13CapturePolicyO") CapturePolicy final {
public:
  SWIFT_INLINE_THUNK ~CapturePolicy() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CapturePolicy(const CapturePolicy &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CapturePolicy &operator =(const CapturePolicy &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CapturePolicy &operator =(CapturePolicy &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CapturePolicy(CapturePolicy &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    video SWIFT_SYMBOL("s:13BlinkIDVerify13CapturePolicyO5videoyA2CmF"),
    photo SWIFT_SYMBOL("s:13BlinkIDVerify13CapturePolicyO5photoyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_video {  // impl struct for case video
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::video;
    }
    SWIFT_INLINE_THUNK CapturePolicy operator()() const;
  } video SWIFT_SYMBOL("s:13BlinkIDVerify13CapturePolicyO5videoyA2CmF");
  SWIFT_INLINE_THUNK bool isVideo() const;

  inline const static struct _impl_photo {  // impl struct for case photo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::photo;
    }
    SWIFT_INLINE_THUNK CapturePolicy operator()() const;
  } photo SWIFT_SYMBOL("s:13BlinkIDVerify13CapturePolicyO5photoyA2CmF");
  SWIFT_INLINE_THUNK bool isPhoto() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify13CapturePolicyO5videoyA2CmFWC) return cases::video;
    if (tag == _impl::$s13BlinkIDVerify13CapturePolicyO5photoyA2CmFWC) return cases::photo;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13BlinkIDVerify13CapturePolicyO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CapturePolicy(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CapturePolicy _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CapturePolicy(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CapturePolicy;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13CapturePolicyOD;
  static inline constexpr $s13BlinkIDVerify13CapturePolicyOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CapturePolicy {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CapturePolicy &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CapturePolicy &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CapturePolicy returnNewValue(T callable) {
    auto result = CapturePolicy::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13CapturePolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CapturePolicy> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13CapturePolicyOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CapturePolicy> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CapturePolicy> = true;
template<>
struct implClassFor<BlinkIDVerify::CapturePolicy> { using type = BlinkIDVerify::_impl::_impl_CapturePolicy; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


/// A session controller for document capture and verification operations.
/// <code>CaptureSession</code> manages the lifecycle of a document verification session,
/// handling image processing, barcode scanning, and result generation.
class SWIFT_SYMBOL("s:13BlinkIDVerify14CaptureSessionC") CaptureSession;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CaptureSession> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CaptureSession;
// Type metadata accessor for CaptureSession
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify14CaptureSessionCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify14CaptureSessionC") CaptureSession final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Cancels any ongoing processing operations.
/// This method can be called from any context to immediately stop
/// the current processing operation. It’s useful when needing to
/// abort a verification session or handle user cancellation.
  SWIFT_INLINE_THUNK void cancelActiveProcessing() SWIFT_SYMBOL("s:13BlinkIDVerify14CaptureSessionC22cancelActiveProcessingyyF");
/// Restarts processing session and cancels any ongoing processing operations.
/// This method is used to restart the session, resetting everything to its initial state.
  SWIFT_INLINE_THUNK void restart() SWIFT_SYMBOL("s:13BlinkIDVerify14CaptureSessionC7restartyyF");
protected:
  SWIFT_INLINE_THUNK CaptureSession(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_CaptureSession;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify14CaptureSessionCD;
  static inline constexpr $s13BlinkIDVerify14CaptureSessionCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CaptureSession {
public:
static SWIFT_INLINE_THUNK CaptureSession makeRetained(void * _Nonnull ptr) noexcept { return CaptureSession(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CaptureSession> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify14CaptureSessionCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkIDVerify::CaptureSession> { using type = BlinkIDVerify::_impl::_impl_CaptureSession; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV") CaptureSessionSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CaptureSessionSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CaptureSessionSettings;

// Type metadata accessor for CaptureSessionSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify22CaptureSessionSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV") CaptureSessionSettings final {
public:
  SWIFT_INLINE_THUNK ~CaptureSessionSettings() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22CaptureSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CaptureSessionSettings(const CaptureSessionSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22CaptureSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CaptureSessionSettings &operator =(const CaptureSessionSettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22CaptureSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CaptureSessionSettings &operator =(CaptureSessionSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CaptureSessionSettings(CaptureSessionSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK CapturePolicy getCapturePolicy() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV13capturePolicyAA0cG0Ovp");
  SWIFT_INLINE_THUNK void setCapturePolicy(const CapturePolicy& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV13capturePolicyAA0cG0Ovp");
  SWIFT_INLINE_THUNK bool getTreatExpirationAsFraud() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV22treatExpirationAsFraudSbvp");
  SWIFT_INLINE_THUNK void setTreatExpirationAsFraud(bool value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV22treatExpirationAsFraudSbvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getScreenAnalysisMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV24screenAnalysisMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK void setScreenAnalysisMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV24screenAnalysisMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getPhotocopyAnalysisMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV27photocopyAnalysisMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK void setPhotocopyAnalysisMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV27photocopyAnalysisMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getVisualAnomalyMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV23visualAnomalyMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK void setVisualAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV23visualAnomalyMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getPhotoForgeryMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV22photoForgeryMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK void setPhotoForgeryMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV22photoForgeryMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getStaticSecurityFeaturesMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV32staticSecurityFeaturesMatchLevelAA0iJ0OSgvp");
  SWIFT_INLINE_THUNK void setStaticSecurityFeaturesMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV32staticSecurityFeaturesMatchLevelAA0iJ0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getBarcodeAnomalyMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV24barcodeAnomalyMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK void setBarcodeAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV24barcodeAnomalyMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getDataMatchMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV09dataMatchG5LevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setDataMatchMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV09dataMatchG5LevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageQualitySettings> getImageQualitySettings() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV012imageQualityE0AA05ImagegE0VSgvp");
  SWIFT_INLINE_THUNK void setImageQualitySettings(const swift::Optional<ImageQualitySettings>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV012imageQualityE0AA05ImagegE0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingUseCase> getUseCase() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV7useCaseAA0ab13ProcessingUseG0VSgvp");
  SWIFT_INLINE_THUNK void setUseCase(const swift::Optional<BlinkIDVerifyProcessingUseCase>& value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV7useCaseAA0ab13ProcessingUseG0VSgvp");
  SWIFT_INLINE_THUNK double getStepTimeoutDuration() const SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV19stepTimeoutDurationSdvp");
  SWIFT_INLINE_THUNK void setStepTimeoutDuration(double value) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV19stepTimeoutDurationSdvp");
/// Creates a new instance of CaptureSessionSettings with customizable parameters.
/// All parameters have default values that provide a balanced mix of security
/// and usability. Adjust these values based on your specific security requirements.
/// \param capturePolicy The mode of document capture. Defaults to <code>.video</code>.
///
/// \param treatExpirationAsFraud Expired document will be treated as fraud. Defaults to <code>true</code>.
///
/// \param screenAnalysisMatchLevel Screen detection sensitivity. Defaults to <code>nil</code>.
///
/// \param photocopyAnalysisMatchLevel Photocopy detection sensitivity. Defaults to <code>nil</code>.
///
/// \param visualAnomalyMatchLevel Photocopy detection sensitivity. Defaults to <code>nil</code>.
///
/// \param photoForgeryMatchLevel Photo forgery detection sensitivity. Defaults to <code>nil</code>.
///
/// \param staticSecurityFeaturesMatchLevel Security feature verification strictness. Defaults to <code>nil</code>.
///
/// \param barcodeAnomalyMatchLevel Barcode anomaly detection sensitivity. Defaults to <code>nil</code>.
///
/// \param dataMatchMatchLevel Data matching strictness. Defaults to <code>nil</code>.
///
/// \param imageQualitySettings Image quality settings
///
/// \param useCase Use case for the recognizer
///
/// \param stepTimeoutDuration Duration in seconds before scanning times out and is cancelled. If less than zero, scanning will not time out. Default 15.0 seconds.
///
  static SWIFT_INLINE_THUNK CaptureSessionSettings init(const CapturePolicy& capturePolicy, bool treatExpirationAsFraud, const swift::Optional<MatchLevel>& screenAnalysisMatchLevel, const swift::Optional<MatchLevel>& photocopyAnalysisMatchLevel, const swift::Optional<MatchLevel>& visualAnomalyMatchLevel, const swift::Optional<MatchLevel>& photoForgeryMatchLevel, const swift::Optional<MatchLevel>& staticSecurityFeaturesMatchLevel, const swift::Optional<MatchLevel>& barcodeAnomalyMatchLevel, const swift::Optional<MatchLevel>& dataMatchMatchLevel, const swift::Optional<ImageQualitySettings>& imageQualitySettings, const swift::Optional<BlinkIDVerifyProcessingUseCase>& useCase, double stepTimeoutDuration) SWIFT_SYMBOL("s:13BlinkIDVerify22CaptureSessionSettingsV13capturePolicy22treatExpirationAsFraud24screenAnalysisMatchLevel09photocopymnO0013visualAnomalynO0012photoForgerynO0022staticSecurityFeaturesnO007barcodernO004datannO0012imageQualityE07useCase19stepTimeoutDurationAcA0cG0O_SbAA0nO0OSgA6tA012ImageQualityE0VSgAA0aB17ProcessingUseCaseVSgSdtcfc");
private:
  SWIFT_INLINE_THUNK CaptureSessionSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CaptureSessionSettings _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22CaptureSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CaptureSessionSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CaptureSessionSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify22CaptureSessionSettingsVD;
  static inline constexpr $s13BlinkIDVerify22CaptureSessionSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CaptureSessionSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CaptureSessionSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CaptureSessionSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CaptureSessionSettings returnNewValue(T callable) {
    auto result = CaptureSessionSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify22CaptureSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CaptureSessionSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify22CaptureSessionSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CaptureSessionSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CaptureSessionSettings> = true;
template<>
struct implClassFor<BlinkIDVerify::CaptureSessionSettings> { using type = BlinkIDVerify::_impl::_impl_CaptureSessionSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO") CardOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CardOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CardOrientation;

// Type metadata accessor for CardOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify15CardOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CardOrientation
extern "C" {
extern unsigned $s13BlinkIDVerify15CardOrientationO10horizontalyA2CmFWC;
extern unsigned $s13BlinkIDVerify15CardOrientationO8verticalyA2CmFWC;
extern unsigned $s13BlinkIDVerify15CardOrientationO12notAvailableyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO") CardOrientation final {
public:
  SWIFT_INLINE_THUNK ~CardOrientation() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CardOrientation(const CardOrientation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CardOrientation &operator =(const CardOrientation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CardOrientation &operator =(CardOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CardOrientation(CardOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    horizontal SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO10horizontalyA2CmF"),
    vertical SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO8verticalyA2CmF"),
    notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO12notAvailableyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_horizontal {  // impl struct for case horizontal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::horizontal;
    }
    SWIFT_INLINE_THUNK CardOrientation operator()() const;
  } horizontal SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO10horizontalyA2CmF");
  SWIFT_INLINE_THUNK bool isHorizontal() const;

  inline const static struct _impl_vertical {  // impl struct for case vertical
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vertical;
    }
    SWIFT_INLINE_THUNK CardOrientation operator()() const;
  } vertical SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO8verticalyA2CmF");
  SWIFT_INLINE_THUNK bool isVertical() const;

  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK CardOrientation operator()() const;
  } notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify15CardOrientationO10horizontalyA2CmFWC) return cases::horizontal;
    if (tag == _impl::$s13BlinkIDVerify15CardOrientationO8verticalyA2CmFWC) return cases::vertical;
    if (tag == _impl::$s13BlinkIDVerify15CardOrientationO12notAvailableyA2CmFWC) return cases::notAvailable;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<CardOrientation> init(swift::Int rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify15CardOrientationO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK CardOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CardOrientation _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CardOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CardOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify15CardOrientationOD;
  static inline constexpr $s13BlinkIDVerify15CardOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CardOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CardOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CardOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CardOrientation returnNewValue(T callable) {
    auto result = CardOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify15CardOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CardOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify15CardOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CardOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CardOrientation> = true;
template<>
struct implClassFor<BlinkIDVerify::CardOrientation> { using type = BlinkIDVerify::_impl::_impl_CardOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO") CardRotation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CardRotation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CardRotation;

// Type metadata accessor for CardRotation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12CardRotationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CardRotation
extern "C" {
extern unsigned $s13BlinkIDVerify12CardRotationO4zeroyA2CmFWC;
extern unsigned $s13BlinkIDVerify12CardRotationO11clockwise90yA2CmFWC;
extern unsigned $s13BlinkIDVerify12CardRotationO18counterClockwise90yA2CmFWC;
extern unsigned $s13BlinkIDVerify12CardRotationO10upsideDownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO") CardRotation final {
public:
  SWIFT_INLINE_THUNK ~CardRotation() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CardRotation(const CardRotation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CardRotation &operator =(const CardRotation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CardRotation &operator =(CardRotation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CardRotation(CardRotation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    zero SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO4zeroyA2CmF"),
    clockwise90 SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO11clockwise90yA2CmF"),
    counterClockwise90 SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO18counterClockwise90yA2CmF"),
    upsideDown SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO10upsideDownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_zero {  // impl struct for case zero
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zero;
    }
    SWIFT_INLINE_THUNK CardRotation operator()() const;
  } zero SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO4zeroyA2CmF");
  SWIFT_INLINE_THUNK bool isZero() const;

  inline const static struct _impl_clockwise90 {  // impl struct for case clockwise90
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clockwise90;
    }
    SWIFT_INLINE_THUNK CardRotation operator()() const;
  } clockwise90 SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO11clockwise90yA2CmF");
  SWIFT_INLINE_THUNK bool isClockwise90() const;

  inline const static struct _impl_counterClockwise90 {  // impl struct for case counterClockwise90
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::counterClockwise90;
    }
    SWIFT_INLINE_THUNK CardRotation operator()() const;
  } counterClockwise90 SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO18counterClockwise90yA2CmF");
  SWIFT_INLINE_THUNK bool isCounterClockwise90() const;

  inline const static struct _impl_upsideDown {  // impl struct for case upsideDown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upsideDown;
    }
    SWIFT_INLINE_THUNK CardRotation operator()() const;
  } upsideDown SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO10upsideDownyA2CmF");
  SWIFT_INLINE_THUNK bool isUpsideDown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify12CardRotationO4zeroyA2CmFWC) return cases::zero;
    if (tag == _impl::$s13BlinkIDVerify12CardRotationO11clockwise90yA2CmFWC) return cases::clockwise90;
    if (tag == _impl::$s13BlinkIDVerify12CardRotationO18counterClockwise90yA2CmFWC) return cases::counterClockwise90;
    if (tag == _impl::$s13BlinkIDVerify12CardRotationO10upsideDownyA2CmFWC) return cases::upsideDown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<CardRotation> init(swift::Int rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify12CardRotationO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK CardRotation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CardRotation _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CardRotation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CardRotation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12CardRotationOD;
  static inline constexpr $s13BlinkIDVerify12CardRotationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CardRotation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CardRotation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CardRotation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CardRotation returnNewValue(T callable) {
    auto result = CardRotation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12CardRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CardRotation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12CardRotationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CardRotation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CardRotation> = true;
template<>
struct implClassFor<BlinkIDVerify::CardRotation> { using type = BlinkIDVerify::_impl::_impl_CardRotation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO") CertaintyLevel;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CertaintyLevel> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CertaintyLevel;

// Type metadata accessor for CertaintyLevel
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify14CertaintyLevelOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CertaintyLevel
extern "C" {
extern unsigned $s13BlinkIDVerify14CertaintyLevelO12notPerformedyA2CmFWC;
extern unsigned $s13BlinkIDVerify14CertaintyLevelO4highyA2CmFWC;
extern unsigned $s13BlinkIDVerify14CertaintyLevelO6mediumyA2CmFWC;
extern unsigned $s13BlinkIDVerify14CertaintyLevelO3lowyA2CmFWC;
extern unsigned $s13BlinkIDVerify14CertaintyLevelO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO") CertaintyLevel final {
public:
  SWIFT_INLINE_THUNK ~CertaintyLevel() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CertaintyLevel(const CertaintyLevel &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CertaintyLevel &operator =(const CertaintyLevel &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CertaintyLevel &operator =(CertaintyLevel &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CertaintyLevel(CertaintyLevel &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notPerformed SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO12notPerformedyA2CmF"),
    high SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO4highyA2CmF"),
    medium SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO6mediumyA2CmF"),
    low SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO3lowyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notPerformed {  // impl struct for case notPerformed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notPerformed;
    }
    SWIFT_INLINE_THUNK CertaintyLevel operator()() const;
  } notPerformed SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO12notPerformedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotPerformed() const;

  inline const static struct _impl_high {  // impl struct for case high
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::high;
    }
    SWIFT_INLINE_THUNK CertaintyLevel operator()() const;
  } high SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO4highyA2CmF");
  SWIFT_INLINE_THUNK bool isHigh() const;

  inline const static struct _impl_medium {  // impl struct for case medium
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::medium;
    }
    SWIFT_INLINE_THUNK CertaintyLevel operator()() const;
  } medium SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO6mediumyA2CmF");
  SWIFT_INLINE_THUNK bool isMedium() const;

  inline const static struct _impl_low {  // impl struct for case low
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::low;
    }
    SWIFT_INLINE_THUNK CertaintyLevel operator()() const;
  } low SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO3lowyA2CmF");
  SWIFT_INLINE_THUNK bool isLow() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK CertaintyLevel operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify14CertaintyLevelO12notPerformedyA2CmFWC) return cases::notPerformed;
    if (tag == _impl::$s13BlinkIDVerify14CertaintyLevelO4highyA2CmFWC) return cases::high;
    if (tag == _impl::$s13BlinkIDVerify14CertaintyLevelO6mediumyA2CmFWC) return cases::medium;
    if (tag == _impl::$s13BlinkIDVerify14CertaintyLevelO3lowyA2CmFWC) return cases::low;
    if (tag == _impl::$s13BlinkIDVerify14CertaintyLevelO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<CertaintyLevel> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify14CertaintyLevelO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK CertaintyLevel(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CertaintyLevel _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CertaintyLevel(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CertaintyLevel;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify14CertaintyLevelOD;
  static inline constexpr $s13BlinkIDVerify14CertaintyLevelOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CertaintyLevel {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CertaintyLevel &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CertaintyLevel &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CertaintyLevel returnNewValue(T callable) {
    auto result = CertaintyLevel::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify14CertaintyLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CertaintyLevel> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify14CertaintyLevelOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CertaintyLevel> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CertaintyLevel> = true;
template<>
struct implClassFor<BlinkIDVerify::CertaintyLevel> { using type = BlinkIDVerify::_impl::_impl_CertaintyLevel; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_CheckArray;

// Type metadata accessor for CheckArray
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10CheckArrayVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10CheckArrayV") CheckArray final {
public:
  SWIFT_INLINE_THUNK ~CheckArray() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckArray(const CheckArray &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckArray &operator =(const CheckArray &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CheckArray &operator =(CheckArray &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CheckArray(CheckArray &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10CheckArrayV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK CheckArray(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CheckArray _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CheckArray(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CheckArray;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10CheckArrayVD;
  static inline constexpr $s13BlinkIDVerify10CheckArrayVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CheckArray {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CheckArray &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CheckArray &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CheckArray returnNewValue(T callable) {
    auto result = CheckArray::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10CheckArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CheckArray> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10CheckArrayVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CheckArray> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CheckArray> = true;
template<>
struct implClassFor<BlinkIDVerify::CheckArray> { using type = BlinkIDVerify::_impl::_impl_CheckArray; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_CheckResult;

// Type metadata accessor for CheckResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11CheckResultOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CheckResult
extern "C" {
extern unsigned $s13BlinkIDVerify11CheckResultO12notPerformedyA2CmFWC;
extern unsigned $s13BlinkIDVerify11CheckResultO4passyA2CmFWC;
extern unsigned $s13BlinkIDVerify11CheckResultO4failyA2CmFWC;
extern unsigned $s13BlinkIDVerify11CheckResultO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO") CheckResult final {
public:
  SWIFT_INLINE_THUNK ~CheckResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckResult(const CheckResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckResult &operator =(const CheckResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CheckResult &operator =(CheckResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CheckResult(CheckResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notPerformed SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO12notPerformedyA2CmF"),
    pass SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO4passyA2CmF"),
    fail SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO4failyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notPerformed {  // impl struct for case notPerformed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notPerformed;
    }
    SWIFT_INLINE_THUNK CheckResult operator()() const;
  } notPerformed SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO12notPerformedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotPerformed() const;

  inline const static struct _impl_pass {  // impl struct for case pass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pass;
    }
    SWIFT_INLINE_THUNK CheckResult operator()() const;
  } pass SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO4passyA2CmF");
  SWIFT_INLINE_THUNK bool isPass() const;

  inline const static struct _impl_fail {  // impl struct for case fail
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fail;
    }
    SWIFT_INLINE_THUNK CheckResult operator()() const;
  } fail SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO4failyA2CmF");
  SWIFT_INLINE_THUNK bool isFail() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK CheckResult operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify11CheckResultO12notPerformedyA2CmFWC) return cases::notPerformed;
    if (tag == _impl::$s13BlinkIDVerify11CheckResultO4passyA2CmFWC) return cases::pass;
    if (tag == _impl::$s13BlinkIDVerify11CheckResultO4failyA2CmFWC) return cases::fail;
    if (tag == _impl::$s13BlinkIDVerify11CheckResultO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<CheckResult> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify11CheckResultO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK CheckResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CheckResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CheckResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CheckResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11CheckResultOD;
  static inline constexpr $s13BlinkIDVerify11CheckResultOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CheckResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CheckResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CheckResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CheckResult returnNewValue(T callable) {
    auto result = CheckResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11CheckResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CheckResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11CheckResultOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CheckResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CheckResult> = true;
template<>
struct implClassFor<BlinkIDVerify::CheckResult> { using type = BlinkIDVerify::_impl::_impl_CheckResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO") CheckType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CheckType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CheckType;

// Type metadata accessor for CheckType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify9CheckTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CheckType
extern "C" {
extern unsigned $s13BlinkIDVerify9CheckTypeO5checkyA2CmFWC;
extern unsigned $s13BlinkIDVerify9CheckTypeO08detailedC0yA2CmFWC;
extern unsigned $s13BlinkIDVerify9CheckTypeO05fieldC0yA2CmFWC;
extern unsigned $s13BlinkIDVerify9CheckTypeO06tieredC0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO") CheckType final {
public:
  SWIFT_INLINE_THUNK ~CheckType() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckType(const CheckType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckType &operator =(const CheckType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CheckType &operator =(CheckType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CheckType(CheckType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    check SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO5checkyA2CmF"),
    detailedCheck SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO08detailedC0yA2CmF"),
    fieldCheck SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO05fieldC0yA2CmF"),
    tieredCheck SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO06tieredC0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_check {  // impl struct for case check
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::check;
    }
    SWIFT_INLINE_THUNK CheckType operator()() const;
  } check SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO5checkyA2CmF");
  SWIFT_INLINE_THUNK bool isCheck() const;

  inline const static struct _impl_detailedCheck {  // impl struct for case detailedCheck
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detailedCheck;
    }
    SWIFT_INLINE_THUNK CheckType operator()() const;
  } detailedCheck SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO08detailedC0yA2CmF");
  SWIFT_INLINE_THUNK bool isDetailedCheck() const;

  inline const static struct _impl_fieldCheck {  // impl struct for case fieldCheck
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fieldCheck;
    }
    SWIFT_INLINE_THUNK CheckType operator()() const;
  } fieldCheck SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO05fieldC0yA2CmF");
  SWIFT_INLINE_THUNK bool isFieldCheck() const;

  inline const static struct _impl_tieredCheck {  // impl struct for case tieredCheck
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tieredCheck;
    }
    SWIFT_INLINE_THUNK CheckType operator()() const;
  } tieredCheck SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO06tieredC0yA2CmF");
  SWIFT_INLINE_THUNK bool isTieredCheck() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify9CheckTypeO5checkyA2CmFWC) return cases::check;
    if (tag == _impl::$s13BlinkIDVerify9CheckTypeO08detailedC0yA2CmFWC) return cases::detailedCheck;
    if (tag == _impl::$s13BlinkIDVerify9CheckTypeO05fieldC0yA2CmFWC) return cases::fieldCheck;
    if (tag == _impl::$s13BlinkIDVerify9CheckTypeO06tieredC0yA2CmFWC) return cases::tieredCheck;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<CheckType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify9CheckTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK CheckType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CheckType _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CheckType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CheckType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify9CheckTypeOD;
  static inline constexpr $s13BlinkIDVerify9CheckTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CheckType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CheckType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CheckType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CheckType returnNewValue(T callable) {
    auto result = CheckType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify9CheckTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CheckType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify9CheckTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CheckType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CheckType> = true;
template<>
struct implClassFor<BlinkIDVerify::CheckType> { using type = BlinkIDVerify::_impl::_impl_CheckType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV") VerifyCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VerifyCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV") FieldCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::FieldCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO") CheckValue;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::CheckValue> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_CheckValue;

// Type metadata accessor for CheckValue
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10CheckValueOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CheckValue
extern "C" {
extern unsigned $s13BlinkIDVerify10CheckValueO5checkyAcA06VerifyC0VcACmFWC;
extern unsigned $s13BlinkIDVerify10CheckValueO08detailedC0yAcA08DetailedC0VcACmFWC;
extern unsigned $s13BlinkIDVerify10CheckValueO05fieldC0yAcA05FieldC0VcACmFWC;
extern unsigned $s13BlinkIDVerify10CheckValueO06tieredC0yAcA06TieredC0VcACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO") CheckValue final {
public:
  SWIFT_INLINE_THUNK ~CheckValue() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckValue(const CheckValue &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CheckValue &operator =(const CheckValue &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CheckValue &operator =(CheckValue &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CheckValue(CheckValue &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    check SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO5checkyAcA06VerifyC0VcACmF"),
    detailedCheck SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO08detailedC0yAcA08DetailedC0VcACmF"),
    fieldCheck SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO05fieldC0yAcA05FieldC0VcACmF"),
    tieredCheck SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO06tieredC0yAcA06TieredC0VcACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_check {  // impl struct for case check
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::check;
    }
    SWIFT_INLINE_THUNK CheckValue operator()(const VerifyCheck& val) const;
  } check SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO5checkyAcA06VerifyC0VcACmF");
  SWIFT_INLINE_THUNK bool isCheck() const;
  SWIFT_INLINE_THUNK VerifyCheck getCheck() const;

  inline const static struct _impl_detailedCheck {  // impl struct for case detailedCheck
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detailedCheck;
    }
    SWIFT_INLINE_THUNK CheckValue operator()(const DetailedCheck& val) const;
  } detailedCheck SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO08detailedC0yAcA08DetailedC0VcACmF");
  SWIFT_INLINE_THUNK bool isDetailedCheck() const;
  SWIFT_INLINE_THUNK DetailedCheck getDetailedCheck() const;

  inline const static struct _impl_fieldCheck {  // impl struct for case fieldCheck
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fieldCheck;
    }
    SWIFT_INLINE_THUNK CheckValue operator()(const FieldCheck& val) const;
  } fieldCheck SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO05fieldC0yAcA05FieldC0VcACmF");
  SWIFT_INLINE_THUNK bool isFieldCheck() const;
  SWIFT_INLINE_THUNK FieldCheck getFieldCheck() const;

  inline const static struct _impl_tieredCheck {  // impl struct for case tieredCheck
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tieredCheck;
    }
    SWIFT_INLINE_THUNK CheckValue operator()(const TieredCheck& val) const;
  } tieredCheck SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO06tieredC0yAcA06TieredC0VcACmF");
  SWIFT_INLINE_THUNK bool isTieredCheck() const;
  SWIFT_INLINE_THUNK TieredCheck getTieredCheck() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify10CheckValueO5checkyAcA06VerifyC0VcACmFWC) return cases::check;
    if (tag == _impl::$s13BlinkIDVerify10CheckValueO08detailedC0yAcA08DetailedC0VcACmFWC) return cases::detailedCheck;
    if (tag == _impl::$s13BlinkIDVerify10CheckValueO05fieldC0yAcA05FieldC0VcACmFWC) return cases::fieldCheck;
    if (tag == _impl::$s13BlinkIDVerify10CheckValueO06tieredC0yAcA06TieredC0VcACmFWC) return cases::tieredCheck;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10CheckValueO11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK CheckValue(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CheckValue _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CheckValue(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CheckValue;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10CheckValueOD;
  static inline constexpr $s13BlinkIDVerify10CheckValueOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CheckValue {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CheckValue &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CheckValue &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CheckValue returnNewValue(T callable) {
    auto result = CheckValue::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10CheckValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::CheckValue> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10CheckValueOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::CheckValue> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::CheckValue> = true;
template<>
struct implClassFor<BlinkIDVerify::CheckValue> { using type = BlinkIDVerify::_impl::_impl_CheckValue; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO") Country;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Country> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO") Region;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Region> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO") DocumentType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DocumentType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV") ClassInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ClassInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_ClassInfo;

// Type metadata accessor for ClassInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify9ClassInfoVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV") ClassInfo final {
public:
  SWIFT_INLINE_THUNK ~ClassInfo() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9ClassInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ClassInfo(const ClassInfo &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9ClassInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ClassInfo &operator =(const ClassInfo &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9ClassInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ClassInfo &operator =(ClassInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ClassInfo(ClassInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK Country getCountry() const SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV7countryAA7CountryOvp");
  SWIFT_INLINE_THUNK Region getRegion() const SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV6regionAA6RegionOvp");
  SWIFT_INLINE_THUNK DocumentType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV4typeAA12DocumentTypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getIsoAlpha3CountryCode() const SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV20isoAlpha3CountryCodeSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getIsoAlpha2CountryCode() const SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV20isoAlpha2CountryCodeSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getIsoNumericCountryCode() const SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV21isoNumericCountryCodeSSSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify9ClassInfoV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ClassInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ClassInfo _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9ClassInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ClassInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ClassInfo;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify9ClassInfoVD;
  static inline constexpr $s13BlinkIDVerify9ClassInfoVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ClassInfo {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ClassInfo &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ClassInfo &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ClassInfo returnNewValue(T callable) {
    auto result = ClassInfo::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify9ClassInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ClassInfo> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify9ClassInfoVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ClassInfo> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ClassInfo> = true;
template<>
struct implClassFor<BlinkIDVerify::ClassInfo> { using type = BlinkIDVerify::_impl::_impl_ClassInfo; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

/// Document country.
namespace _impl {

class _impl_Country;

// Type metadata accessor for Country
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify7CountryOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Country
extern "C" {
extern unsigned $s13BlinkIDVerify7CountryO4noneyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7albaniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7algeriayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9argentinayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9australiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7austriayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10azerbaijanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7bahrainyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10bangladeshyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7belgiumyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO20bosniaAndHerzegovinayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6bruneiyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8bulgariayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8cambodiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6canadayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5chileyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8colombiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9costaRicayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7croatiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6cyprusyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7czechiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7denmarkyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO17dominicanRepublicyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5egyptyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7estoniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7finlandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6franceyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7georgiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7germanyyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5ghanayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6greeceyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9guatemalayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8hongKongyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7hungaryyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5indiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9indonesiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7irelandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6israelyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5italyyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6jordanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10kazakhstanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5kenyayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6kosovoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6kuwaityA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6latviayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9lithuaniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8malaysiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8maldivesyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5maltayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9mauritiusyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6mexicoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7moroccoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11netherlandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10newZealandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7nigeriayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8pakistanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6panamayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8paraguayyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11philippinesyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6polandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8portugalyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10puertoRicoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5qataryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7romaniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6russiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11saudiArabiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6serbiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9singaporeyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8slovakiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8sloveniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11southAfricayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5spainyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6swedenyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11switzerlandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6taiwanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8thailandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7tunisiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6turkeyyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO3uaeyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6ugandayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO2ukyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7ukraineyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO3usayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7vietnamyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6brazilyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6norwayyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4omanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7ecuadoryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10elSalvadoryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8sriLankayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4peruyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7uruguayyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7bahamasyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7bermudayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7boliviayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5chinayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO13europeanUnionyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5haitiyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8hondurasyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7icelandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5japanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10luxembourgyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10montenegroyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9nicaraguayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10southKoreayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9venezuelayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11afghanistanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12alandIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO13americanSamoayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7andorrayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6angolayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8anguillayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10antarcticayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO17antiguaAndBarbudayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7armeniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5arubayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO19bailiwickOfGuernseyyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO17bailiwickOfJerseyyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8barbadosyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7belarusyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6belizeyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5beninyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6bhutanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8botswanayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12bouvetIslandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO27britishIndianOceanTerritoryyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11burkinaFasoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7burundiyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8cameroonyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9capeVerdeyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO20caribbeanNetherlandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO13caymanIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO22centralAfricanRepublicyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4chadyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO15christmasIslandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12cocosIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7comorosyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5congoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11cookIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4cubayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7curacaoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO28democraticRepublicOfTheCongoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8djiboutiyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8dominicayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9eastTimoryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO16equatorialGuineayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7eritreayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8ethiopiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO15falklandIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12faroeIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO27federatedStatesOfMicronesiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4fijiyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12frenchGuianayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO15frenchPolynesiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO25frenchSouthernTerritoriesyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5gabonyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6gambiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9gibraltaryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9greenlandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7grenadayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10guadeloupeyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4guamyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6guineayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12guineaBissauyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6guyanayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4iranyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4iraqyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9isleOfManyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10ivoryCoastyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7jamaicayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8kiribatiyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10kyrgyzstanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4laosyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7lebanonyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7lesothoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7liberiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5libyayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO13liechtensteinyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5macauyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10madagascaryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6malawiyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4maliyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO15marshallIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10martiniqueyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10mauritaniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7mayotteyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7moldovayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6monacoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8mongoliayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10montserratyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10mozambiqueyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7myanmaryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7namibiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5nauruyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5nepalyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12newCaledoniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5nigeryA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4niueyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO13norfolkIslandyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO14northernCyprusyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO22northernMarianaIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10northKoreayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO14northMacedoniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5palauyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9palestineyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO14papuaNewGuineayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8pitcairnyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7reunionyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6rwandayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO15saintBarthelemyyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO18saintKittsAndNevisyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10saintLuciayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11saintMartinyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO22saintPierreAndMiquelonyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO28saintVincentAndTheGrenadinesyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5samoayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO9sanMarinoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO18saoTomeAndPrincipeyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7senegalyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10seychellesyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11sierraLeoneyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11sintMaartenyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO14solomonIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7somaliayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10southSudanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5sudanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8surinameyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO19svalbardAndJanMayenyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8eswatiniyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5syriayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10tajikistanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8tanzaniayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO4togoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7tokelauyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5tongayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO17trinidadAndTobagoyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO12turkmenistanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO21turksAndCaicosIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6tuvaluyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10uzbekistanyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO7vanuatuyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO11vaticanCityyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO20virginIslandsBritishyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO15virginIslandsUsyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO15wallisAndFutunayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO13westernSaharayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO5yemenyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO10yugoslaviayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO6zambiayA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO8zimbabweyA2CmFWC;
extern unsigned $s13BlinkIDVerify7CountryO13schengen_areayA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO") Country final {
public:
  SWIFT_INLINE_THUNK ~Country() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Country(const Country &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Country &operator =(const Country &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Country &operator =(Country &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Country(Country &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4noneyA2CmF"),
    albania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7albaniayA2CmF"),
    algeria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7algeriayA2CmF"),
    argentina SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9argentinayA2CmF"),
    australia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9australiayA2CmF"),
    austria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7austriayA2CmF"),
    azerbaijan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10azerbaijanyA2CmF"),
    bahrain SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7bahrainyA2CmF"),
    bangladesh SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10bangladeshyA2CmF"),
    belgium SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7belgiumyA2CmF"),
    bosniaAndHerzegovina SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO20bosniaAndHerzegovinayA2CmF"),
    brunei SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6bruneiyA2CmF"),
    bulgaria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8bulgariayA2CmF"),
    cambodia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8cambodiayA2CmF"),
    canada SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6canadayA2CmF"),
    chile SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5chileyA2CmF"),
    colombia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8colombiayA2CmF"),
    costaRica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9costaRicayA2CmF"),
    croatia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7croatiayA2CmF"),
    cyprus SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6cyprusyA2CmF"),
    czechia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7czechiayA2CmF"),
    denmark SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7denmarkyA2CmF"),
    dominicanRepublic SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17dominicanRepublicyA2CmF"),
    egypt SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5egyptyA2CmF"),
    estonia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7estoniayA2CmF"),
    finland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7finlandyA2CmF"),
    france SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6franceyA2CmF"),
    georgia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7georgiayA2CmF"),
    germany SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7germanyyA2CmF"),
    ghana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5ghanayA2CmF"),
    greece SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6greeceyA2CmF"),
    guatemala SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9guatemalayA2CmF"),
    hongKong SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8hongKongyA2CmF"),
    hungary SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7hungaryyA2CmF"),
    india SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5indiayA2CmF"),
    indonesia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9indonesiayA2CmF"),
    ireland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7irelandyA2CmF"),
    israel SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6israelyA2CmF"),
    italy SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5italyyA2CmF"),
    jordan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6jordanyA2CmF"),
    kazakhstan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10kazakhstanyA2CmF"),
    kenya SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5kenyayA2CmF"),
    kosovo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6kosovoyA2CmF"),
    kuwait SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6kuwaityA2CmF"),
    latvia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6latviayA2CmF"),
    lithuania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9lithuaniayA2CmF"),
    malaysia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8malaysiayA2CmF"),
    maldives SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8maldivesyA2CmF"),
    malta SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5maltayA2CmF"),
    mauritius SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9mauritiusyA2CmF"),
    mexico SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6mexicoyA2CmF"),
    morocco SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7moroccoyA2CmF"),
    netherlands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11netherlandsyA2CmF"),
    newZealand SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10newZealandyA2CmF"),
    nigeria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7nigeriayA2CmF"),
    pakistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8pakistanyA2CmF"),
    panama SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6panamayA2CmF"),
    paraguay SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8paraguayyA2CmF"),
    philippines SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11philippinesyA2CmF"),
    poland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6polandyA2CmF"),
    portugal SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8portugalyA2CmF"),
    puertoRico SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10puertoRicoyA2CmF"),
    qatar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5qataryA2CmF"),
    romania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7romaniayA2CmF"),
    russia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6russiayA2CmF"),
    saudiArabia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11saudiArabiayA2CmF"),
    serbia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6serbiayA2CmF"),
    singapore SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9singaporeyA2CmF"),
    slovakia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8slovakiayA2CmF"),
    slovenia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8sloveniayA2CmF"),
    southAfrica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11southAfricayA2CmF"),
    spain SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5spainyA2CmF"),
    sweden SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6swedenyA2CmF"),
    switzerland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11switzerlandyA2CmF"),
    taiwan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6taiwanyA2CmF"),
    thailand SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8thailandyA2CmF"),
    tunisia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7tunisiayA2CmF"),
    turkey SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6turkeyyA2CmF"),
    uae SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO3uaeyA2CmF"),
    uganda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6ugandayA2CmF"),
    uk SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO2ukyA2CmF"),
    ukraine SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7ukraineyA2CmF"),
    usa SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO3usayA2CmF"),
    vietnam SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7vietnamyA2CmF"),
    brazil SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6brazilyA2CmF"),
    norway SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6norwayyA2CmF"),
    oman SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4omanyA2CmF"),
    ecuador SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7ecuadoryA2CmF"),
    elSalvador SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10elSalvadoryA2CmF"),
    sriLanka SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8sriLankayA2CmF"),
    peru SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4peruyA2CmF"),
    uruguay SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7uruguayyA2CmF"),
    bahamas SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7bahamasyA2CmF"),
    bermuda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7bermudayA2CmF"),
    bolivia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7boliviayA2CmF"),
    china SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5chinayA2CmF"),
    europeanUnion SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13europeanUnionyA2CmF"),
    haiti SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5haitiyA2CmF"),
    honduras SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8hondurasyA2CmF"),
    iceland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7icelandyA2CmF"),
    japan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5japanyA2CmF"),
    luxembourg SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10luxembourgyA2CmF"),
    montenegro SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10montenegroyA2CmF"),
    nicaragua SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9nicaraguayA2CmF"),
    southKorea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10southKoreayA2CmF"),
    venezuela SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9venezuelayA2CmF"),
    afghanistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11afghanistanyA2CmF"),
    alandIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12alandIslandsyA2CmF"),
    americanSamoa SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13americanSamoayA2CmF"),
    andorra SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7andorrayA2CmF"),
    angola SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6angolayA2CmF"),
    anguilla SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8anguillayA2CmF"),
    antarctica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10antarcticayA2CmF"),
    antiguaAndBarbuda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17antiguaAndBarbudayA2CmF"),
    armenia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7armeniayA2CmF"),
    aruba SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5arubayA2CmF"),
    bailiwickOfGuernsey SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO19bailiwickOfGuernseyyA2CmF"),
    bailiwickOfJersey SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17bailiwickOfJerseyyA2CmF"),
    barbados SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8barbadosyA2CmF"),
    belarus SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7belarusyA2CmF"),
    belize SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6belizeyA2CmF"),
    benin SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5beninyA2CmF"),
    bhutan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6bhutanyA2CmF"),
    bonaireSaintEustatiusAndSaba SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO28bonaireSaintEustatiusAndSabayA2CmF"),
    botswana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8botswanayA2CmF"),
    bouvetIsland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12bouvetIslandyA2CmF"),
    britishIndianOceanTerritory SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO27britishIndianOceanTerritoryyA2CmF"),
    burkinaFaso SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11burkinaFasoyA2CmF"),
    burundi SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7burundiyA2CmF"),
    cameroon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8cameroonyA2CmF"),
    capeVerde SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9capeVerdeyA2CmF"),
    caribbeanNetherlands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO20caribbeanNetherlandsyA2CmF"),
    caymanIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13caymanIslandsyA2CmF"),
    centralAfricanRepublic SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO22centralAfricanRepublicyA2CmF"),
    chad SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4chadyA2CmF"),
    christmasIsland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15christmasIslandyA2CmF"),
    cocosIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12cocosIslandsyA2CmF"),
    comoros SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7comorosyA2CmF"),
    congo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5congoyA2CmF"),
    cookIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11cookIslandsyA2CmF"),
    cuba SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4cubayA2CmF"),
    curacao SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7curacaoyA2CmF"),
    democraticRepublicOfTheCongo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO28democraticRepublicOfTheCongoyA2CmF"),
    djibouti SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8djiboutiyA2CmF"),
    dominica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8dominicayA2CmF"),
    eastTimor SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9eastTimoryA2CmF"),
    equatorialGuinea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO16equatorialGuineayA2CmF"),
    eritrea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7eritreayA2CmF"),
    ethiopia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8ethiopiayA2CmF"),
    falklandIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15falklandIslandsyA2CmF"),
    faroeIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12faroeIslandsyA2CmF"),
    federatedStatesOfMicronesia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO27federatedStatesOfMicronesiayA2CmF"),
    fiji SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4fijiyA2CmF"),
    frenchGuiana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12frenchGuianayA2CmF"),
    frenchPolynesia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15frenchPolynesiayA2CmF"),
    frenchSouthernTerritories SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO25frenchSouthernTerritoriesyA2CmF"),
    gabon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5gabonyA2CmF"),
    gambia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6gambiayA2CmF"),
    gibraltar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9gibraltaryA2CmF"),
    greenland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9greenlandyA2CmF"),
    grenada SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7grenadayA2CmF"),
    guadeloupe SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10guadeloupeyA2CmF"),
    guam SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4guamyA2CmF"),
    guinea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6guineayA2CmF"),
    guineaBissau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12guineaBissauyA2CmF"),
    guyana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6guyanayA2CmF"),
    heardIslandAndMcdonaldIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO29heardIslandAndMcdonaldIslandsyA2CmF"),
    iran SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4iranyA2CmF"),
    iraq SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4iraqyA2CmF"),
    isleOfMan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9isleOfManyA2CmF"),
    ivoryCoast SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10ivoryCoastyA2CmF"),
    jamaica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7jamaicayA2CmF"),
    kiribati SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8kiribatiyA2CmF"),
    kyrgyzstan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10kyrgyzstanyA2CmF"),
    laos SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4laosyA2CmF"),
    lebanon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7lebanonyA2CmF"),
    lesotho SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7lesothoyA2CmF"),
    liberia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7liberiayA2CmF"),
    libya SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5libyayA2CmF"),
    liechtenstein SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13liechtensteinyA2CmF"),
    macau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5macauyA2CmF"),
    madagascar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10madagascaryA2CmF"),
    malawi SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6malawiyA2CmF"),
    mali SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4maliyA2CmF"),
    marshallIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15marshallIslandsyA2CmF"),
    martinique SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10martiniqueyA2CmF"),
    mauritania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10mauritaniayA2CmF"),
    mayotte SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7mayotteyA2CmF"),
    moldova SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7moldovayA2CmF"),
    monaco SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6monacoyA2CmF"),
    mongolia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8mongoliayA2CmF"),
    montserrat SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10montserratyA2CmF"),
    mozambique SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10mozambiqueyA2CmF"),
    myanmar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7myanmaryA2CmF"),
    namibia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7namibiayA2CmF"),
    nauru SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5nauruyA2CmF"),
    nepal SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5nepalyA2CmF"),
    newCaledonia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12newCaledoniayA2CmF"),
    niger SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5nigeryA2CmF"),
    niue SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4niueyA2CmF"),
    norfolkIsland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13norfolkIslandyA2CmF"),
    northernCyprus SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14northernCyprusyA2CmF"),
    northernMarianaIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO22northernMarianaIslandsyA2CmF"),
    northKorea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10northKoreayA2CmF"),
    northMacedonia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14northMacedoniayA2CmF"),
    palau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5palauyA2CmF"),
    palestine SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9palestineyA2CmF"),
    papuaNewGuinea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14papuaNewGuineayA2CmF"),
    pitcairn SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8pitcairnyA2CmF"),
    reunion SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7reunionyA2CmF"),
    rwanda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6rwandayA2CmF"),
    saintBarthelemy SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15saintBarthelemyyA2CmF"),
    saintHelenaAscensionAndTristianDaCunha SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmF"),
    saintKittsAndNevis SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO18saintKittsAndNevisyA2CmF"),
    saintLucia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10saintLuciayA2CmF"),
    saintMartin SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11saintMartinyA2CmF"),
    saintPierreAndMiquelon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO22saintPierreAndMiquelonyA2CmF"),
    saintVincentAndTheGrenadines SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO28saintVincentAndTheGrenadinesyA2CmF"),
    samoa SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5samoayA2CmF"),
    sanMarino SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9sanMarinoyA2CmF"),
    saoTomeAndPrincipe SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO18saoTomeAndPrincipeyA2CmF"),
    senegal SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7senegalyA2CmF"),
    seychelles SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10seychellesyA2CmF"),
    sierraLeone SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11sierraLeoneyA2CmF"),
    sintMaarten SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11sintMaartenyA2CmF"),
    solomonIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14solomonIslandsyA2CmF"),
    somalia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7somaliayA2CmF"),
    southGeorgiaAndTheSouthSandwichIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmF"),
    southSudan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10southSudanyA2CmF"),
    sudan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5sudanyA2CmF"),
    suriname SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8surinameyA2CmF"),
    svalbardAndJanMayen SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO19svalbardAndJanMayenyA2CmF"),
    eswatini SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8eswatiniyA2CmF"),
    syria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5syriayA2CmF"),
    tajikistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10tajikistanyA2CmF"),
    tanzania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8tanzaniayA2CmF"),
    togo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4togoyA2CmF"),
    tokelau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7tokelauyA2CmF"),
    tonga SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5tongayA2CmF"),
    trinidadAndTobago SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17trinidadAndTobagoyA2CmF"),
    turkmenistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12turkmenistanyA2CmF"),
    turksAndCaicosIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO21turksAndCaicosIslandsyA2CmF"),
    tuvalu SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6tuvaluyA2CmF"),
    unitedStatesMinorOutlyingIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO32unitedStatesMinorOutlyingIslandsyA2CmF"),
    uzbekistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10uzbekistanyA2CmF"),
    vanuatu SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7vanuatuyA2CmF"),
    vaticanCity SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11vaticanCityyA2CmF"),
    virginIslandsBritish SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO20virginIslandsBritishyA2CmF"),
    virginIslandsUs SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15virginIslandsUsyA2CmF"),
    wallisAndFutuna SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15wallisAndFutunayA2CmF"),
    westernSahara SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13westernSaharayA2CmF"),
    yemen SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5yemenyA2CmF"),
    yugoslavia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10yugoslaviayA2CmF"),
    zambia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6zambiayA2CmF"),
    zimbabwe SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8zimbabweyA2CmF"),
    schengen_area SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13schengen_areayA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } none SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_albania {  // impl struct for case albania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::albania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } albania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7albaniayA2CmF");
  SWIFT_INLINE_THUNK bool isAlbania() const;

  inline const static struct _impl_algeria {  // impl struct for case algeria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::algeria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } algeria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7algeriayA2CmF");
  SWIFT_INLINE_THUNK bool isAlgeria() const;

  inline const static struct _impl_argentina {  // impl struct for case argentina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::argentina;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } argentina SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9argentinayA2CmF");
  SWIFT_INLINE_THUNK bool isArgentina() const;

  inline const static struct _impl_australia {  // impl struct for case australia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::australia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } australia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9australiayA2CmF");
  SWIFT_INLINE_THUNK bool isAustralia() const;

  inline const static struct _impl_austria {  // impl struct for case austria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::austria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } austria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7austriayA2CmF");
  SWIFT_INLINE_THUNK bool isAustria() const;

  inline const static struct _impl_azerbaijan {  // impl struct for case azerbaijan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::azerbaijan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } azerbaijan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10azerbaijanyA2CmF");
  SWIFT_INLINE_THUNK bool isAzerbaijan() const;

  inline const static struct _impl_bahrain {  // impl struct for case bahrain
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bahrain;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bahrain SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7bahrainyA2CmF");
  SWIFT_INLINE_THUNK bool isBahrain() const;

  inline const static struct _impl_bangladesh {  // impl struct for case bangladesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bangladesh;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bangladesh SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10bangladeshyA2CmF");
  SWIFT_INLINE_THUNK bool isBangladesh() const;

  inline const static struct _impl_belgium {  // impl struct for case belgium
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belgium;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belgium SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7belgiumyA2CmF");
  SWIFT_INLINE_THUNK bool isBelgium() const;

  inline const static struct _impl_bosniaAndHerzegovina {  // impl struct for case bosniaAndHerzegovina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bosniaAndHerzegovina;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bosniaAndHerzegovina SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO20bosniaAndHerzegovinayA2CmF");
  SWIFT_INLINE_THUNK bool isBosniaAndHerzegovina() const;

  inline const static struct _impl_brunei {  // impl struct for case brunei
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::brunei;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } brunei SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6bruneiyA2CmF");
  SWIFT_INLINE_THUNK bool isBrunei() const;

  inline const static struct _impl_bulgaria {  // impl struct for case bulgaria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bulgaria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bulgaria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8bulgariayA2CmF");
  SWIFT_INLINE_THUNK bool isBulgaria() const;

  inline const static struct _impl_cambodia {  // impl struct for case cambodia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cambodia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cambodia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8cambodiayA2CmF");
  SWIFT_INLINE_THUNK bool isCambodia() const;

  inline const static struct _impl_canada {  // impl struct for case canada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::canada;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } canada SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6canadayA2CmF");
  SWIFT_INLINE_THUNK bool isCanada() const;

  inline const static struct _impl_chile {  // impl struct for case chile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chile;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } chile SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5chileyA2CmF");
  SWIFT_INLINE_THUNK bool isChile() const;

  inline const static struct _impl_colombia {  // impl struct for case colombia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colombia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } colombia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8colombiayA2CmF");
  SWIFT_INLINE_THUNK bool isColombia() const;

  inline const static struct _impl_costaRica {  // impl struct for case costaRica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::costaRica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } costaRica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9costaRicayA2CmF");
  SWIFT_INLINE_THUNK bool isCostaRica() const;

  inline const static struct _impl_croatia {  // impl struct for case croatia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::croatia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } croatia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7croatiayA2CmF");
  SWIFT_INLINE_THUNK bool isCroatia() const;

  inline const static struct _impl_cyprus {  // impl struct for case cyprus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cyprus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cyprus SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6cyprusyA2CmF");
  SWIFT_INLINE_THUNK bool isCyprus() const;

  inline const static struct _impl_czechia {  // impl struct for case czechia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::czechia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } czechia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7czechiayA2CmF");
  SWIFT_INLINE_THUNK bool isCzechia() const;

  inline const static struct _impl_denmark {  // impl struct for case denmark
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::denmark;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } denmark SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7denmarkyA2CmF");
  SWIFT_INLINE_THUNK bool isDenmark() const;

  inline const static struct _impl_dominicanRepublic {  // impl struct for case dominicanRepublic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dominicanRepublic;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } dominicanRepublic SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17dominicanRepublicyA2CmF");
  SWIFT_INLINE_THUNK bool isDominicanRepublic() const;

  inline const static struct _impl_egypt {  // impl struct for case egypt
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::egypt;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } egypt SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5egyptyA2CmF");
  SWIFT_INLINE_THUNK bool isEgypt() const;

  inline const static struct _impl_estonia {  // impl struct for case estonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::estonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } estonia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7estoniayA2CmF");
  SWIFT_INLINE_THUNK bool isEstonia() const;

  inline const static struct _impl_finland {  // impl struct for case finland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::finland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } finland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7finlandyA2CmF");
  SWIFT_INLINE_THUNK bool isFinland() const;

  inline const static struct _impl_france {  // impl struct for case france
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::france;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } france SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6franceyA2CmF");
  SWIFT_INLINE_THUNK bool isFrance() const;

  inline const static struct _impl_georgia {  // impl struct for case georgia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::georgia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } georgia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7georgiayA2CmF");
  SWIFT_INLINE_THUNK bool isGeorgia() const;

  inline const static struct _impl_germany {  // impl struct for case germany
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::germany;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } germany SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7germanyyA2CmF");
  SWIFT_INLINE_THUNK bool isGermany() const;

  inline const static struct _impl_ghana {  // impl struct for case ghana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ghana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ghana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5ghanayA2CmF");
  SWIFT_INLINE_THUNK bool isGhana() const;

  inline const static struct _impl_greece {  // impl struct for case greece
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greece;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } greece SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6greeceyA2CmF");
  SWIFT_INLINE_THUNK bool isGreece() const;

  inline const static struct _impl_guatemala {  // impl struct for case guatemala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guatemala;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guatemala SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9guatemalayA2CmF");
  SWIFT_INLINE_THUNK bool isGuatemala() const;

  inline const static struct _impl_hongKong {  // impl struct for case hongKong
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hongKong;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } hongKong SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8hongKongyA2CmF");
  SWIFT_INLINE_THUNK bool isHongKong() const;

  inline const static struct _impl_hungary {  // impl struct for case hungary
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hungary;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } hungary SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7hungaryyA2CmF");
  SWIFT_INLINE_THUNK bool isHungary() const;

  inline const static struct _impl_india {  // impl struct for case india
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::india;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } india SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5indiayA2CmF");
  SWIFT_INLINE_THUNK bool isIndia() const;

  inline const static struct _impl_indonesia {  // impl struct for case indonesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::indonesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } indonesia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9indonesiayA2CmF");
  SWIFT_INLINE_THUNK bool isIndonesia() const;

  inline const static struct _impl_ireland {  // impl struct for case ireland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ireland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ireland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7irelandyA2CmF");
  SWIFT_INLINE_THUNK bool isIreland() const;

  inline const static struct _impl_israel {  // impl struct for case israel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::israel;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } israel SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6israelyA2CmF");
  SWIFT_INLINE_THUNK bool isIsrael() const;

  inline const static struct _impl_italy {  // impl struct for case italy
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::italy;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } italy SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5italyyA2CmF");
  SWIFT_INLINE_THUNK bool isItaly() const;

  inline const static struct _impl_jordan {  // impl struct for case jordan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jordan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } jordan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6jordanyA2CmF");
  SWIFT_INLINE_THUNK bool isJordan() const;

  inline const static struct _impl_kazakhstan {  // impl struct for case kazakhstan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kazakhstan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kazakhstan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10kazakhstanyA2CmF");
  SWIFT_INLINE_THUNK bool isKazakhstan() const;

  inline const static struct _impl_kenya {  // impl struct for case kenya
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kenya;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kenya SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5kenyayA2CmF");
  SWIFT_INLINE_THUNK bool isKenya() const;

  inline const static struct _impl_kosovo {  // impl struct for case kosovo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kosovo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kosovo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6kosovoyA2CmF");
  SWIFT_INLINE_THUNK bool isKosovo() const;

  inline const static struct _impl_kuwait {  // impl struct for case kuwait
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kuwait;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kuwait SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6kuwaityA2CmF");
  SWIFT_INLINE_THUNK bool isKuwait() const;

  inline const static struct _impl_latvia {  // impl struct for case latvia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::latvia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } latvia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6latviayA2CmF");
  SWIFT_INLINE_THUNK bool isLatvia() const;

  inline const static struct _impl_lithuania {  // impl struct for case lithuania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lithuania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lithuania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9lithuaniayA2CmF");
  SWIFT_INLINE_THUNK bool isLithuania() const;

  inline const static struct _impl_malaysia {  // impl struct for case malaysia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malaysia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malaysia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8malaysiayA2CmF");
  SWIFT_INLINE_THUNK bool isMalaysia() const;

  inline const static struct _impl_maldives {  // impl struct for case maldives
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maldives;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } maldives SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8maldivesyA2CmF");
  SWIFT_INLINE_THUNK bool isMaldives() const;

  inline const static struct _impl_malta {  // impl struct for case malta
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malta;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malta SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5maltayA2CmF");
  SWIFT_INLINE_THUNK bool isMalta() const;

  inline const static struct _impl_mauritius {  // impl struct for case mauritius
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mauritius;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mauritius SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9mauritiusyA2CmF");
  SWIFT_INLINE_THUNK bool isMauritius() const;

  inline const static struct _impl_mexico {  // impl struct for case mexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mexico;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mexico SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6mexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isMexico() const;

  inline const static struct _impl_morocco {  // impl struct for case morocco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::morocco;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } morocco SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7moroccoyA2CmF");
  SWIFT_INLINE_THUNK bool isMorocco() const;

  inline const static struct _impl_netherlands {  // impl struct for case netherlands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::netherlands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } netherlands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11netherlandsyA2CmF");
  SWIFT_INLINE_THUNK bool isNetherlands() const;

  inline const static struct _impl_newZealand {  // impl struct for case newZealand
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newZealand;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } newZealand SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10newZealandyA2CmF");
  SWIFT_INLINE_THUNK bool isNewZealand() const;

  inline const static struct _impl_nigeria {  // impl struct for case nigeria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nigeria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nigeria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7nigeriayA2CmF");
  SWIFT_INLINE_THUNK bool isNigeria() const;

  inline const static struct _impl_pakistan {  // impl struct for case pakistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pakistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } pakistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8pakistanyA2CmF");
  SWIFT_INLINE_THUNK bool isPakistan() const;

  inline const static struct _impl_panama {  // impl struct for case panama
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::panama;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } panama SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6panamayA2CmF");
  SWIFT_INLINE_THUNK bool isPanama() const;

  inline const static struct _impl_paraguay {  // impl struct for case paraguay
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::paraguay;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } paraguay SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8paraguayyA2CmF");
  SWIFT_INLINE_THUNK bool isParaguay() const;

  inline const static struct _impl_philippines {  // impl struct for case philippines
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::philippines;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } philippines SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11philippinesyA2CmF");
  SWIFT_INLINE_THUNK bool isPhilippines() const;

  inline const static struct _impl_poland {  // impl struct for case poland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::poland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } poland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6polandyA2CmF");
  SWIFT_INLINE_THUNK bool isPoland() const;

  inline const static struct _impl_portugal {  // impl struct for case portugal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portugal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } portugal SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8portugalyA2CmF");
  SWIFT_INLINE_THUNK bool isPortugal() const;

  inline const static struct _impl_puertoRico {  // impl struct for case puertoRico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::puertoRico;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } puertoRico SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10puertoRicoyA2CmF");
  SWIFT_INLINE_THUNK bool isPuertoRico() const;

  inline const static struct _impl_qatar {  // impl struct for case qatar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::qatar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } qatar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5qataryA2CmF");
  SWIFT_INLINE_THUNK bool isQatar() const;

  inline const static struct _impl_romania {  // impl struct for case romania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::romania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } romania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7romaniayA2CmF");
  SWIFT_INLINE_THUNK bool isRomania() const;

  inline const static struct _impl_russia {  // impl struct for case russia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::russia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } russia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6russiayA2CmF");
  SWIFT_INLINE_THUNK bool isRussia() const;

  inline const static struct _impl_saudiArabia {  // impl struct for case saudiArabia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saudiArabia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saudiArabia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11saudiArabiayA2CmF");
  SWIFT_INLINE_THUNK bool isSaudiArabia() const;

  inline const static struct _impl_serbia {  // impl struct for case serbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serbia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } serbia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6serbiayA2CmF");
  SWIFT_INLINE_THUNK bool isSerbia() const;

  inline const static struct _impl_singapore {  // impl struct for case singapore
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::singapore;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } singapore SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9singaporeyA2CmF");
  SWIFT_INLINE_THUNK bool isSingapore() const;

  inline const static struct _impl_slovakia {  // impl struct for case slovakia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::slovakia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } slovakia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8slovakiayA2CmF");
  SWIFT_INLINE_THUNK bool isSlovakia() const;

  inline const static struct _impl_slovenia {  // impl struct for case slovenia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::slovenia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } slovenia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8sloveniayA2CmF");
  SWIFT_INLINE_THUNK bool isSlovenia() const;

  inline const static struct _impl_southAfrica {  // impl struct for case southAfrica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southAfrica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southAfrica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11southAfricayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthAfrica() const;

  inline const static struct _impl_spain {  // impl struct for case spain
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::spain;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } spain SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5spainyA2CmF");
  SWIFT_INLINE_THUNK bool isSpain() const;

  inline const static struct _impl_sweden {  // impl struct for case sweden
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sweden;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sweden SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6swedenyA2CmF");
  SWIFT_INLINE_THUNK bool isSweden() const;

  inline const static struct _impl_switzerland {  // impl struct for case switzerland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::switzerland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } switzerland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11switzerlandyA2CmF");
  SWIFT_INLINE_THUNK bool isSwitzerland() const;

  inline const static struct _impl_taiwan {  // impl struct for case taiwan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::taiwan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } taiwan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6taiwanyA2CmF");
  SWIFT_INLINE_THUNK bool isTaiwan() const;

  inline const static struct _impl_thailand {  // impl struct for case thailand
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::thailand;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } thailand SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8thailandyA2CmF");
  SWIFT_INLINE_THUNK bool isThailand() const;

  inline const static struct _impl_tunisia {  // impl struct for case tunisia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tunisia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tunisia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7tunisiayA2CmF");
  SWIFT_INLINE_THUNK bool isTunisia() const;

  inline const static struct _impl_turkey {  // impl struct for case turkey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turkey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turkey SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6turkeyyA2CmF");
  SWIFT_INLINE_THUNK bool isTurkey() const;

  inline const static struct _impl_uae {  // impl struct for case uae
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uae;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uae SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO3uaeyA2CmF");
  SWIFT_INLINE_THUNK bool isUae() const;

  inline const static struct _impl_uganda {  // impl struct for case uganda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uganda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uganda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6ugandayA2CmF");
  SWIFT_INLINE_THUNK bool isUganda() const;

  inline const static struct _impl_uk {  // impl struct for case uk
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uk;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uk SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO2ukyA2CmF");
  SWIFT_INLINE_THUNK bool isUk() const;

  inline const static struct _impl_ukraine {  // impl struct for case ukraine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ukraine;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ukraine SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7ukraineyA2CmF");
  SWIFT_INLINE_THUNK bool isUkraine() const;

  inline const static struct _impl_usa {  // impl struct for case usa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::usa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } usa SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO3usayA2CmF");
  SWIFT_INLINE_THUNK bool isUsa() const;

  inline const static struct _impl_vietnam {  // impl struct for case vietnam
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vietnam;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vietnam SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7vietnamyA2CmF");
  SWIFT_INLINE_THUNK bool isVietnam() const;

  inline const static struct _impl_brazil {  // impl struct for case brazil
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::brazil;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } brazil SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6brazilyA2CmF");
  SWIFT_INLINE_THUNK bool isBrazil() const;

  inline const static struct _impl_norway {  // impl struct for case norway
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::norway;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } norway SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6norwayyA2CmF");
  SWIFT_INLINE_THUNK bool isNorway() const;

  inline const static struct _impl_oman {  // impl struct for case oman
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oman;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } oman SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4omanyA2CmF");
  SWIFT_INLINE_THUNK bool isOman() const;

  inline const static struct _impl_ecuador {  // impl struct for case ecuador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ecuador;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ecuador SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7ecuadoryA2CmF");
  SWIFT_INLINE_THUNK bool isEcuador() const;

  inline const static struct _impl_elSalvador {  // impl struct for case elSalvador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::elSalvador;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } elSalvador SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10elSalvadoryA2CmF");
  SWIFT_INLINE_THUNK bool isElSalvador() const;

  inline const static struct _impl_sriLanka {  // impl struct for case sriLanka
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sriLanka;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sriLanka SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8sriLankayA2CmF");
  SWIFT_INLINE_THUNK bool isSriLanka() const;

  inline const static struct _impl_peru {  // impl struct for case peru
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::peru;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } peru SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4peruyA2CmF");
  SWIFT_INLINE_THUNK bool isPeru() const;

  inline const static struct _impl_uruguay {  // impl struct for case uruguay
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uruguay;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uruguay SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7uruguayyA2CmF");
  SWIFT_INLINE_THUNK bool isUruguay() const;

  inline const static struct _impl_bahamas {  // impl struct for case bahamas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bahamas;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bahamas SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7bahamasyA2CmF");
  SWIFT_INLINE_THUNK bool isBahamas() const;

  inline const static struct _impl_bermuda {  // impl struct for case bermuda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bermuda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bermuda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7bermudayA2CmF");
  SWIFT_INLINE_THUNK bool isBermuda() const;

  inline const static struct _impl_bolivia {  // impl struct for case bolivia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bolivia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bolivia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7boliviayA2CmF");
  SWIFT_INLINE_THUNK bool isBolivia() const;

  inline const static struct _impl_china {  // impl struct for case china
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::china;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } china SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5chinayA2CmF");
  SWIFT_INLINE_THUNK bool isChina() const;

  inline const static struct _impl_europeanUnion {  // impl struct for case europeanUnion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::europeanUnion;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } europeanUnion SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13europeanUnionyA2CmF");
  SWIFT_INLINE_THUNK bool isEuropeanUnion() const;

  inline const static struct _impl_haiti {  // impl struct for case haiti
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::haiti;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } haiti SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5haitiyA2CmF");
  SWIFT_INLINE_THUNK bool isHaiti() const;

  inline const static struct _impl_honduras {  // impl struct for case honduras
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::honduras;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } honduras SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8hondurasyA2CmF");
  SWIFT_INLINE_THUNK bool isHonduras() const;

  inline const static struct _impl_iceland {  // impl struct for case iceland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iceland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iceland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7icelandyA2CmF");
  SWIFT_INLINE_THUNK bool isIceland() const;

  inline const static struct _impl_japan {  // impl struct for case japan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::japan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } japan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5japanyA2CmF");
  SWIFT_INLINE_THUNK bool isJapan() const;

  inline const static struct _impl_luxembourg {  // impl struct for case luxembourg
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::luxembourg;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } luxembourg SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10luxembourgyA2CmF");
  SWIFT_INLINE_THUNK bool isLuxembourg() const;

  inline const static struct _impl_montenegro {  // impl struct for case montenegro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montenegro;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } montenegro SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10montenegroyA2CmF");
  SWIFT_INLINE_THUNK bool isMontenegro() const;

  inline const static struct _impl_nicaragua {  // impl struct for case nicaragua
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nicaragua;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nicaragua SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9nicaraguayA2CmF");
  SWIFT_INLINE_THUNK bool isNicaragua() const;

  inline const static struct _impl_southKorea {  // impl struct for case southKorea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southKorea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southKorea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10southKoreayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthKorea() const;

  inline const static struct _impl_venezuela {  // impl struct for case venezuela
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::venezuela;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } venezuela SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9venezuelayA2CmF");
  SWIFT_INLINE_THUNK bool isVenezuela() const;

  inline const static struct _impl_afghanistan {  // impl struct for case afghanistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::afghanistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } afghanistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11afghanistanyA2CmF");
  SWIFT_INLINE_THUNK bool isAfghanistan() const;

  inline const static struct _impl_alandIslands {  // impl struct for case alandIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alandIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } alandIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12alandIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isAlandIslands() const;

  inline const static struct _impl_americanSamoa {  // impl struct for case americanSamoa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::americanSamoa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } americanSamoa SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13americanSamoayA2CmF");
  SWIFT_INLINE_THUNK bool isAmericanSamoa() const;

  inline const static struct _impl_andorra {  // impl struct for case andorra
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::andorra;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } andorra SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7andorrayA2CmF");
  SWIFT_INLINE_THUNK bool isAndorra() const;

  inline const static struct _impl_angola {  // impl struct for case angola
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::angola;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } angola SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6angolayA2CmF");
  SWIFT_INLINE_THUNK bool isAngola() const;

  inline const static struct _impl_anguilla {  // impl struct for case anguilla
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::anguilla;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } anguilla SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8anguillayA2CmF");
  SWIFT_INLINE_THUNK bool isAnguilla() const;

  inline const static struct _impl_antarctica {  // impl struct for case antarctica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::antarctica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } antarctica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10antarcticayA2CmF");
  SWIFT_INLINE_THUNK bool isAntarctica() const;

  inline const static struct _impl_antiguaAndBarbuda {  // impl struct for case antiguaAndBarbuda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::antiguaAndBarbuda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } antiguaAndBarbuda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17antiguaAndBarbudayA2CmF");
  SWIFT_INLINE_THUNK bool isAntiguaAndBarbuda() const;

  inline const static struct _impl_armenia {  // impl struct for case armenia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::armenia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } armenia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7armeniayA2CmF");
  SWIFT_INLINE_THUNK bool isArmenia() const;

  inline const static struct _impl_aruba {  // impl struct for case aruba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aruba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } aruba SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5arubayA2CmF");
  SWIFT_INLINE_THUNK bool isAruba() const;

  inline const static struct _impl_bailiwickOfGuernsey {  // impl struct for case bailiwickOfGuernsey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bailiwickOfGuernsey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bailiwickOfGuernsey SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO19bailiwickOfGuernseyyA2CmF");
  SWIFT_INLINE_THUNK bool isBailiwickOfGuernsey() const;

  inline const static struct _impl_bailiwickOfJersey {  // impl struct for case bailiwickOfJersey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bailiwickOfJersey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bailiwickOfJersey SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17bailiwickOfJerseyyA2CmF");
  SWIFT_INLINE_THUNK bool isBailiwickOfJersey() const;

  inline const static struct _impl_barbados {  // impl struct for case barbados
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barbados;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } barbados SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8barbadosyA2CmF");
  SWIFT_INLINE_THUNK bool isBarbados() const;

  inline const static struct _impl_belarus {  // impl struct for case belarus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belarus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belarus SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7belarusyA2CmF");
  SWIFT_INLINE_THUNK bool isBelarus() const;

  inline const static struct _impl_belize {  // impl struct for case belize
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belize;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belize SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6belizeyA2CmF");
  SWIFT_INLINE_THUNK bool isBelize() const;

  inline const static struct _impl_benin {  // impl struct for case benin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::benin;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } benin SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5beninyA2CmF");
  SWIFT_INLINE_THUNK bool isBenin() const;

  inline const static struct _impl_bhutan {  // impl struct for case bhutan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bhutan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bhutan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6bhutanyA2CmF");
  SWIFT_INLINE_THUNK bool isBhutan() const;

  inline const static struct _impl_bonaireSaintEustatiusAndSaba {  // impl struct for case bonaireSaintEustatiusAndSaba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bonaireSaintEustatiusAndSaba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bonaireSaintEustatiusAndSaba SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO28bonaireSaintEustatiusAndSabayA2CmF");
  SWIFT_INLINE_THUNK bool isBonaireSaintEustatiusAndSaba() const;

  inline const static struct _impl_botswana {  // impl struct for case botswana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::botswana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } botswana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8botswanayA2CmF");
  SWIFT_INLINE_THUNK bool isBotswana() const;

  inline const static struct _impl_bouvetIsland {  // impl struct for case bouvetIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bouvetIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bouvetIsland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12bouvetIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isBouvetIsland() const;

  inline const static struct _impl_britishIndianOceanTerritory {  // impl struct for case britishIndianOceanTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::britishIndianOceanTerritory;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } britishIndianOceanTerritory SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO27britishIndianOceanTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isBritishIndianOceanTerritory() const;

  inline const static struct _impl_burkinaFaso {  // impl struct for case burkinaFaso
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::burkinaFaso;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } burkinaFaso SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11burkinaFasoyA2CmF");
  SWIFT_INLINE_THUNK bool isBurkinaFaso() const;

  inline const static struct _impl_burundi {  // impl struct for case burundi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::burundi;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } burundi SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7burundiyA2CmF");
  SWIFT_INLINE_THUNK bool isBurundi() const;

  inline const static struct _impl_cameroon {  // impl struct for case cameroon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameroon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cameroon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8cameroonyA2CmF");
  SWIFT_INLINE_THUNK bool isCameroon() const;

  inline const static struct _impl_capeVerde {  // impl struct for case capeVerde
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::capeVerde;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } capeVerde SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9capeVerdeyA2CmF");
  SWIFT_INLINE_THUNK bool isCapeVerde() const;

  inline const static struct _impl_caribbeanNetherlands {  // impl struct for case caribbeanNetherlands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caribbeanNetherlands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } caribbeanNetherlands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO20caribbeanNetherlandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCaribbeanNetherlands() const;

  inline const static struct _impl_caymanIslands {  // impl struct for case caymanIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caymanIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } caymanIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13caymanIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCaymanIslands() const;

  inline const static struct _impl_centralAfricanRepublic {  // impl struct for case centralAfricanRepublic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::centralAfricanRepublic;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } centralAfricanRepublic SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO22centralAfricanRepublicyA2CmF");
  SWIFT_INLINE_THUNK bool isCentralAfricanRepublic() const;

  inline const static struct _impl_chad {  // impl struct for case chad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chad;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } chad SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4chadyA2CmF");
  SWIFT_INLINE_THUNK bool isChad() const;

  inline const static struct _impl_christmasIsland {  // impl struct for case christmasIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::christmasIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } christmasIsland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15christmasIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isChristmasIsland() const;

  inline const static struct _impl_cocosIslands {  // impl struct for case cocosIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cocosIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cocosIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12cocosIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCocosIslands() const;

  inline const static struct _impl_comoros {  // impl struct for case comoros
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::comoros;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } comoros SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7comorosyA2CmF");
  SWIFT_INLINE_THUNK bool isComoros() const;

  inline const static struct _impl_congo {  // impl struct for case congo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::congo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } congo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5congoyA2CmF");
  SWIFT_INLINE_THUNK bool isCongo() const;

  inline const static struct _impl_cookIslands {  // impl struct for case cookIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cookIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cookIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11cookIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCookIslands() const;

  inline const static struct _impl_cuba {  // impl struct for case cuba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cuba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cuba SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4cubayA2CmF");
  SWIFT_INLINE_THUNK bool isCuba() const;

  inline const static struct _impl_curacao {  // impl struct for case curacao
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::curacao;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } curacao SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7curacaoyA2CmF");
  SWIFT_INLINE_THUNK bool isCuracao() const;

  inline const static struct _impl_democraticRepublicOfTheCongo {  // impl struct for case democraticRepublicOfTheCongo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::democraticRepublicOfTheCongo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } democraticRepublicOfTheCongo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO28democraticRepublicOfTheCongoyA2CmF");
  SWIFT_INLINE_THUNK bool isDemocraticRepublicOfTheCongo() const;

  inline const static struct _impl_djibouti {  // impl struct for case djibouti
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::djibouti;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } djibouti SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8djiboutiyA2CmF");
  SWIFT_INLINE_THUNK bool isDjibouti() const;

  inline const static struct _impl_dominica {  // impl struct for case dominica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dominica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } dominica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8dominicayA2CmF");
  SWIFT_INLINE_THUNK bool isDominica() const;

  inline const static struct _impl_eastTimor {  // impl struct for case eastTimor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eastTimor;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eastTimor SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9eastTimoryA2CmF");
  SWIFT_INLINE_THUNK bool isEastTimor() const;

  inline const static struct _impl_equatorialGuinea {  // impl struct for case equatorialGuinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::equatorialGuinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } equatorialGuinea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO16equatorialGuineayA2CmF");
  SWIFT_INLINE_THUNK bool isEquatorialGuinea() const;

  inline const static struct _impl_eritrea {  // impl struct for case eritrea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eritrea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eritrea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7eritreayA2CmF");
  SWIFT_INLINE_THUNK bool isEritrea() const;

  inline const static struct _impl_ethiopia {  // impl struct for case ethiopia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ethiopia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ethiopia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8ethiopiayA2CmF");
  SWIFT_INLINE_THUNK bool isEthiopia() const;

  inline const static struct _impl_falklandIslands {  // impl struct for case falklandIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::falklandIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } falklandIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15falklandIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isFalklandIslands() const;

  inline const static struct _impl_faroeIslands {  // impl struct for case faroeIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::faroeIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } faroeIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12faroeIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isFaroeIslands() const;

  inline const static struct _impl_federatedStatesOfMicronesia {  // impl struct for case federatedStatesOfMicronesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::federatedStatesOfMicronesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } federatedStatesOfMicronesia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO27federatedStatesOfMicronesiayA2CmF");
  SWIFT_INLINE_THUNK bool isFederatedStatesOfMicronesia() const;

  inline const static struct _impl_fiji {  // impl struct for case fiji
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fiji;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } fiji SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4fijiyA2CmF");
  SWIFT_INLINE_THUNK bool isFiji() const;

  inline const static struct _impl_frenchGuiana {  // impl struct for case frenchGuiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchGuiana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchGuiana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12frenchGuianayA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchGuiana() const;

  inline const static struct _impl_frenchPolynesia {  // impl struct for case frenchPolynesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchPolynesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchPolynesia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15frenchPolynesiayA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchPolynesia() const;

  inline const static struct _impl_frenchSouthernTerritories {  // impl struct for case frenchSouthernTerritories
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchSouthernTerritories;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchSouthernTerritories SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO25frenchSouthernTerritoriesyA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchSouthernTerritories() const;

  inline const static struct _impl_gabon {  // impl struct for case gabon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gabon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gabon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5gabonyA2CmF");
  SWIFT_INLINE_THUNK bool isGabon() const;

  inline const static struct _impl_gambia {  // impl struct for case gambia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gambia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gambia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6gambiayA2CmF");
  SWIFT_INLINE_THUNK bool isGambia() const;

  inline const static struct _impl_gibraltar {  // impl struct for case gibraltar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gibraltar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gibraltar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9gibraltaryA2CmF");
  SWIFT_INLINE_THUNK bool isGibraltar() const;

  inline const static struct _impl_greenland {  // impl struct for case greenland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } greenland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9greenlandyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenland() const;

  inline const static struct _impl_grenada {  // impl struct for case grenada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::grenada;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } grenada SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7grenadayA2CmF");
  SWIFT_INLINE_THUNK bool isGrenada() const;

  inline const static struct _impl_guadeloupe {  // impl struct for case guadeloupe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guadeloupe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guadeloupe SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10guadeloupeyA2CmF");
  SWIFT_INLINE_THUNK bool isGuadeloupe() const;

  inline const static struct _impl_guam {  // impl struct for case guam
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guam;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guam SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4guamyA2CmF");
  SWIFT_INLINE_THUNK bool isGuam() const;

  inline const static struct _impl_guinea {  // impl struct for case guinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guinea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6guineayA2CmF");
  SWIFT_INLINE_THUNK bool isGuinea() const;

  inline const static struct _impl_guineaBissau {  // impl struct for case guineaBissau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guineaBissau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guineaBissau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12guineaBissauyA2CmF");
  SWIFT_INLINE_THUNK bool isGuineaBissau() const;

  inline const static struct _impl_guyana {  // impl struct for case guyana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guyana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guyana SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6guyanayA2CmF");
  SWIFT_INLINE_THUNK bool isGuyana() const;

  inline const static struct _impl_heardIslandAndMcdonaldIslands {  // impl struct for case heardIslandAndMcdonaldIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::heardIslandAndMcdonaldIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } heardIslandAndMcdonaldIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO29heardIslandAndMcdonaldIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isHeardIslandAndMcdonaldIslands() const;

  inline const static struct _impl_iran {  // impl struct for case iran
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iran;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iran SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4iranyA2CmF");
  SWIFT_INLINE_THUNK bool isIran() const;

  inline const static struct _impl_iraq {  // impl struct for case iraq
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iraq;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iraq SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4iraqyA2CmF");
  SWIFT_INLINE_THUNK bool isIraq() const;

  inline const static struct _impl_isleOfMan {  // impl struct for case isleOfMan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::isleOfMan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } isleOfMan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9isleOfManyA2CmF");
  SWIFT_INLINE_THUNK bool isIsleOfMan() const;

  inline const static struct _impl_ivoryCoast {  // impl struct for case ivoryCoast
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ivoryCoast;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ivoryCoast SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10ivoryCoastyA2CmF");
  SWIFT_INLINE_THUNK bool isIvoryCoast() const;

  inline const static struct _impl_jamaica {  // impl struct for case jamaica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jamaica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } jamaica SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7jamaicayA2CmF");
  SWIFT_INLINE_THUNK bool isJamaica() const;

  inline const static struct _impl_kiribati {  // impl struct for case kiribati
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kiribati;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kiribati SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8kiribatiyA2CmF");
  SWIFT_INLINE_THUNK bool isKiribati() const;

  inline const static struct _impl_kyrgyzstan {  // impl struct for case kyrgyzstan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kyrgyzstan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kyrgyzstan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10kyrgyzstanyA2CmF");
  SWIFT_INLINE_THUNK bool isKyrgyzstan() const;

  inline const static struct _impl_laos {  // impl struct for case laos
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::laos;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } laos SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4laosyA2CmF");
  SWIFT_INLINE_THUNK bool isLaos() const;

  inline const static struct _impl_lebanon {  // impl struct for case lebanon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lebanon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lebanon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7lebanonyA2CmF");
  SWIFT_INLINE_THUNK bool isLebanon() const;

  inline const static struct _impl_lesotho {  // impl struct for case lesotho
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lesotho;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lesotho SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7lesothoyA2CmF");
  SWIFT_INLINE_THUNK bool isLesotho() const;

  inline const static struct _impl_liberia {  // impl struct for case liberia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::liberia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } liberia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7liberiayA2CmF");
  SWIFT_INLINE_THUNK bool isLiberia() const;

  inline const static struct _impl_libya {  // impl struct for case libya
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::libya;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } libya SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5libyayA2CmF");
  SWIFT_INLINE_THUNK bool isLibya() const;

  inline const static struct _impl_liechtenstein {  // impl struct for case liechtenstein
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::liechtenstein;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } liechtenstein SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13liechtensteinyA2CmF");
  SWIFT_INLINE_THUNK bool isLiechtenstein() const;

  inline const static struct _impl_macau {  // impl struct for case macau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::macau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } macau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5macauyA2CmF");
  SWIFT_INLINE_THUNK bool isMacau() const;

  inline const static struct _impl_madagascar {  // impl struct for case madagascar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::madagascar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } madagascar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10madagascaryA2CmF");
  SWIFT_INLINE_THUNK bool isMadagascar() const;

  inline const static struct _impl_malawi {  // impl struct for case malawi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malawi;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malawi SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6malawiyA2CmF");
  SWIFT_INLINE_THUNK bool isMalawi() const;

  inline const static struct _impl_mali {  // impl struct for case mali
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mali;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mali SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4maliyA2CmF");
  SWIFT_INLINE_THUNK bool isMali() const;

  inline const static struct _impl_marshallIslands {  // impl struct for case marshallIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::marshallIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } marshallIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15marshallIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isMarshallIslands() const;

  inline const static struct _impl_martinique {  // impl struct for case martinique
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::martinique;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } martinique SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10martiniqueyA2CmF");
  SWIFT_INLINE_THUNK bool isMartinique() const;

  inline const static struct _impl_mauritania {  // impl struct for case mauritania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mauritania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mauritania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10mauritaniayA2CmF");
  SWIFT_INLINE_THUNK bool isMauritania() const;

  inline const static struct _impl_mayotte {  // impl struct for case mayotte
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mayotte;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mayotte SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7mayotteyA2CmF");
  SWIFT_INLINE_THUNK bool isMayotte() const;

  inline const static struct _impl_moldova {  // impl struct for case moldova
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::moldova;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } moldova SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7moldovayA2CmF");
  SWIFT_INLINE_THUNK bool isMoldova() const;

  inline const static struct _impl_monaco {  // impl struct for case monaco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::monaco;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } monaco SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6monacoyA2CmF");
  SWIFT_INLINE_THUNK bool isMonaco() const;

  inline const static struct _impl_mongolia {  // impl struct for case mongolia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mongolia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mongolia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8mongoliayA2CmF");
  SWIFT_INLINE_THUNK bool isMongolia() const;

  inline const static struct _impl_montserrat {  // impl struct for case montserrat
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montserrat;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } montserrat SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10montserratyA2CmF");
  SWIFT_INLINE_THUNK bool isMontserrat() const;

  inline const static struct _impl_mozambique {  // impl struct for case mozambique
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mozambique;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mozambique SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10mozambiqueyA2CmF");
  SWIFT_INLINE_THUNK bool isMozambique() const;

  inline const static struct _impl_myanmar {  // impl struct for case myanmar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myanmar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } myanmar SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7myanmaryA2CmF");
  SWIFT_INLINE_THUNK bool isMyanmar() const;

  inline const static struct _impl_namibia {  // impl struct for case namibia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::namibia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } namibia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7namibiayA2CmF");
  SWIFT_INLINE_THUNK bool isNamibia() const;

  inline const static struct _impl_nauru {  // impl struct for case nauru
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nauru;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nauru SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5nauruyA2CmF");
  SWIFT_INLINE_THUNK bool isNauru() const;

  inline const static struct _impl_nepal {  // impl struct for case nepal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nepal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nepal SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5nepalyA2CmF");
  SWIFT_INLINE_THUNK bool isNepal() const;

  inline const static struct _impl_newCaledonia {  // impl struct for case newCaledonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newCaledonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } newCaledonia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12newCaledoniayA2CmF");
  SWIFT_INLINE_THUNK bool isNewCaledonia() const;

  inline const static struct _impl_niger {  // impl struct for case niger
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::niger;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } niger SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5nigeryA2CmF");
  SWIFT_INLINE_THUNK bool isNiger() const;

  inline const static struct _impl_niue {  // impl struct for case niue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::niue;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } niue SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4niueyA2CmF");
  SWIFT_INLINE_THUNK bool isNiue() const;

  inline const static struct _impl_norfolkIsland {  // impl struct for case norfolkIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::norfolkIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } norfolkIsland SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13norfolkIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isNorfolkIsland() const;

  inline const static struct _impl_northernCyprus {  // impl struct for case northernCyprus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernCyprus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northernCyprus SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14northernCyprusyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernCyprus() const;

  inline const static struct _impl_northernMarianaIslands {  // impl struct for case northernMarianaIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernMarianaIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northernMarianaIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO22northernMarianaIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernMarianaIslands() const;

  inline const static struct _impl_northKorea {  // impl struct for case northKorea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northKorea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northKorea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10northKoreayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthKorea() const;

  inline const static struct _impl_northMacedonia {  // impl struct for case northMacedonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northMacedonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northMacedonia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14northMacedoniayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthMacedonia() const;

  inline const static struct _impl_palau {  // impl struct for case palau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::palau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } palau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5palauyA2CmF");
  SWIFT_INLINE_THUNK bool isPalau() const;

  inline const static struct _impl_palestine {  // impl struct for case palestine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::palestine;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } palestine SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9palestineyA2CmF");
  SWIFT_INLINE_THUNK bool isPalestine() const;

  inline const static struct _impl_papuaNewGuinea {  // impl struct for case papuaNewGuinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::papuaNewGuinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } papuaNewGuinea SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14papuaNewGuineayA2CmF");
  SWIFT_INLINE_THUNK bool isPapuaNewGuinea() const;

  inline const static struct _impl_pitcairn {  // impl struct for case pitcairn
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pitcairn;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } pitcairn SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8pitcairnyA2CmF");
  SWIFT_INLINE_THUNK bool isPitcairn() const;

  inline const static struct _impl_reunion {  // impl struct for case reunion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::reunion;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } reunion SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7reunionyA2CmF");
  SWIFT_INLINE_THUNK bool isReunion() const;

  inline const static struct _impl_rwanda {  // impl struct for case rwanda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rwanda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } rwanda SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6rwandayA2CmF");
  SWIFT_INLINE_THUNK bool isRwanda() const;

  inline const static struct _impl_saintBarthelemy {  // impl struct for case saintBarthelemy
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintBarthelemy;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintBarthelemy SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15saintBarthelemyyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintBarthelemy() const;

  inline const static struct _impl_saintHelenaAscensionAndTristianDaCunha {  // impl struct for case saintHelenaAscensionAndTristianDaCunha
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintHelenaAscensionAndTristianDaCunha;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintHelenaAscensionAndTristianDaCunha SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmF");
  SWIFT_INLINE_THUNK bool isSaintHelenaAscensionAndTristianDaCunha() const;

  inline const static struct _impl_saintKittsAndNevis {  // impl struct for case saintKittsAndNevis
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintKittsAndNevis;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintKittsAndNevis SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO18saintKittsAndNevisyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintKittsAndNevis() const;

  inline const static struct _impl_saintLucia {  // impl struct for case saintLucia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintLucia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintLucia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10saintLuciayA2CmF");
  SWIFT_INLINE_THUNK bool isSaintLucia() const;

  inline const static struct _impl_saintMartin {  // impl struct for case saintMartin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintMartin;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintMartin SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11saintMartinyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintMartin() const;

  inline const static struct _impl_saintPierreAndMiquelon {  // impl struct for case saintPierreAndMiquelon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintPierreAndMiquelon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintPierreAndMiquelon SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO22saintPierreAndMiquelonyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintPierreAndMiquelon() const;

  inline const static struct _impl_saintVincentAndTheGrenadines {  // impl struct for case saintVincentAndTheGrenadines
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintVincentAndTheGrenadines;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintVincentAndTheGrenadines SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO28saintVincentAndTheGrenadinesyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintVincentAndTheGrenadines() const;

  inline const static struct _impl_samoa {  // impl struct for case samoa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::samoa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } samoa SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5samoayA2CmF");
  SWIFT_INLINE_THUNK bool isSamoa() const;

  inline const static struct _impl_sanMarino {  // impl struct for case sanMarino
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sanMarino;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sanMarino SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO9sanMarinoyA2CmF");
  SWIFT_INLINE_THUNK bool isSanMarino() const;

  inline const static struct _impl_saoTomeAndPrincipe {  // impl struct for case saoTomeAndPrincipe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saoTomeAndPrincipe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saoTomeAndPrincipe SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO18saoTomeAndPrincipeyA2CmF");
  SWIFT_INLINE_THUNK bool isSaoTomeAndPrincipe() const;

  inline const static struct _impl_senegal {  // impl struct for case senegal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::senegal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } senegal SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7senegalyA2CmF");
  SWIFT_INLINE_THUNK bool isSenegal() const;

  inline const static struct _impl_seychelles {  // impl struct for case seychelles
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::seychelles;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } seychelles SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10seychellesyA2CmF");
  SWIFT_INLINE_THUNK bool isSeychelles() const;

  inline const static struct _impl_sierraLeone {  // impl struct for case sierraLeone
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sierraLeone;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sierraLeone SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11sierraLeoneyA2CmF");
  SWIFT_INLINE_THUNK bool isSierraLeone() const;

  inline const static struct _impl_sintMaarten {  // impl struct for case sintMaarten
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sintMaarten;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sintMaarten SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11sintMaartenyA2CmF");
  SWIFT_INLINE_THUNK bool isSintMaarten() const;

  inline const static struct _impl_solomonIslands {  // impl struct for case solomonIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::solomonIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } solomonIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO14solomonIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isSolomonIslands() const;

  inline const static struct _impl_somalia {  // impl struct for case somalia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::somalia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } somalia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7somaliayA2CmF");
  SWIFT_INLINE_THUNK bool isSomalia() const;

  inline const static struct _impl_southGeorgiaAndTheSouthSandwichIslands {  // impl struct for case southGeorgiaAndTheSouthSandwichIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southGeorgiaAndTheSouthSandwichIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southGeorgiaAndTheSouthSandwichIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isSouthGeorgiaAndTheSouthSandwichIslands() const;

  inline const static struct _impl_southSudan {  // impl struct for case southSudan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southSudan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southSudan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10southSudanyA2CmF");
  SWIFT_INLINE_THUNK bool isSouthSudan() const;

  inline const static struct _impl_sudan {  // impl struct for case sudan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sudan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sudan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5sudanyA2CmF");
  SWIFT_INLINE_THUNK bool isSudan() const;

  inline const static struct _impl_suriname {  // impl struct for case suriname
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::suriname;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } suriname SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8surinameyA2CmF");
  SWIFT_INLINE_THUNK bool isSuriname() const;

  inline const static struct _impl_svalbardAndJanMayen {  // impl struct for case svalbardAndJanMayen
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::svalbardAndJanMayen;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } svalbardAndJanMayen SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO19svalbardAndJanMayenyA2CmF");
  SWIFT_INLINE_THUNK bool isSvalbardAndJanMayen() const;

  inline const static struct _impl_eswatini {  // impl struct for case eswatini
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eswatini;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eswatini SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8eswatiniyA2CmF");
  SWIFT_INLINE_THUNK bool isEswatini() const;

  inline const static struct _impl_syria {  // impl struct for case syria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::syria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } syria SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5syriayA2CmF");
  SWIFT_INLINE_THUNK bool isSyria() const;

  inline const static struct _impl_tajikistan {  // impl struct for case tajikistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tajikistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tajikistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10tajikistanyA2CmF");
  SWIFT_INLINE_THUNK bool isTajikistan() const;

  inline const static struct _impl_tanzania {  // impl struct for case tanzania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tanzania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tanzania SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8tanzaniayA2CmF");
  SWIFT_INLINE_THUNK bool isTanzania() const;

  inline const static struct _impl_togo {  // impl struct for case togo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::togo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } togo SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO4togoyA2CmF");
  SWIFT_INLINE_THUNK bool isTogo() const;

  inline const static struct _impl_tokelau {  // impl struct for case tokelau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tokelau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tokelau SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7tokelauyA2CmF");
  SWIFT_INLINE_THUNK bool isTokelau() const;

  inline const static struct _impl_tonga {  // impl struct for case tonga
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tonga;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tonga SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5tongayA2CmF");
  SWIFT_INLINE_THUNK bool isTonga() const;

  inline const static struct _impl_trinidadAndTobago {  // impl struct for case trinidadAndTobago
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::trinidadAndTobago;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } trinidadAndTobago SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO17trinidadAndTobagoyA2CmF");
  SWIFT_INLINE_THUNK bool isTrinidadAndTobago() const;

  inline const static struct _impl_turkmenistan {  // impl struct for case turkmenistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turkmenistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turkmenistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO12turkmenistanyA2CmF");
  SWIFT_INLINE_THUNK bool isTurkmenistan() const;

  inline const static struct _impl_turksAndCaicosIslands {  // impl struct for case turksAndCaicosIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turksAndCaicosIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turksAndCaicosIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO21turksAndCaicosIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isTurksAndCaicosIslands() const;

  inline const static struct _impl_tuvalu {  // impl struct for case tuvalu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tuvalu;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tuvalu SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6tuvaluyA2CmF");
  SWIFT_INLINE_THUNK bool isTuvalu() const;

  inline const static struct _impl_unitedStatesMinorOutlyingIslands {  // impl struct for case unitedStatesMinorOutlyingIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unitedStatesMinorOutlyingIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } unitedStatesMinorOutlyingIslands SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO32unitedStatesMinorOutlyingIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isUnitedStatesMinorOutlyingIslands() const;

  inline const static struct _impl_uzbekistan {  // impl struct for case uzbekistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uzbekistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uzbekistan SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10uzbekistanyA2CmF");
  SWIFT_INLINE_THUNK bool isUzbekistan() const;

  inline const static struct _impl_vanuatu {  // impl struct for case vanuatu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vanuatu;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vanuatu SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO7vanuatuyA2CmF");
  SWIFT_INLINE_THUNK bool isVanuatu() const;

  inline const static struct _impl_vaticanCity {  // impl struct for case vaticanCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vaticanCity;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vaticanCity SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO11vaticanCityyA2CmF");
  SWIFT_INLINE_THUNK bool isVaticanCity() const;

  inline const static struct _impl_virginIslandsBritish {  // impl struct for case virginIslandsBritish
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginIslandsBritish;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } virginIslandsBritish SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO20virginIslandsBritishyA2CmF");
  SWIFT_INLINE_THUNK bool isVirginIslandsBritish() const;

  inline const static struct _impl_virginIslandsUs {  // impl struct for case virginIslandsUs
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginIslandsUs;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } virginIslandsUs SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15virginIslandsUsyA2CmF");
  SWIFT_INLINE_THUNK bool isVirginIslandsUs() const;

  inline const static struct _impl_wallisAndFutuna {  // impl struct for case wallisAndFutuna
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wallisAndFutuna;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } wallisAndFutuna SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO15wallisAndFutunayA2CmF");
  SWIFT_INLINE_THUNK bool isWallisAndFutuna() const;

  inline const static struct _impl_westernSahara {  // impl struct for case westernSahara
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westernSahara;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } westernSahara SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13westernSaharayA2CmF");
  SWIFT_INLINE_THUNK bool isWesternSahara() const;

  inline const static struct _impl_yemen {  // impl struct for case yemen
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yemen;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } yemen SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO5yemenyA2CmF");
  SWIFT_INLINE_THUNK bool isYemen() const;

  inline const static struct _impl_yugoslavia {  // impl struct for case yugoslavia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yugoslavia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } yugoslavia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO10yugoslaviayA2CmF");
  SWIFT_INLINE_THUNK bool isYugoslavia() const;

  inline const static struct _impl_zambia {  // impl struct for case zambia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zambia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } zambia SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO6zambiayA2CmF");
  SWIFT_INLINE_THUNK bool isZambia() const;

  inline const static struct _impl_zimbabwe {  // impl struct for case zimbabwe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zimbabwe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } zimbabwe SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8zimbabweyA2CmF");
  SWIFT_INLINE_THUNK bool isZimbabwe() const;

  inline const static struct _impl_schengen_area {  // impl struct for case schengen_area
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::schengen_area;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } schengen_area SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO13schengen_areayA2CmF");
  SWIFT_INLINE_THUNK bool isSchengen_area() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify7CountryO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7albaniayA2CmFWC) return cases::albania;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7algeriayA2CmFWC) return cases::algeria;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9argentinayA2CmFWC) return cases::argentina;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9australiayA2CmFWC) return cases::australia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7austriayA2CmFWC) return cases::austria;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10azerbaijanyA2CmFWC) return cases::azerbaijan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7bahrainyA2CmFWC) return cases::bahrain;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10bangladeshyA2CmFWC) return cases::bangladesh;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7belgiumyA2CmFWC) return cases::belgium;
    if (tag == _impl::$s13BlinkIDVerify7CountryO20bosniaAndHerzegovinayA2CmFWC) return cases::bosniaAndHerzegovina;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6bruneiyA2CmFWC) return cases::brunei;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8bulgariayA2CmFWC) return cases::bulgaria;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8cambodiayA2CmFWC) return cases::cambodia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6canadayA2CmFWC) return cases::canada;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5chileyA2CmFWC) return cases::chile;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8colombiayA2CmFWC) return cases::colombia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9costaRicayA2CmFWC) return cases::costaRica;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7croatiayA2CmFWC) return cases::croatia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6cyprusyA2CmFWC) return cases::cyprus;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7czechiayA2CmFWC) return cases::czechia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7denmarkyA2CmFWC) return cases::denmark;
    if (tag == _impl::$s13BlinkIDVerify7CountryO17dominicanRepublicyA2CmFWC) return cases::dominicanRepublic;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5egyptyA2CmFWC) return cases::egypt;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7estoniayA2CmFWC) return cases::estonia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7finlandyA2CmFWC) return cases::finland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6franceyA2CmFWC) return cases::france;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7georgiayA2CmFWC) return cases::georgia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7germanyyA2CmFWC) return cases::germany;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5ghanayA2CmFWC) return cases::ghana;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6greeceyA2CmFWC) return cases::greece;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9guatemalayA2CmFWC) return cases::guatemala;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8hongKongyA2CmFWC) return cases::hongKong;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7hungaryyA2CmFWC) return cases::hungary;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5indiayA2CmFWC) return cases::india;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9indonesiayA2CmFWC) return cases::indonesia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7irelandyA2CmFWC) return cases::ireland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6israelyA2CmFWC) return cases::israel;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5italyyA2CmFWC) return cases::italy;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6jordanyA2CmFWC) return cases::jordan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10kazakhstanyA2CmFWC) return cases::kazakhstan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5kenyayA2CmFWC) return cases::kenya;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6kosovoyA2CmFWC) return cases::kosovo;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6kuwaityA2CmFWC) return cases::kuwait;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6latviayA2CmFWC) return cases::latvia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9lithuaniayA2CmFWC) return cases::lithuania;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8malaysiayA2CmFWC) return cases::malaysia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8maldivesyA2CmFWC) return cases::maldives;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5maltayA2CmFWC) return cases::malta;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9mauritiusyA2CmFWC) return cases::mauritius;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6mexicoyA2CmFWC) return cases::mexico;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7moroccoyA2CmFWC) return cases::morocco;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11netherlandsyA2CmFWC) return cases::netherlands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10newZealandyA2CmFWC) return cases::newZealand;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7nigeriayA2CmFWC) return cases::nigeria;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8pakistanyA2CmFWC) return cases::pakistan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6panamayA2CmFWC) return cases::panama;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8paraguayyA2CmFWC) return cases::paraguay;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11philippinesyA2CmFWC) return cases::philippines;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6polandyA2CmFWC) return cases::poland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8portugalyA2CmFWC) return cases::portugal;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10puertoRicoyA2CmFWC) return cases::puertoRico;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5qataryA2CmFWC) return cases::qatar;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7romaniayA2CmFWC) return cases::romania;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6russiayA2CmFWC) return cases::russia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11saudiArabiayA2CmFWC) return cases::saudiArabia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6serbiayA2CmFWC) return cases::serbia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9singaporeyA2CmFWC) return cases::singapore;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8slovakiayA2CmFWC) return cases::slovakia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8sloveniayA2CmFWC) return cases::slovenia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11southAfricayA2CmFWC) return cases::southAfrica;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5spainyA2CmFWC) return cases::spain;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6swedenyA2CmFWC) return cases::sweden;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11switzerlandyA2CmFWC) return cases::switzerland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6taiwanyA2CmFWC) return cases::taiwan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8thailandyA2CmFWC) return cases::thailand;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7tunisiayA2CmFWC) return cases::tunisia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6turkeyyA2CmFWC) return cases::turkey;
    if (tag == _impl::$s13BlinkIDVerify7CountryO3uaeyA2CmFWC) return cases::uae;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6ugandayA2CmFWC) return cases::uganda;
    if (tag == _impl::$s13BlinkIDVerify7CountryO2ukyA2CmFWC) return cases::uk;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7ukraineyA2CmFWC) return cases::ukraine;
    if (tag == _impl::$s13BlinkIDVerify7CountryO3usayA2CmFWC) return cases::usa;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7vietnamyA2CmFWC) return cases::vietnam;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6brazilyA2CmFWC) return cases::brazil;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6norwayyA2CmFWC) return cases::norway;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4omanyA2CmFWC) return cases::oman;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7ecuadoryA2CmFWC) return cases::ecuador;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10elSalvadoryA2CmFWC) return cases::elSalvador;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8sriLankayA2CmFWC) return cases::sriLanka;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4peruyA2CmFWC) return cases::peru;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7uruguayyA2CmFWC) return cases::uruguay;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7bahamasyA2CmFWC) return cases::bahamas;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7bermudayA2CmFWC) return cases::bermuda;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7boliviayA2CmFWC) return cases::bolivia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5chinayA2CmFWC) return cases::china;
    if (tag == _impl::$s13BlinkIDVerify7CountryO13europeanUnionyA2CmFWC) return cases::europeanUnion;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5haitiyA2CmFWC) return cases::haiti;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8hondurasyA2CmFWC) return cases::honduras;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7icelandyA2CmFWC) return cases::iceland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5japanyA2CmFWC) return cases::japan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10luxembourgyA2CmFWC) return cases::luxembourg;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10montenegroyA2CmFWC) return cases::montenegro;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9nicaraguayA2CmFWC) return cases::nicaragua;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10southKoreayA2CmFWC) return cases::southKorea;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9venezuelayA2CmFWC) return cases::venezuela;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11afghanistanyA2CmFWC) return cases::afghanistan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12alandIslandsyA2CmFWC) return cases::alandIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO13americanSamoayA2CmFWC) return cases::americanSamoa;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7andorrayA2CmFWC) return cases::andorra;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6angolayA2CmFWC) return cases::angola;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8anguillayA2CmFWC) return cases::anguilla;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10antarcticayA2CmFWC) return cases::antarctica;
    if (tag == _impl::$s13BlinkIDVerify7CountryO17antiguaAndBarbudayA2CmFWC) return cases::antiguaAndBarbuda;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7armeniayA2CmFWC) return cases::armenia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5arubayA2CmFWC) return cases::aruba;
    if (tag == _impl::$s13BlinkIDVerify7CountryO19bailiwickOfGuernseyyA2CmFWC) return cases::bailiwickOfGuernsey;
    if (tag == _impl::$s13BlinkIDVerify7CountryO17bailiwickOfJerseyyA2CmFWC) return cases::bailiwickOfJersey;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8barbadosyA2CmFWC) return cases::barbados;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7belarusyA2CmFWC) return cases::belarus;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6belizeyA2CmFWC) return cases::belize;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5beninyA2CmFWC) return cases::benin;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6bhutanyA2CmFWC) return cases::bhutan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC) return cases::bonaireSaintEustatiusAndSaba;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8botswanayA2CmFWC) return cases::botswana;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12bouvetIslandyA2CmFWC) return cases::bouvetIsland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO27britishIndianOceanTerritoryyA2CmFWC) return cases::britishIndianOceanTerritory;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11burkinaFasoyA2CmFWC) return cases::burkinaFaso;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7burundiyA2CmFWC) return cases::burundi;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8cameroonyA2CmFWC) return cases::cameroon;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9capeVerdeyA2CmFWC) return cases::capeVerde;
    if (tag == _impl::$s13BlinkIDVerify7CountryO20caribbeanNetherlandsyA2CmFWC) return cases::caribbeanNetherlands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO13caymanIslandsyA2CmFWC) return cases::caymanIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO22centralAfricanRepublicyA2CmFWC) return cases::centralAfricanRepublic;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4chadyA2CmFWC) return cases::chad;
    if (tag == _impl::$s13BlinkIDVerify7CountryO15christmasIslandyA2CmFWC) return cases::christmasIsland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12cocosIslandsyA2CmFWC) return cases::cocosIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7comorosyA2CmFWC) return cases::comoros;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5congoyA2CmFWC) return cases::congo;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11cookIslandsyA2CmFWC) return cases::cookIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4cubayA2CmFWC) return cases::cuba;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7curacaoyA2CmFWC) return cases::curacao;
    if (tag == _impl::$s13BlinkIDVerify7CountryO28democraticRepublicOfTheCongoyA2CmFWC) return cases::democraticRepublicOfTheCongo;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8djiboutiyA2CmFWC) return cases::djibouti;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8dominicayA2CmFWC) return cases::dominica;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9eastTimoryA2CmFWC) return cases::eastTimor;
    if (tag == _impl::$s13BlinkIDVerify7CountryO16equatorialGuineayA2CmFWC) return cases::equatorialGuinea;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7eritreayA2CmFWC) return cases::eritrea;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8ethiopiayA2CmFWC) return cases::ethiopia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO15falklandIslandsyA2CmFWC) return cases::falklandIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12faroeIslandsyA2CmFWC) return cases::faroeIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO27federatedStatesOfMicronesiayA2CmFWC) return cases::federatedStatesOfMicronesia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4fijiyA2CmFWC) return cases::fiji;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12frenchGuianayA2CmFWC) return cases::frenchGuiana;
    if (tag == _impl::$s13BlinkIDVerify7CountryO15frenchPolynesiayA2CmFWC) return cases::frenchPolynesia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO25frenchSouthernTerritoriesyA2CmFWC) return cases::frenchSouthernTerritories;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5gabonyA2CmFWC) return cases::gabon;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6gambiayA2CmFWC) return cases::gambia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9gibraltaryA2CmFWC) return cases::gibraltar;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9greenlandyA2CmFWC) return cases::greenland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7grenadayA2CmFWC) return cases::grenada;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10guadeloupeyA2CmFWC) return cases::guadeloupe;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4guamyA2CmFWC) return cases::guam;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6guineayA2CmFWC) return cases::guinea;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12guineaBissauyA2CmFWC) return cases::guineaBissau;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6guyanayA2CmFWC) return cases::guyana;
    if (tag == _impl::$s13BlinkIDVerify7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC) return cases::heardIslandAndMcdonaldIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4iranyA2CmFWC) return cases::iran;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4iraqyA2CmFWC) return cases::iraq;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9isleOfManyA2CmFWC) return cases::isleOfMan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10ivoryCoastyA2CmFWC) return cases::ivoryCoast;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7jamaicayA2CmFWC) return cases::jamaica;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8kiribatiyA2CmFWC) return cases::kiribati;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10kyrgyzstanyA2CmFWC) return cases::kyrgyzstan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4laosyA2CmFWC) return cases::laos;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7lebanonyA2CmFWC) return cases::lebanon;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7lesothoyA2CmFWC) return cases::lesotho;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7liberiayA2CmFWC) return cases::liberia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5libyayA2CmFWC) return cases::libya;
    if (tag == _impl::$s13BlinkIDVerify7CountryO13liechtensteinyA2CmFWC) return cases::liechtenstein;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5macauyA2CmFWC) return cases::macau;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10madagascaryA2CmFWC) return cases::madagascar;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6malawiyA2CmFWC) return cases::malawi;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4maliyA2CmFWC) return cases::mali;
    if (tag == _impl::$s13BlinkIDVerify7CountryO15marshallIslandsyA2CmFWC) return cases::marshallIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10martiniqueyA2CmFWC) return cases::martinique;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10mauritaniayA2CmFWC) return cases::mauritania;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7mayotteyA2CmFWC) return cases::mayotte;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7moldovayA2CmFWC) return cases::moldova;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6monacoyA2CmFWC) return cases::monaco;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8mongoliayA2CmFWC) return cases::mongolia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10montserratyA2CmFWC) return cases::montserrat;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10mozambiqueyA2CmFWC) return cases::mozambique;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7myanmaryA2CmFWC) return cases::myanmar;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7namibiayA2CmFWC) return cases::namibia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5nauruyA2CmFWC) return cases::nauru;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5nepalyA2CmFWC) return cases::nepal;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12newCaledoniayA2CmFWC) return cases::newCaledonia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5nigeryA2CmFWC) return cases::niger;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4niueyA2CmFWC) return cases::niue;
    if (tag == _impl::$s13BlinkIDVerify7CountryO13norfolkIslandyA2CmFWC) return cases::norfolkIsland;
    if (tag == _impl::$s13BlinkIDVerify7CountryO14northernCyprusyA2CmFWC) return cases::northernCyprus;
    if (tag == _impl::$s13BlinkIDVerify7CountryO22northernMarianaIslandsyA2CmFWC) return cases::northernMarianaIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10northKoreayA2CmFWC) return cases::northKorea;
    if (tag == _impl::$s13BlinkIDVerify7CountryO14northMacedoniayA2CmFWC) return cases::northMacedonia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5palauyA2CmFWC) return cases::palau;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9palestineyA2CmFWC) return cases::palestine;
    if (tag == _impl::$s13BlinkIDVerify7CountryO14papuaNewGuineayA2CmFWC) return cases::papuaNewGuinea;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8pitcairnyA2CmFWC) return cases::pitcairn;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7reunionyA2CmFWC) return cases::reunion;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6rwandayA2CmFWC) return cases::rwanda;
    if (tag == _impl::$s13BlinkIDVerify7CountryO15saintBarthelemyyA2CmFWC) return cases::saintBarthelemy;
    if (tag == _impl::$s13BlinkIDVerify7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC) return cases::saintHelenaAscensionAndTristianDaCunha;
    if (tag == _impl::$s13BlinkIDVerify7CountryO18saintKittsAndNevisyA2CmFWC) return cases::saintKittsAndNevis;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10saintLuciayA2CmFWC) return cases::saintLucia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11saintMartinyA2CmFWC) return cases::saintMartin;
    if (tag == _impl::$s13BlinkIDVerify7CountryO22saintPierreAndMiquelonyA2CmFWC) return cases::saintPierreAndMiquelon;
    if (tag == _impl::$s13BlinkIDVerify7CountryO28saintVincentAndTheGrenadinesyA2CmFWC) return cases::saintVincentAndTheGrenadines;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5samoayA2CmFWC) return cases::samoa;
    if (tag == _impl::$s13BlinkIDVerify7CountryO9sanMarinoyA2CmFWC) return cases::sanMarino;
    if (tag == _impl::$s13BlinkIDVerify7CountryO18saoTomeAndPrincipeyA2CmFWC) return cases::saoTomeAndPrincipe;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7senegalyA2CmFWC) return cases::senegal;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10seychellesyA2CmFWC) return cases::seychelles;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11sierraLeoneyA2CmFWC) return cases::sierraLeone;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11sintMaartenyA2CmFWC) return cases::sintMaarten;
    if (tag == _impl::$s13BlinkIDVerify7CountryO14solomonIslandsyA2CmFWC) return cases::solomonIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7somaliayA2CmFWC) return cases::somalia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC) return cases::southGeorgiaAndTheSouthSandwichIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10southSudanyA2CmFWC) return cases::southSudan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5sudanyA2CmFWC) return cases::sudan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8surinameyA2CmFWC) return cases::suriname;
    if (tag == _impl::$s13BlinkIDVerify7CountryO19svalbardAndJanMayenyA2CmFWC) return cases::svalbardAndJanMayen;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8eswatiniyA2CmFWC) return cases::eswatini;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5syriayA2CmFWC) return cases::syria;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10tajikistanyA2CmFWC) return cases::tajikistan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8tanzaniayA2CmFWC) return cases::tanzania;
    if (tag == _impl::$s13BlinkIDVerify7CountryO4togoyA2CmFWC) return cases::togo;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7tokelauyA2CmFWC) return cases::tokelau;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5tongayA2CmFWC) return cases::tonga;
    if (tag == _impl::$s13BlinkIDVerify7CountryO17trinidadAndTobagoyA2CmFWC) return cases::trinidadAndTobago;
    if (tag == _impl::$s13BlinkIDVerify7CountryO12turkmenistanyA2CmFWC) return cases::turkmenistan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO21turksAndCaicosIslandsyA2CmFWC) return cases::turksAndCaicosIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6tuvaluyA2CmFWC) return cases::tuvalu;
    if (tag == _impl::$s13BlinkIDVerify7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC) return cases::unitedStatesMinorOutlyingIslands;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10uzbekistanyA2CmFWC) return cases::uzbekistan;
    if (tag == _impl::$s13BlinkIDVerify7CountryO7vanuatuyA2CmFWC) return cases::vanuatu;
    if (tag == _impl::$s13BlinkIDVerify7CountryO11vaticanCityyA2CmFWC) return cases::vaticanCity;
    if (tag == _impl::$s13BlinkIDVerify7CountryO20virginIslandsBritishyA2CmFWC) return cases::virginIslandsBritish;
    if (tag == _impl::$s13BlinkIDVerify7CountryO15virginIslandsUsyA2CmFWC) return cases::virginIslandsUs;
    if (tag == _impl::$s13BlinkIDVerify7CountryO15wallisAndFutunayA2CmFWC) return cases::wallisAndFutuna;
    if (tag == _impl::$s13BlinkIDVerify7CountryO13westernSaharayA2CmFWC) return cases::westernSahara;
    if (tag == _impl::$s13BlinkIDVerify7CountryO5yemenyA2CmFWC) return cases::yemen;
    if (tag == _impl::$s13BlinkIDVerify7CountryO10yugoslaviayA2CmFWC) return cases::yugoslavia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO6zambiayA2CmFWC) return cases::zambia;
    if (tag == _impl::$s13BlinkIDVerify7CountryO8zimbabweyA2CmFWC) return cases::zimbabwe;
    if (tag == _impl::$s13BlinkIDVerify7CountryO13schengen_areayA2CmFWC) return cases::schengen_area;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<Country> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify7CountryO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK Country(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Country _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Country(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Country;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify7CountryOD;
  static inline constexpr $s13BlinkIDVerify7CountryOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Country {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Country &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Country &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Country returnNewValue(T callable) {
    auto result = Country::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Country> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify7CountryOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Country> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Country> = true;
template<>
struct implClassFor<BlinkIDVerify::Country> { using type = BlinkIDVerify::_impl::_impl_Country; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


class SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV") MatchCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::MatchCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV") LogicCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::LogicCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV") FormatCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::FormatCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify8MrzCheckV") MrzCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::MrzCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify19SuspiciousDataCheckV") SuspiciousDataCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::SuspiciousDataCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV") DataCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DataCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DataCheck;

// Type metadata accessor for DataCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify9DataCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV") DataCheck final {
public:
  SWIFT_INLINE_THUNK ~DataCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9DataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataCheck(const DataCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9DataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataCheck &operator =(const DataCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9DataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataCheck &operator =(DataCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataCheck(DataCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV7overallAA08DetailedD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchCheck> getMatchCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV05matchD0AA05MatchD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<LogicCheck> getLogicCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV05logicD0AA05LogicD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FormatCheck> getFormatCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV06formatD0AA06FormatD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<BarcodeAnomalyCheck> getBarcodeAnomalyCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV014barcodeAnomalyD0AA07BarcodefD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MrzCheck> getMrzCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV03mrzD0AA03MrzD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<SuspiciousDataCheck> getSuspiciousDataCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV010suspiciouscD0AA010SuspiciouscD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getDataIntegrityCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV013dataIntegrityD0AA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify9DataCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK DataCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9DataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify9DataCheckVD;
  static inline constexpr $s13BlinkIDVerify9DataCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataCheck returnNewValue(T callable) {
    auto result = DataCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify9DataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DataCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify9DataCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DataCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DataCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::DataCheck> { using type = BlinkIDVerify::_impl::_impl_DataCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


class SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV") DateLogicCheck;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DateLogicCheck> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DateLogicCheck;

// Type metadata accessor for DateLogicCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify14DateLogicCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV") DateLogicCheck final {
public:
  SWIFT_INLINE_THUNK ~DateLogicCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14DateLogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DateLogicCheck(const DateLogicCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14DateLogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DateLogicCheck &operator =(const DateLogicCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14DateLogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DateLogicCheck &operator =(DateLogicCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DateLogicCheck(DateLogicCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV7overallAA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getDateOfBirthBeforeDateOfIssueCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV017dateOfBirthBeforecg5IssueE0AA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getDateOfBirthBeforeDateOfExpiryCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV017dateOfBirthBeforecg6ExpiryE0AA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getDateOfIssueBeforeDateOfExpiryCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV017dateOfIssueBeforecg6ExpiryE0AA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getDateOfBirthInPastCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV017dateOfBirthInPastE0AA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getDateOfIssueInPastCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV017dateOfIssueInPastE0AA0E6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify14DateLogicCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK DateLogicCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DateLogicCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14DateLogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DateLogicCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DateLogicCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify14DateLogicCheckVD;
  static inline constexpr $s13BlinkIDVerify14DateLogicCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DateLogicCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DateLogicCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DateLogicCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DateLogicCheck returnNewValue(T callable) {
    auto result = DateLogicCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify14DateLogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DateLogicCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify14DateLogicCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DateLogicCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DateLogicCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::DateLogicCheck> { using type = BlinkIDVerify::_impl::_impl_DateLogicCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO") ResultType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ResultType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify16DetailDictionaryV") DetailDictionary;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DetailDictionary> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify11ResultArrayV") ResultArray;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ResultArray> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV") DateResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DateResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DateResult;

// Type metadata accessor for DateResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10DateResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV") DateResult final {
public:
  SWIFT_INLINE_THUNK ~DateResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResult(const DateResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResult &operator =(const DateResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DateResult &operator =(DateResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DateResult(DateResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getDay() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV3daySivp");
  SWIFT_INLINE_THUNK swift::Int getMonth() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV5monthSivp");
  SWIFT_INLINE_THUNK swift::Int getYear() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV4yearSivp");
  SWIFT_INLINE_THUNK ResultType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getField() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV5fieldSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getResults() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV7resultsAA0D5ArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getOriginalResult() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV08originalD0SSSgvp");
  SWIFT_INLINE_THUNK bool getSuccessfullyParsed() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV18successfullyParsedSbvp");
  SWIFT_INLINE_THUNK bool getFilledByDomainKnowledge() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV23filledByDomainKnowledgeSbvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10DateResultV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK DateResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DateResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DateResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DateResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10DateResultVD;
  static inline constexpr $s13BlinkIDVerify10DateResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DateResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DateResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DateResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DateResult returnNewValue(T callable) {
    auto result = DateResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10DateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DateResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10DateResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DateResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DateResult> = true;
template<>
struct implClassFor<BlinkIDVerify::DateResult> { using type = BlinkIDVerify::_impl::_impl_DateResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV") DateResultSimple;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DateResultSimple> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DateResultSimple;

// Type metadata accessor for DateResultSimple
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16DateResultSimpleVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV") DateResultSimple final {
public:
  SWIFT_INLINE_THUNK ~DateResultSimple() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DateResultSimpleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResultSimple(const DateResultSimple &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DateResultSimpleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResultSimple &operator =(const DateResultSimple &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DateResultSimpleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DateResultSimple &operator =(DateResultSimple &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DateResultSimple(DateResultSimple &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getDay() const SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV3daySivp");
  SWIFT_INLINE_THUNK swift::Int getMonth() const SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV5monthSivp");
  SWIFT_INLINE_THUNK swift::Int getYear() const SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV4yearSivp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getOriginalString() const SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV14originalStringSSSgvp");
  SWIFT_INLINE_THUNK bool getSuccessfullyParsed() const SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV18successfullyParsedSbvp");
  SWIFT_INLINE_THUNK bool getFilledByDomainKnowledge() const SWIFT_SYMBOL("s:13BlinkIDVerify16DateResultSimpleV23filledByDomainKnowledgeSbvp");
private:
  SWIFT_INLINE_THUNK DateResultSimple(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DateResultSimple _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DateResultSimpleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DateResultSimple(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DateResultSimple;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16DateResultSimpleVD;
  static inline constexpr $s13BlinkIDVerify16DateResultSimpleVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DateResultSimple {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DateResultSimple &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DateResultSimple &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DateResultSimple returnNewValue(T callable) {
    auto result = DateResultSimple::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16DateResultSimpleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DateResultSimple> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16DateResultSimpleVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DateResultSimple> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DateResultSimple> = true;
template<>
struct implClassFor<BlinkIDVerify::DateResultSimple> { using type = BlinkIDVerify::_impl::_impl_DateResultSimple; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {




namespace _impl {

class _impl_DetailDictionary;

// Type metadata accessor for DetailDictionary
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16DetailDictionaryVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16DetailDictionaryV") DetailDictionary final {
public:
  SWIFT_INLINE_THUNK ~DetailDictionary() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DetailDictionaryVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailDictionary(const DetailDictionary &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DetailDictionaryVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailDictionary &operator =(const DetailDictionary &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DetailDictionaryVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailDictionary &operator =(DetailDictionary &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailDictionary(DetailDictionary &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify16DetailDictionaryV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK DetailDictionary(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailDictionary _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DetailDictionaryVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailDictionary(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailDictionary;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16DetailDictionaryVD;
  static inline constexpr $s13BlinkIDVerify16DetailDictionaryVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailDictionary {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailDictionary &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailDictionary &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailDictionary returnNewValue(T callable) {
    auto result = DetailDictionary::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16DetailDictionaryVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DetailDictionary> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16DetailDictionaryVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DetailDictionary> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DetailDictionary> = true;
template<>
struct implClassFor<BlinkIDVerify::DetailDictionary> { using type = BlinkIDVerify::_impl::_impl_DetailDictionary; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_DetailedCheck;

// Type metadata accessor for DetailedCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13DetailedCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV") DetailedCheck final {
public:
  SWIFT_INLINE_THUNK ~DetailedCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13DetailedCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedCheck(const DetailedCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13DetailedCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedCheck &operator =(const DetailedCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13DetailedCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailedCheck &operator =(DetailedCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailedCheck(DetailedCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK CheckType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getName() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV4nameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getResult() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV6resultAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getPerformedChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV15performedChecksSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> getChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV6checksAA0D5ArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getRecommendedOutcome() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV18recommendedOutcomeSSSgvp");
  SWIFT_INLINE_THUNK CertaintyLevel getCertaintyLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV14certaintyLevelAA09CertaintyF0Ovp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify13DetailedCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK DetailedCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailedCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13DetailedCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailedCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailedCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13DetailedCheckVD;
  static inline constexpr $s13BlinkIDVerify13DetailedCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailedCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailedCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailedCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailedCheck returnNewValue(T callable) {
    auto result = DetailedCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13DetailedCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DetailedCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13DetailedCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DetailedCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DetailedCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::DetailedCheck> { using type = BlinkIDVerify::_impl::_impl_DetailedCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV") DetailedStringResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DetailedStringResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV") DetailedDateResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DetailedDateResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DetailedDateResult;

// Type metadata accessor for DetailedDateResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify18DetailedDateResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV") DetailedDateResult final {
public:
  SWIFT_INLINE_THUNK ~DetailedDateResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18DetailedDateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedDateResult(const DetailedDateResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18DetailedDateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedDateResult &operator =(const DetailedDateResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18DetailedDateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailedDateResult &operator =(DetailedDateResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailedDateResult(DetailedDateResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getDay() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV3daySivp");
  SWIFT_INLINE_THUNK swift::Int getMonth() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV5monthSivp");
  SWIFT_INLINE_THUNK swift::Int getYear() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV4yearSivp");
  SWIFT_INLINE_THUNK ResultType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV4typeAA0E4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getField() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV5fieldSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getResults() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV7resultsAA0E5ArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DetailedStringResult>> getOriginalResult() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV08originalE0SayAA0c6StringE0VGSgvp");
  SWIFT_INLINE_THUNK bool getSuccessfullyParsed() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV18successfullyParsedSbvp");
  SWIFT_INLINE_THUNK bool getFilledByDomainKnowledge() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV23filledByDomainKnowledgeSbvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify18DetailedDateResultV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK DetailedDateResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailedDateResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18DetailedDateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailedDateResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailedDateResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify18DetailedDateResultVD;
  static inline constexpr $s13BlinkIDVerify18DetailedDateResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailedDateResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailedDateResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailedDateResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailedDateResult returnNewValue(T callable) {
    auto result = DetailedDateResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify18DetailedDateResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DetailedDateResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify18DetailedDateResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DetailedDateResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DetailedDateResult> = true;
template<>
struct implClassFor<BlinkIDVerify::DetailedDateResult> { using type = BlinkIDVerify::_impl::_impl_DetailedDateResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify12LocationInfoV") LocationInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::LocationInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify4SideO") Side;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Side> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO") VerifyScript;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VerifyScript> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DetailedStringResult;

// Type metadata accessor for DetailedStringResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify20DetailedStringResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV") DetailedStringResult final {
public:
  SWIFT_INLINE_THUNK ~DetailedStringResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20DetailedStringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedStringResult(const DetailedStringResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20DetailedStringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedStringResult &operator =(const DetailedStringResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20DetailedStringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailedStringResult &operator =(DetailedStringResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailedStringResult(DetailedStringResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ResultType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV4typeAA0E4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getField() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV5fieldSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getResults() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV7resultsAA0E5ArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getValue() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV5valueSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<LocationInfo> getLocation() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV8locationAA12LocationInfoVSgvp");
  SWIFT_INLINE_THUNK Side getSide() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV4sideAA4SideOvp");
  SWIFT_INLINE_THUNK VerifyScript getScript() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV6scriptAA12VerifyScriptOvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify20DetailedStringResultV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK DetailedStringResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailedStringResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20DetailedStringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailedStringResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailedStringResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify20DetailedStringResultVD;
  static inline constexpr $s13BlinkIDVerify20DetailedStringResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailedStringResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailedStringResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailedStringResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailedStringResult returnNewValue(T callable) {
    auto result = DetailedStringResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify20DetailedStringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DetailedStringResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify20DetailedStringResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DetailedStringResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DetailedStringResult> = true;
template<>
struct implClassFor<BlinkIDVerify::DetailedStringResult> { using type = BlinkIDVerify::_impl::_impl_DetailedStringResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO") DetectionStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DetectionStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DetectionStatus;

// Type metadata accessor for DetectionStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify15DetectionStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DetectionStatus
extern "C" {
extern unsigned $s13BlinkIDVerify15DetectionStatusO6failedyA2CmFWC;
extern unsigned $s13BlinkIDVerify15DetectionStatusO7successyA2CmFWC;
extern unsigned $s13BlinkIDVerify15DetectionStatusO12cameraTooFaryA2CmFWC;
extern unsigned $s13BlinkIDVerify15DetectionStatusO14cameraTooCloseyA2CmFWC;
extern unsigned $s13BlinkIDVerify15DetectionStatusO19cameraAngleTooSteepyA2CmFWC;
extern unsigned $s13BlinkIDVerify15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC;
extern unsigned $s13BlinkIDVerify15DetectionStatusO24documentPartiallyVisibleyA2CmFWC;
extern unsigned $s13BlinkIDVerify15DetectionStatusO15fallbackSuccessyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO") DetectionStatus final {
public:
  SWIFT_INLINE_THUNK ~DetectionStatus() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionStatus(const DetectionStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionStatus &operator =(const DetectionStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetectionStatus &operator =(DetectionStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetectionStatus(DetectionStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    failed SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO6failedyA2CmF"),
    success SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO7successyA2CmF"),
    cameraTooFar SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO12cameraTooFaryA2CmF"),
    cameraTooClose SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO14cameraTooCloseyA2CmF"),
    cameraAngleTooSteep SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO19cameraAngleTooSteepyA2CmF"),
    documentTooCloseToCameraEdge SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmF"),
    documentPartiallyVisible SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO24documentPartiallyVisibleyA2CmF"),
    fallbackSuccess SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO15fallbackSuccessyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_failed {  // impl struct for case failed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::failed;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } failed SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO6failedyA2CmF");
  SWIFT_INLINE_THUNK bool isFailed() const;

  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } success SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_cameraTooFar {  // impl struct for case cameraTooFar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraTooFar;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraTooFar SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO12cameraTooFaryA2CmF");
  SWIFT_INLINE_THUNK bool isCameraTooFar() const;

  inline const static struct _impl_cameraTooClose {  // impl struct for case cameraTooClose
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraTooClose;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraTooClose SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO14cameraTooCloseyA2CmF");
  SWIFT_INLINE_THUNK bool isCameraTooClose() const;

  inline const static struct _impl_cameraAngleTooSteep {  // impl struct for case cameraAngleTooSteep
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraAngleTooSteep;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraAngleTooSteep SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO19cameraAngleTooSteepyA2CmF");
  SWIFT_INLINE_THUNK bool isCameraAngleTooSteep() const;

  inline const static struct _impl_documentTooCloseToCameraEdge {  // impl struct for case documentTooCloseToCameraEdge
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentTooCloseToCameraEdge;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } documentTooCloseToCameraEdge SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentTooCloseToCameraEdge() const;

  inline const static struct _impl_documentPartiallyVisible {  // impl struct for case documentPartiallyVisible
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentPartiallyVisible;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } documentPartiallyVisible SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO24documentPartiallyVisibleyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentPartiallyVisible() const;

  inline const static struct _impl_fallbackSuccess {  // impl struct for case fallbackSuccess
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fallbackSuccess;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } fallbackSuccess SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO15fallbackSuccessyA2CmF");
  SWIFT_INLINE_THUNK bool isFallbackSuccess() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO6failedyA2CmFWC) return cases::failed;
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO12cameraTooFaryA2CmFWC) return cases::cameraTooFar;
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO14cameraTooCloseyA2CmFWC) return cases::cameraTooClose;
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO19cameraAngleTooSteepyA2CmFWC) return cases::cameraAngleTooSteep;
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC) return cases::documentTooCloseToCameraEdge;
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO24documentPartiallyVisibleyA2CmFWC) return cases::documentPartiallyVisible;
    if (tag == _impl::$s13BlinkIDVerify15DetectionStatusO15fallbackSuccessyA2CmFWC) return cases::fallbackSuccess;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DetectionStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify15DetectionStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DetectionStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetectionStatus _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetectionStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetectionStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify15DetectionStatusOD;
  static inline constexpr $s13BlinkIDVerify15DetectionStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetectionStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetectionStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetectionStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetectionStatus returnNewValue(T callable) {
    auto result = DetectionStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DetectionStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify15DetectionStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DetectionStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DetectionStatus> = true;
template<>
struct implClassFor<BlinkIDVerify::DetectionStatus> { using type = BlinkIDVerify::_impl::_impl_DetectionStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify10DimensionsV") Dimensions;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Dimensions> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_Dimensions;

// Type metadata accessor for Dimensions
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10DimensionsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10DimensionsV") Dimensions final {
public:
  SWIFT_INLINE_THUNK ~Dimensions() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DimensionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Dimensions(const Dimensions &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DimensionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Dimensions &operator =(const Dimensions &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DimensionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Dimensions &operator =(Dimensions &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Dimensions(Dimensions &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<float> getWidth() const SWIFT_SYMBOL("s:13BlinkIDVerify10DimensionsV5widthSfSgvp");
  SWIFT_INLINE_THUNK swift::Optional<float> getHeight() const SWIFT_SYMBOL("s:13BlinkIDVerify10DimensionsV6heightSfSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10DimensionsV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK Dimensions(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Dimensions _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10DimensionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Dimensions(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Dimensions;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10DimensionsVD;
  static inline constexpr $s13BlinkIDVerify10DimensionsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Dimensions {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Dimensions &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Dimensions &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Dimensions returnNewValue(T callable) {
    auto result = Dimensions::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10DimensionsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Dimensions> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10DimensionsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Dimensions> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Dimensions> = true;
template<>
struct implClassFor<BlinkIDVerify::Dimensions> { using type = BlinkIDVerify::_impl::_impl_Dimensions; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO") DocumentImageColorStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DocumentImageColorStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
/// The color status determined from scanned image.
namespace _impl {

class _impl_DocumentImageColorStatus;

// Type metadata accessor for DocumentImageColorStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify24DocumentImageColorStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentImageColorStatus
extern "C" {
extern unsigned $s13BlinkIDVerify24DocumentImageColorStatusO12notAvailableyA2CmFWC;
extern unsigned $s13BlinkIDVerify24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC;
extern unsigned $s13BlinkIDVerify24DocumentImageColorStatusO5coloryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO") DocumentImageColorStatus final {
public:
  SWIFT_INLINE_THUNK ~DocumentImageColorStatus() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus(const DocumentImageColorStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus &operator =(const DocumentImageColorStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus &operator =(DocumentImageColorStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentImageColorStatus(DocumentImageColorStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO12notAvailableyA2CmF"),
    blackAndWhite SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO13blackAndWhiteyA2CmF"),
    color SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO5coloryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_blackAndWhite {  // impl struct for case blackAndWhite
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::blackAndWhite;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } blackAndWhite SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO13blackAndWhiteyA2CmF");
  SWIFT_INLINE_THUNK bool isBlackAndWhite() const;

  inline const static struct _impl_color {  // impl struct for case color
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::color;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } color SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO5coloryA2CmF");
  SWIFT_INLINE_THUNK bool isColor() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify24DocumentImageColorStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s13BlinkIDVerify24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC) return cases::blackAndWhite;
    if (tag == _impl::$s13BlinkIDVerify24DocumentImageColorStatusO5coloryA2CmFWC) return cases::color;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> init(swift::Int rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify24DocumentImageColorStatusO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentImageColorStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentImageColorStatus _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentImageColorStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentImageColorStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify24DocumentImageColorStatusOD;
  static inline constexpr $s13BlinkIDVerify24DocumentImageColorStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentImageColorStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentImageColorStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentImageColorStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentImageColorStatus returnNewValue(T callable) {
    auto result = DocumentImageColorStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DocumentImageColorStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify24DocumentImageColorStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DocumentImageColorStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DocumentImageColorStatus> = true;
template<>
struct implClassFor<BlinkIDVerify::DocumentImageColorStatus> { using type = BlinkIDVerify::_impl::_impl_DocumentImageColorStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO") DocumentLocalizationStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DocumentLocalizationStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
/// Represents the status of document localization during the verification process.
/// This enum indicates the various states and potential issues that can occur
/// during document detection and processing.
namespace _impl {

class _impl_DocumentLocalizationStatus;

// Type metadata accessor for DocumentLocalizationStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify26DocumentLocalizationStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentLocalizationStatus
extern "C" {
extern unsigned $s13BlinkIDVerify26DocumentLocalizationStatusO7successyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentLocalizationStatusO8canceledyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentLocalizationStatusO15detectionFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentLocalizationStatusO12dewarpFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentLocalizationStatusO19blurredFrameSkippedyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentLocalizationStatusO21frameWithGlareSkippedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO") DocumentLocalizationStatus final {
public:
  SWIFT_INLINE_THUNK ~DocumentLocalizationStatus() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus(const DocumentLocalizationStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus &operator =(const DocumentLocalizationStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus &operator =(DocumentLocalizationStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentLocalizationStatus(DocumentLocalizationStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    success SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO7successyA2CmF"),
    canceled SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO8canceledyA2CmF"),
    detectionFailed SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO15detectionFailedyA2CmF"),
    dewarpFailed SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO12dewarpFailedyA2CmF"),
    blurredFrameSkipped SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO19blurredFrameSkippedyA2CmF"),
    frameWithGlareSkipped SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO21frameWithGlareSkippedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK DocumentLocalizationStatus operator()() const;
  } success SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_canceled {  // impl struct for case canceled
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::canceled;
    }
    SWIFT_INLINE_THUNK DocumentLocalizationStatus operator()() const;
  } canceled SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO8canceledyA2CmF");
  SWIFT_INLINE_THUNK bool isCanceled() const;

  inline const static struct _impl_detectionFailed {  // impl struct for case detectionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detectionFailed;
    }
    SWIFT_INLINE_THUNK DocumentLocalizationStatus operator()() const;
  } detectionFailed SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO15detectionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isDetectionFailed() const;

  inline const static struct _impl_dewarpFailed {  // impl struct for case dewarpFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dewarpFailed;
    }
    SWIFT_INLINE_THUNK DocumentLocalizationStatus operator()() const;
  } dewarpFailed SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO12dewarpFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isDewarpFailed() const;

  inline const static struct _impl_blurredFrameSkipped {  // impl struct for case blurredFrameSkipped
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::blurredFrameSkipped;
    }
    SWIFT_INLINE_THUNK DocumentLocalizationStatus operator()() const;
  } blurredFrameSkipped SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO19blurredFrameSkippedyA2CmF");
  SWIFT_INLINE_THUNK bool isBlurredFrameSkipped() const;

  inline const static struct _impl_frameWithGlareSkipped {  // impl struct for case frameWithGlareSkipped
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frameWithGlareSkipped;
    }
    SWIFT_INLINE_THUNK DocumentLocalizationStatus operator()() const;
  } frameWithGlareSkipped SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO21frameWithGlareSkippedyA2CmF");
  SWIFT_INLINE_THUNK bool isFrameWithGlareSkipped() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify26DocumentLocalizationStatusO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s13BlinkIDVerify26DocumentLocalizationStatusO8canceledyA2CmFWC) return cases::canceled;
    if (tag == _impl::$s13BlinkIDVerify26DocumentLocalizationStatusO15detectionFailedyA2CmFWC) return cases::detectionFailed;
    if (tag == _impl::$s13BlinkIDVerify26DocumentLocalizationStatusO12dewarpFailedyA2CmFWC) return cases::dewarpFailed;
    if (tag == _impl::$s13BlinkIDVerify26DocumentLocalizationStatusO19blurredFrameSkippedyA2CmFWC) return cases::blurredFrameSkipped;
    if (tag == _impl::$s13BlinkIDVerify26DocumentLocalizationStatusO21frameWithGlareSkippedyA2CmFWC) return cases::frameWithGlareSkipped;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentLocalizationStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentLocalizationStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentLocalizationStatus _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentLocalizationStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentLocalizationStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify26DocumentLocalizationStatusOD;
  static inline constexpr $s13BlinkIDVerify26DocumentLocalizationStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentLocalizationStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentLocalizationStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentLocalizationStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentLocalizationStatus returnNewValue(T callable) {
    auto result = DocumentLocalizationStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DocumentLocalizationStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify26DocumentLocalizationStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DocumentLocalizationStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DocumentLocalizationStatus> = true;
template<>
struct implClassFor<BlinkIDVerify::DocumentLocalizationStatus> { using type = BlinkIDVerify::_impl::_impl_DocumentLocalizationStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify13QuadrilateralV") Quadrilateral;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Quadrilateral> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify16DocumentLocationV") DocumentLocation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::DocumentLocation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_DocumentLocation;

// Type metadata accessor for DocumentLocation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16DocumentLocationVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16DocumentLocationV") DocumentLocation final {
public:
  SWIFT_INLINE_THUNK ~DocumentLocation() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DocumentLocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentLocation(const DocumentLocation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DocumentLocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentLocation &operator =(const DocumentLocation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DocumentLocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentLocation &operator =(DocumentLocation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentLocation(DocumentLocation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK Quadrilateral getLocation() const SWIFT_SYMBOL("s:13BlinkIDVerify16DocumentLocationV8locationAA13QuadrilateralVvp");
  SWIFT_INLINE_THUNK CardOrientation getOrientation() const SWIFT_SYMBOL("s:13BlinkIDVerify16DocumentLocationV11orientationAA15CardOrientationOvp");
private:
  SWIFT_INLINE_THUNK DocumentLocation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentLocation _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16DocumentLocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentLocation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentLocation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16DocumentLocationVD;
  static inline constexpr $s13BlinkIDVerify16DocumentLocationVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentLocation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentLocation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentLocation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentLocation returnNewValue(T callable) {
    auto result = DocumentLocation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16DocumentLocationVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DocumentLocation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16DocumentLocationVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DocumentLocation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DocumentLocation> = true;
template<>
struct implClassFor<BlinkIDVerify::DocumentLocation> { using type = BlinkIDVerify::_impl::_impl_DocumentLocation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

/// Document type.
namespace _impl {

class _impl_DocumentType;

// Type metadata accessor for DocumentType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12DocumentTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentType
extern "C" {
extern unsigned $s13BlinkIDVerify12DocumentTypeO4noneyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO10consularIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO2dlyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO20dlPublicServicesCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO14employmentPassyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO7finCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO2idyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO14multipurposeIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO5myKadyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO5myKidyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO4myPRyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO9myTenterayA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO7panCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO14professionalIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO18publicServicesCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO15residencePermityA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO10residentIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO24temporaryResidencePermityA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO7voterIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO10workPermityA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO4iKadyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO10militaryIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO5myKasyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO18socialSecurityCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO19healthInsuranceCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO8passportyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO5sPassyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO11addressCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO7alienIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO13alienPassportyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO9greenCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO8minorsIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO8postalIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO14professionalDlyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO5taxIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO12weaponPermityA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO4visayA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO18borderCrossingCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO10driverCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO15globalEntryCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO7mypolisyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO9nexusCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO12passportCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO14proofOfAgeCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO9refugeeIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO8tribalIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO9veteranIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO22citizenshipCertificateyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO12myNumberCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO16consularPassportyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO14minorsPassportyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO24minorsPublicServicesCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO20drivingPrivilegeCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO13asylumRequestyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO23driverQualificationCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO13provisionalDlyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO15refugeePassportyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO9specialIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO19uniformedServicesIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO13immigrantVisayA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO15consularVoterIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO8twicCardyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO15exitEntryPermityA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO12nbiClearanceyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO19proofOfRegistrationyA2CmFWC;
extern unsigned $s13BlinkIDVerify12DocumentTypeO25temporaryProtectionPermityA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO") DocumentType final {
public:
  SWIFT_INLINE_THUNK ~DocumentType() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentType(const DocumentType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentType &operator =(const DocumentType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentType &operator =(DocumentType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentType(DocumentType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4noneyA2CmF"),
    consularId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10consularIdyA2CmF"),
    dl SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO2dlyA2CmF"),
    dlPublicServicesCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO20dlPublicServicesCardyA2CmF"),
    employmentPass SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14employmentPassyA2CmF"),
    finCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7finCardyA2CmF"),
    id SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO2idyA2CmF"),
    multipurposeId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14multipurposeIdyA2CmF"),
    myKad SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5myKadyA2CmF"),
    myKid SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5myKidyA2CmF"),
    myPR SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4myPRyA2CmF"),
    myTentera SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9myTenterayA2CmF"),
    panCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7panCardyA2CmF"),
    professionalId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14professionalIdyA2CmF"),
    publicServicesCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO18publicServicesCardyA2CmF"),
    residencePermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15residencePermityA2CmF"),
    residentId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10residentIdyA2CmF"),
    temporaryResidencePermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO24temporaryResidencePermityA2CmF"),
    voterId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7voterIdyA2CmF"),
    workPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10workPermityA2CmF"),
    iKad SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4iKadyA2CmF"),
    militaryId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10militaryIdyA2CmF"),
    myKas SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5myKasyA2CmF"),
    socialSecurityCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO18socialSecurityCardyA2CmF"),
    healthInsuranceCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO19healthInsuranceCardyA2CmF"),
    passport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8passportyA2CmF"),
    sPass SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5sPassyA2CmF"),
    addressCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO11addressCardyA2CmF"),
    alienId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7alienIdyA2CmF"),
    alienPassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13alienPassportyA2CmF"),
    greenCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9greenCardyA2CmF"),
    minorsId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8minorsIdyA2CmF"),
    postalId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8postalIdyA2CmF"),
    professionalDl SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14professionalDlyA2CmF"),
    taxId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5taxIdyA2CmF"),
    weaponPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12weaponPermityA2CmF"),
    visa SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4visayA2CmF"),
    borderCrossingCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO18borderCrossingCardyA2CmF"),
    driverCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10driverCardyA2CmF"),
    globalEntryCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15globalEntryCardyA2CmF"),
    mypolis SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7mypolisyA2CmF"),
    nexusCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9nexusCardyA2CmF"),
    passportCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12passportCardyA2CmF"),
    proofOfAgeCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14proofOfAgeCardyA2CmF"),
    refugeeId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9refugeeIdyA2CmF"),
    tribalId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8tribalIdyA2CmF"),
    veteranId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9veteranIdyA2CmF"),
    citizenshipCertificate SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO22citizenshipCertificateyA2CmF"),
    myNumberCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12myNumberCardyA2CmF"),
    consularPassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO16consularPassportyA2CmF"),
    minorsPassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14minorsPassportyA2CmF"),
    minorsPublicServicesCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO24minorsPublicServicesCardyA2CmF"),
    drivingPrivilegeCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO20drivingPrivilegeCardyA2CmF"),
    asylumRequest SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13asylumRequestyA2CmF"),
    driverQualificationCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO23driverQualificationCardyA2CmF"),
    provisionalDl SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13provisionalDlyA2CmF"),
    refugeePassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15refugeePassportyA2CmF"),
    specialId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9specialIdyA2CmF"),
    uniformedServicesId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO19uniformedServicesIdyA2CmF"),
    immigrantVisa SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13immigrantVisayA2CmF"),
    consularVoterId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15consularVoterIdyA2CmF"),
    twicCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8twicCardyA2CmF"),
    exitEntryPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15exitEntryPermityA2CmF"),
    mainlandTravelPermitTaiwan SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmF"),
    nbiClearance SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12nbiClearanceyA2CmF"),
    proofOfRegistration SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO19proofOfRegistrationyA2CmF"),
    temporaryProtectionPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO25temporaryProtectionPermityA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } none SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_consularId {  // impl struct for case consularId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10consularIdyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularId() const;

  inline const static struct _impl_dl {  // impl struct for case dl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } dl SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO2dlyA2CmF");
  SWIFT_INLINE_THUNK bool isDl() const;

  inline const static struct _impl_dlPublicServicesCard {  // impl struct for case dlPublicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dlPublicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } dlPublicServicesCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO20dlPublicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDlPublicServicesCard() const;

  inline const static struct _impl_employmentPass {  // impl struct for case employmentPass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::employmentPass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } employmentPass SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14employmentPassyA2CmF");
  SWIFT_INLINE_THUNK bool isEmploymentPass() const;

  inline const static struct _impl_finCard {  // impl struct for case finCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::finCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } finCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7finCardyA2CmF");
  SWIFT_INLINE_THUNK bool isFinCard() const;

  inline const static struct _impl_id {  // impl struct for case id
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::id;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } id SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO2idyA2CmF");
  SWIFT_INLINE_THUNK bool isId() const;

  inline const static struct _impl_multipurposeId {  // impl struct for case multipurposeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::multipurposeId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } multipurposeId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14multipurposeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMultipurposeId() const;

  inline const static struct _impl_myKad {  // impl struct for case myKad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKad;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKad SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5myKadyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKad() const;

  inline const static struct _impl_myKid {  // impl struct for case myKid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKid;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKid SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5myKidyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKid() const;

  inline const static struct _impl_myPR {  // impl struct for case myPR
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myPR;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myPR SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4myPRyA2CmF");
  SWIFT_INLINE_THUNK bool isMyPR() const;

  inline const static struct _impl_myTentera {  // impl struct for case myTentera
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myTentera;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myTentera SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9myTenterayA2CmF");
  SWIFT_INLINE_THUNK bool isMyTentera() const;

  inline const static struct _impl_panCard {  // impl struct for case panCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::panCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } panCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7panCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPanCard() const;

  inline const static struct _impl_professionalId {  // impl struct for case professionalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::professionalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } professionalId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14professionalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isProfessionalId() const;

  inline const static struct _impl_publicServicesCard {  // impl struct for case publicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::publicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } publicServicesCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO18publicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPublicServicesCard() const;

  inline const static struct _impl_residencePermit {  // impl struct for case residencePermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residencePermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } residencePermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15residencePermityA2CmF");
  SWIFT_INLINE_THUNK bool isResidencePermit() const;

  inline const static struct _impl_residentId {  // impl struct for case residentId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residentId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } residentId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10residentIdyA2CmF");
  SWIFT_INLINE_THUNK bool isResidentId() const;

  inline const static struct _impl_temporaryResidencePermit {  // impl struct for case temporaryResidencePermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::temporaryResidencePermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } temporaryResidencePermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO24temporaryResidencePermityA2CmF");
  SWIFT_INLINE_THUNK bool isTemporaryResidencePermit() const;

  inline const static struct _impl_voterId {  // impl struct for case voterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::voterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } voterId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7voterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isVoterId() const;

  inline const static struct _impl_workPermit {  // impl struct for case workPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::workPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } workPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10workPermityA2CmF");
  SWIFT_INLINE_THUNK bool isWorkPermit() const;

  inline const static struct _impl_iKad {  // impl struct for case iKad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iKad;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } iKad SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4iKadyA2CmF");
  SWIFT_INLINE_THUNK bool isIKad() const;

  inline const static struct _impl_militaryId {  // impl struct for case militaryId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::militaryId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } militaryId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10militaryIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMilitaryId() const;

  inline const static struct _impl_myKas {  // impl struct for case myKas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKas;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKas SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5myKasyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKas() const;

  inline const static struct _impl_socialSecurityCard {  // impl struct for case socialSecurityCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::socialSecurityCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } socialSecurityCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO18socialSecurityCardyA2CmF");
  SWIFT_INLINE_THUNK bool isSocialSecurityCard() const;

  inline const static struct _impl_healthInsuranceCard {  // impl struct for case healthInsuranceCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::healthInsuranceCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } healthInsuranceCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO19healthInsuranceCardyA2CmF");
  SWIFT_INLINE_THUNK bool isHealthInsuranceCard() const;

  inline const static struct _impl_passport {  // impl struct for case passport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } passport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8passportyA2CmF");
  SWIFT_INLINE_THUNK bool isPassport() const;

  inline const static struct _impl_sPass {  // impl struct for case sPass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sPass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } sPass SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5sPassyA2CmF");
  SWIFT_INLINE_THUNK bool isSPass() const;

  inline const static struct _impl_addressCard {  // impl struct for case addressCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } addressCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO11addressCardyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressCard() const;

  inline const static struct _impl_alienId {  // impl struct for case alienId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alienId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } alienId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7alienIdyA2CmF");
  SWIFT_INLINE_THUNK bool isAlienId() const;

  inline const static struct _impl_alienPassport {  // impl struct for case alienPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alienPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } alienPassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13alienPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isAlienPassport() const;

  inline const static struct _impl_greenCard {  // impl struct for case greenCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } greenCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9greenCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenCard() const;

  inline const static struct _impl_minorsId {  // impl struct for case minorsId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8minorsIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsId() const;

  inline const static struct _impl_postalId {  // impl struct for case postalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::postalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } postalId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8postalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isPostalId() const;

  inline const static struct _impl_professionalDl {  // impl struct for case professionalDl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::professionalDl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } professionalDl SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14professionalDlyA2CmF");
  SWIFT_INLINE_THUNK bool isProfessionalDl() const;

  inline const static struct _impl_taxId {  // impl struct for case taxId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::taxId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } taxId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO5taxIdyA2CmF");
  SWIFT_INLINE_THUNK bool isTaxId() const;

  inline const static struct _impl_weaponPermit {  // impl struct for case weaponPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weaponPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } weaponPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12weaponPermityA2CmF");
  SWIFT_INLINE_THUNK bool isWeaponPermit() const;

  inline const static struct _impl_visa {  // impl struct for case visa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visa;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } visa SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO4visayA2CmF");
  SWIFT_INLINE_THUNK bool isVisa() const;

  inline const static struct _impl_borderCrossingCard {  // impl struct for case borderCrossingCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::borderCrossingCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } borderCrossingCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO18borderCrossingCardyA2CmF");
  SWIFT_INLINE_THUNK bool isBorderCrossingCard() const;

  inline const static struct _impl_driverCard {  // impl struct for case driverCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } driverCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO10driverCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverCard() const;

  inline const static struct _impl_globalEntryCard {  // impl struct for case globalEntryCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::globalEntryCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } globalEntryCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15globalEntryCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGlobalEntryCard() const;

  inline const static struct _impl_mypolis {  // impl struct for case mypolis
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mypolis;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } mypolis SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO7mypolisyA2CmF");
  SWIFT_INLINE_THUNK bool isMypolis() const;

  inline const static struct _impl_nexusCard {  // impl struct for case nexusCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nexusCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nexusCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9nexusCardyA2CmF");
  SWIFT_INLINE_THUNK bool isNexusCard() const;

  inline const static struct _impl_passportCard {  // impl struct for case passportCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passportCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } passportCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12passportCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPassportCard() const;

  inline const static struct _impl_proofOfAgeCard {  // impl struct for case proofOfAgeCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::proofOfAgeCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } proofOfAgeCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14proofOfAgeCardyA2CmF");
  SWIFT_INLINE_THUNK bool isProofOfAgeCard() const;

  inline const static struct _impl_refugeeId {  // impl struct for case refugeeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::refugeeId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } refugeeId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9refugeeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isRefugeeId() const;

  inline const static struct _impl_tribalId {  // impl struct for case tribalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tribalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } tribalId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8tribalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isTribalId() const;

  inline const static struct _impl_veteranId {  // impl struct for case veteranId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veteranId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } veteranId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9veteranIdyA2CmF");
  SWIFT_INLINE_THUNK bool isVeteranId() const;

  inline const static struct _impl_citizenshipCertificate {  // impl struct for case citizenshipCertificate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::citizenshipCertificate;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } citizenshipCertificate SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO22citizenshipCertificateyA2CmF");
  SWIFT_INLINE_THUNK bool isCitizenshipCertificate() const;

  inline const static struct _impl_myNumberCard {  // impl struct for case myNumberCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myNumberCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myNumberCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12myNumberCardyA2CmF");
  SWIFT_INLINE_THUNK bool isMyNumberCard() const;

  inline const static struct _impl_consularPassport {  // impl struct for case consularPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularPassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO16consularPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularPassport() const;

  inline const static struct _impl_minorsPassport {  // impl struct for case minorsPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsPassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO14minorsPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsPassport() const;

  inline const static struct _impl_minorsPublicServicesCard {  // impl struct for case minorsPublicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsPublicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsPublicServicesCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO24minorsPublicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsPublicServicesCard() const;

  inline const static struct _impl_drivingPrivilegeCard {  // impl struct for case drivingPrivilegeCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::drivingPrivilegeCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } drivingPrivilegeCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO20drivingPrivilegeCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDrivingPrivilegeCard() const;

  inline const static struct _impl_asylumRequest {  // impl struct for case asylumRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::asylumRequest;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } asylumRequest SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13asylumRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isAsylumRequest() const;

  inline const static struct _impl_driverQualificationCard {  // impl struct for case driverQualificationCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverQualificationCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } driverQualificationCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO23driverQualificationCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverQualificationCard() const;

  inline const static struct _impl_provisionalDl {  // impl struct for case provisionalDl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::provisionalDl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } provisionalDl SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13provisionalDlyA2CmF");
  SWIFT_INLINE_THUNK bool isProvisionalDl() const;

  inline const static struct _impl_refugeePassport {  // impl struct for case refugeePassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::refugeePassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } refugeePassport SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15refugeePassportyA2CmF");
  SWIFT_INLINE_THUNK bool isRefugeePassport() const;

  inline const static struct _impl_specialId {  // impl struct for case specialId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::specialId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } specialId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO9specialIdyA2CmF");
  SWIFT_INLINE_THUNK bool isSpecialId() const;

  inline const static struct _impl_uniformedServicesId {  // impl struct for case uniformedServicesId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uniformedServicesId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } uniformedServicesId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO19uniformedServicesIdyA2CmF");
  SWIFT_INLINE_THUNK bool isUniformedServicesId() const;

  inline const static struct _impl_immigrantVisa {  // impl struct for case immigrantVisa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::immigrantVisa;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } immigrantVisa SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO13immigrantVisayA2CmF");
  SWIFT_INLINE_THUNK bool isImmigrantVisa() const;

  inline const static struct _impl_consularVoterId {  // impl struct for case consularVoterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularVoterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularVoterId SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15consularVoterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularVoterId() const;

  inline const static struct _impl_twicCard {  // impl struct for case twicCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::twicCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } twicCard SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8twicCardyA2CmF");
  SWIFT_INLINE_THUNK bool isTwicCard() const;

  inline const static struct _impl_exitEntryPermit {  // impl struct for case exitEntryPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::exitEntryPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } exitEntryPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO15exitEntryPermityA2CmF");
  SWIFT_INLINE_THUNK bool isExitEntryPermit() const;

  inline const static struct _impl_mainlandTravelPermitTaiwan {  // impl struct for case mainlandTravelPermitTaiwan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mainlandTravelPermitTaiwan;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } mainlandTravelPermitTaiwan SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmF");
  SWIFT_INLINE_THUNK bool isMainlandTravelPermitTaiwan() const;

  inline const static struct _impl_nbiClearance {  // impl struct for case nbiClearance
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nbiClearance;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nbiClearance SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO12nbiClearanceyA2CmF");
  SWIFT_INLINE_THUNK bool isNbiClearance() const;

  inline const static struct _impl_proofOfRegistration {  // impl struct for case proofOfRegistration
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::proofOfRegistration;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } proofOfRegistration SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO19proofOfRegistrationyA2CmF");
  SWIFT_INLINE_THUNK bool isProofOfRegistration() const;

  inline const static struct _impl_temporaryProtectionPermit {  // impl struct for case temporaryProtectionPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::temporaryProtectionPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } temporaryProtectionPermit SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO25temporaryProtectionPermityA2CmF");
  SWIFT_INLINE_THUNK bool isTemporaryProtectionPermit() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO10consularIdyA2CmFWC) return cases::consularId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO2dlyA2CmFWC) return cases::dl;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO20dlPublicServicesCardyA2CmFWC) return cases::dlPublicServicesCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO14employmentPassyA2CmFWC) return cases::employmentPass;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO7finCardyA2CmFWC) return cases::finCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO2idyA2CmFWC) return cases::id;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO14multipurposeIdyA2CmFWC) return cases::multipurposeId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO5myKadyA2CmFWC) return cases::myKad;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO5myKidyA2CmFWC) return cases::myKid;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO4myPRyA2CmFWC) return cases::myPR;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO9myTenterayA2CmFWC) return cases::myTentera;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO7panCardyA2CmFWC) return cases::panCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO14professionalIdyA2CmFWC) return cases::professionalId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO18publicServicesCardyA2CmFWC) return cases::publicServicesCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO15residencePermityA2CmFWC) return cases::residencePermit;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO10residentIdyA2CmFWC) return cases::residentId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO24temporaryResidencePermityA2CmFWC) return cases::temporaryResidencePermit;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO7voterIdyA2CmFWC) return cases::voterId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO10workPermityA2CmFWC) return cases::workPermit;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO4iKadyA2CmFWC) return cases::iKad;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO10militaryIdyA2CmFWC) return cases::militaryId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO5myKasyA2CmFWC) return cases::myKas;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO18socialSecurityCardyA2CmFWC) return cases::socialSecurityCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO19healthInsuranceCardyA2CmFWC) return cases::healthInsuranceCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO8passportyA2CmFWC) return cases::passport;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO5sPassyA2CmFWC) return cases::sPass;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO11addressCardyA2CmFWC) return cases::addressCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO7alienIdyA2CmFWC) return cases::alienId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO13alienPassportyA2CmFWC) return cases::alienPassport;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO9greenCardyA2CmFWC) return cases::greenCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO8minorsIdyA2CmFWC) return cases::minorsId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO8postalIdyA2CmFWC) return cases::postalId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO14professionalDlyA2CmFWC) return cases::professionalDl;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO5taxIdyA2CmFWC) return cases::taxId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO12weaponPermityA2CmFWC) return cases::weaponPermit;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO4visayA2CmFWC) return cases::visa;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO18borderCrossingCardyA2CmFWC) return cases::borderCrossingCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO10driverCardyA2CmFWC) return cases::driverCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO15globalEntryCardyA2CmFWC) return cases::globalEntryCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO7mypolisyA2CmFWC) return cases::mypolis;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO9nexusCardyA2CmFWC) return cases::nexusCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO12passportCardyA2CmFWC) return cases::passportCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO14proofOfAgeCardyA2CmFWC) return cases::proofOfAgeCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO9refugeeIdyA2CmFWC) return cases::refugeeId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO8tribalIdyA2CmFWC) return cases::tribalId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO9veteranIdyA2CmFWC) return cases::veteranId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO22citizenshipCertificateyA2CmFWC) return cases::citizenshipCertificate;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO12myNumberCardyA2CmFWC) return cases::myNumberCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO16consularPassportyA2CmFWC) return cases::consularPassport;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO14minorsPassportyA2CmFWC) return cases::minorsPassport;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO24minorsPublicServicesCardyA2CmFWC) return cases::minorsPublicServicesCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO20drivingPrivilegeCardyA2CmFWC) return cases::drivingPrivilegeCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO13asylumRequestyA2CmFWC) return cases::asylumRequest;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO23driverQualificationCardyA2CmFWC) return cases::driverQualificationCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO13provisionalDlyA2CmFWC) return cases::provisionalDl;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO15refugeePassportyA2CmFWC) return cases::refugeePassport;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO9specialIdyA2CmFWC) return cases::specialId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO19uniformedServicesIdyA2CmFWC) return cases::uniformedServicesId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO13immigrantVisayA2CmFWC) return cases::immigrantVisa;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO15consularVoterIdyA2CmFWC) return cases::consularVoterId;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO8twicCardyA2CmFWC) return cases::twicCard;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO15exitEntryPermityA2CmFWC) return cases::exitEntryPermit;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC) return cases::mainlandTravelPermitTaiwan;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO12nbiClearanceyA2CmFWC) return cases::nbiClearance;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO19proofOfRegistrationyA2CmFWC) return cases::proofOfRegistration;
    if (tag == _impl::$s13BlinkIDVerify12DocumentTypeO25temporaryProtectionPermityA2CmFWC) return cases::temporaryProtectionPermit;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify12DocumentTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DocumentType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentType _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12DocumentTypeOD;
  static inline constexpr $s13BlinkIDVerify12DocumentTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentType returnNewValue(T callable) {
    auto result = DocumentType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DocumentType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12DocumentTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DocumentType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DocumentType> = true;
template<>
struct implClassFor<BlinkIDVerify::DocumentType> { using type = BlinkIDVerify::_impl::_impl_DocumentType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_DocumentVerificationPolicy;

// Type metadata accessor for DocumentVerificationPolicy
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify26DocumentVerificationPolicyOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentVerificationPolicy
extern "C" {
extern unsigned $s13BlinkIDVerify26DocumentVerificationPolicyO10permissiveyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentVerificationPolicyO8standardyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentVerificationPolicyO6strictyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentVerificationPolicyO10veryStrictyA2CmFWC;
extern unsigned $s13BlinkIDVerify26DocumentVerificationPolicyO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO") DocumentVerificationPolicy final {
public:
  SWIFT_INLINE_THUNK ~DocumentVerificationPolicy() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy(const DocumentVerificationPolicy &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy &operator =(const DocumentVerificationPolicy &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy &operator =(DocumentVerificationPolicy &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentVerificationPolicy(DocumentVerificationPolicy &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    permissive SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO10permissiveyA2CmF"),
    standard SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO8standardyA2CmF"),
    strict SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO6strictyA2CmF"),
    veryStrict SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO10veryStrictyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_permissive {  // impl struct for case permissive
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::permissive;
    }
    SWIFT_INLINE_THUNK DocumentVerificationPolicy operator()() const;
  } permissive SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO10permissiveyA2CmF");
  SWIFT_INLINE_THUNK bool isPermissive() const;

  inline const static struct _impl_standard {  // impl struct for case standard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standard;
    }
    SWIFT_INLINE_THUNK DocumentVerificationPolicy operator()() const;
  } standard SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO8standardyA2CmF");
  SWIFT_INLINE_THUNK bool isStandard() const;

  inline const static struct _impl_strict {  // impl struct for case strict
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::strict;
    }
    SWIFT_INLINE_THUNK DocumentVerificationPolicy operator()() const;
  } strict SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO6strictyA2CmF");
  SWIFT_INLINE_THUNK bool isStrict() const;

  inline const static struct _impl_veryStrict {  // impl struct for case veryStrict
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veryStrict;
    }
    SWIFT_INLINE_THUNK DocumentVerificationPolicy operator()() const;
  } veryStrict SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO10veryStrictyA2CmF");
  SWIFT_INLINE_THUNK bool isVeryStrict() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK DocumentVerificationPolicy operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO10permissiveyA2CmFWC) return cases::permissive;
    if (tag == _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO8standardyA2CmFWC) return cases::standard;
    if (tag == _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO6strictyA2CmFWC) return cases::strict;
    if (tag == _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO10veryStrictyA2CmFWC) return cases::veryStrict;
    if (tag == _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO2idSSvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO11descriptionSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<DocumentVerificationPolicy> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify26DocumentVerificationPolicyO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DocumentVerificationPolicy(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentVerificationPolicy _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentVerificationPolicy(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentVerificationPolicy;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify26DocumentVerificationPolicyOD;
  static inline constexpr $s13BlinkIDVerify26DocumentVerificationPolicyOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentVerificationPolicy {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentVerificationPolicy &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentVerificationPolicy &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentVerificationPolicy returnNewValue(T callable) {
    auto result = DocumentVerificationPolicy::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::DocumentVerificationPolicy> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify26DocumentVerificationPolicyOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::DocumentVerificationPolicy> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::DocumentVerificationPolicy> = true;
template<>
struct implClassFor<BlinkIDVerify::DocumentVerificationPolicy> { using type = BlinkIDVerify::_impl::_impl_DocumentVerificationPolicy; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO") ImageOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_EncodedImage;

// Type metadata accessor for EncodedImage
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12EncodedImageVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12EncodedImageV") EncodedImage final {
public:
  SWIFT_INLINE_THUNK ~EncodedImage() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12EncodedImageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK EncodedImage(const EncodedImage &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12EncodedImageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK EncodedImage &operator =(const EncodedImage &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12EncodedImageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK EncodedImage &operator =(EncodedImage &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER EncodedImage(EncodedImage &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ImageOrientation getOrientation() const SWIFT_SYMBOL("s:13BlinkIDVerify12EncodedImageV11orientationAA0D11OrientationOvp");
  SWIFT_INLINE_THUNK UIImage *_Nullable getUiImage() const SWIFT_SYMBOL("s:13BlinkIDVerify12EncodedImageV02uiD0So7UIImageCSgvp");
private:
  SWIFT_INLINE_THUNK EncodedImage(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK EncodedImage _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12EncodedImageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return EncodedImage(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_EncodedImage;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12EncodedImageVD;
  static inline constexpr $s13BlinkIDVerify12EncodedImageVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_EncodedImage {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(EncodedImage &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const EncodedImage &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER EncodedImage returnNewValue(T callable) {
    auto result = EncodedImage::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12EncodedImageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::EncodedImage> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12EncodedImageVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::EncodedImage> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::EncodedImage> = true;
template<>
struct implClassFor<BlinkIDVerify::EncodedImage> { using type = BlinkIDVerify::_impl::_impl_EncodedImage; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


class SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO") ResultState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ResultState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify9VizResultV") VizResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VizResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_Extraction;

// Type metadata accessor for Extraction
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10ExtractionVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV") Extraction final {
public:
  SWIFT_INLINE_THUNK ~Extraction() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ExtractionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Extraction(const Extraction &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ExtractionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Extraction &operator =(const Extraction &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ExtractionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Extraction &operator =(Extraction &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Extraction(Extraction &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ProcessingStatus getProcessingStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV16processingStatusAA010ProcessingE0Ovp");
  SWIFT_INLINE_THUNK ResultState getRecognitionStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV17recognitionStatusAA11ResultStateOvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV7overallAA11ResultArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<VizResult> getViz() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV3vizAA9VizResultVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getMrz() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV3mrzAA11ResultArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getBarcode() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV7barcodeAA11ResultArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ClassInfo> getClassInfo() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV9classInfoAA05ClassE0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<AdditionalProcessingInfo> getAdditionalInfo() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV14additionalInfoAA020AdditionalProcessingE0VSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10ExtractionV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK Extraction(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Extraction _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ExtractionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Extraction(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Extraction;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10ExtractionVD;
  static inline constexpr $s13BlinkIDVerify10ExtractionVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Extraction {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Extraction &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Extraction &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Extraction returnNewValue(T callable) {
    auto result = Extraction::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10ExtractionVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Extraction> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10ExtractionVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Extraction> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Extraction> = true;
template<>
struct implClassFor<BlinkIDVerify::Extraction> { using type = BlinkIDVerify::_impl::_impl_Extraction; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO") FieldType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::FieldType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_FieldCheck;

// Type metadata accessor for FieldCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10FieldCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV") FieldCheck final {
public:
  SWIFT_INLINE_THUNK ~FieldCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10FieldCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldCheck(const FieldCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10FieldCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldCheck &operator =(const FieldCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10FieldCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldCheck &operator =(FieldCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldCheck(FieldCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK CheckType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getName() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV4nameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getResult() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV6resultAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getPerformedChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV15performedChecksSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> getChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV6checksAA0D5ArrayVSgvp");
  SWIFT_INLINE_THUNK FieldType getField() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV5fieldAA0C4TypeOvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10FieldCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK FieldCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10FieldCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10FieldCheckVD;
  static inline constexpr $s13BlinkIDVerify10FieldCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldCheck returnNewValue(T callable) {
    auto result = FieldCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10FieldCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::FieldCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10FieldCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::FieldCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::FieldCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::FieldCheck> { using type = BlinkIDVerify::_impl::_impl_FieldCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_FieldType;

// Type metadata accessor for FieldType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify9FieldTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum FieldType
extern "C" {
extern unsigned $s13BlinkIDVerify9FieldTypeO28additionalAddressInformationyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO25additionalNameInformationyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO26additionalPersonalIdNumberyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO7addressyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO18classEffectiveDateyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO15classExpiryDateyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO10conditionsyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO11dateOfBirthyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO12dateOfExpiryyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO11dateOfIssueyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO24documentAdditionalNumberyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO14documentNumberyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO8employeryA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO12endorsementsyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO11fathersNameyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO9firstNameyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO8fullNameyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO16issuingAuthorityyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO8lastNameyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO07licenceD0yA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO13localizedNameyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO13maritalStatusyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO11mothersNameyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO3mrzyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO11nationalityyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO16personalIdNumberyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO12placeOfBirthyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO10professionyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO4raceyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO8religionyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO17residentialStatusyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO12restrictionsyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO3sexyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO12vehicleClassyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO05bloodD0yA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO7sponsoryA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO04visaD0yA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO15numberOfEntriesyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO14durationOfStayyA2CmFWC;
extern unsigned $s13BlinkIDVerify9FieldTypeO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO") FieldType final {
public:
  SWIFT_INLINE_THUNK ~FieldType() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldType(const FieldType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldType &operator =(const FieldType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldType &operator =(FieldType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldType(FieldType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    additionalAddressInformation SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO28additionalAddressInformationyA2CmF"),
    additionalNameInformation SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO25additionalNameInformationyA2CmF"),
    additionalOptionalAddressInformation SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO36additionalOptionalAddressInformationyA2CmF"),
    additionalPersonalIdNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO26additionalPersonalIdNumberyA2CmF"),
    address SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO7addressyA2CmF"),
    classEffectiveDate SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO18classEffectiveDateyA2CmF"),
    classExpiryDate SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO15classExpiryDateyA2CmF"),
    conditions SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO10conditionsyA2CmF"),
    dateOfBirth SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11dateOfBirthyA2CmF"),
    dateOfExpiry SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12dateOfExpiryyA2CmF"),
    dateOfIssue SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11dateOfIssueyA2CmF"),
    documentAdditionalNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO24documentAdditionalNumberyA2CmF"),
    documentOptionalAdditionalNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO32documentOptionalAdditionalNumberyA2CmF"),
    documentNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO14documentNumberyA2CmF"),
    employer SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8employeryA2CmF"),
    endorsements SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12endorsementsyA2CmF"),
    fathersName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11fathersNameyA2CmF"),
    firstName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO9firstNameyA2CmF"),
    fullName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8fullNameyA2CmF"),
    issuingAuthority SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO16issuingAuthorityyA2CmF"),
    lastName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8lastNameyA2CmF"),
    licenceType SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO07licenceD0yA2CmF"),
    localizedName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO13localizedNameyA2CmF"),
    maritalStatus SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO13maritalStatusyA2CmF"),
    mothersName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11mothersNameyA2CmF"),
    mrz SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO3mrzyA2CmF"),
    nationality SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11nationalityyA2CmF"),
    personalIdNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO16personalIdNumberyA2CmF"),
    placeOfBirth SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12placeOfBirthyA2CmF"),
    profession SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO10professionyA2CmF"),
    race SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO4raceyA2CmF"),
    religion SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8religionyA2CmF"),
    residentialStatus SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO17residentialStatusyA2CmF"),
    restrictions SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12restrictionsyA2CmF"),
    sex SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO3sexyA2CmF"),
    vehicleClass SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12vehicleClassyA2CmF"),
    bloodType SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO05bloodD0yA2CmF"),
    sponsor SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO7sponsoryA2CmF"),
    visaType SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO04visaD0yA2CmF"),
    numberOfEntries SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO15numberOfEntriesyA2CmF"),
    durationOfStay SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO14durationOfStayyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_additionalAddressInformation {  // impl struct for case additionalAddressInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalAddressInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalAddressInformation SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO28additionalAddressInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalAddressInformation() const;

  inline const static struct _impl_additionalNameInformation {  // impl struct for case additionalNameInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalNameInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalNameInformation SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO25additionalNameInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalNameInformation() const;

  inline const static struct _impl_additionalOptionalAddressInformation {  // impl struct for case additionalOptionalAddressInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalOptionalAddressInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalOptionalAddressInformation SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO36additionalOptionalAddressInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalOptionalAddressInformation() const;

  inline const static struct _impl_additionalPersonalIdNumber {  // impl struct for case additionalPersonalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalPersonalIdNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalPersonalIdNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO26additionalPersonalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalPersonalIdNumber() const;

  inline const static struct _impl_address {  // impl struct for case address
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::address;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } address SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO7addressyA2CmF");
  SWIFT_INLINE_THUNK bool isAddress() const;

  inline const static struct _impl_classEffectiveDate {  // impl struct for case classEffectiveDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::classEffectiveDate;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } classEffectiveDate SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO18classEffectiveDateyA2CmF");
  SWIFT_INLINE_THUNK bool isClassEffectiveDate() const;

  inline const static struct _impl_classExpiryDate {  // impl struct for case classExpiryDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::classExpiryDate;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } classExpiryDate SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO15classExpiryDateyA2CmF");
  SWIFT_INLINE_THUNK bool isClassExpiryDate() const;

  inline const static struct _impl_conditions {  // impl struct for case conditions
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::conditions;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } conditions SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO10conditionsyA2CmF");
  SWIFT_INLINE_THUNK bool isConditions() const;

  inline const static struct _impl_dateOfBirth {  // impl struct for case dateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfBirth SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11dateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfBirth() const;

  inline const static struct _impl_dateOfExpiry {  // impl struct for case dateOfExpiry
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfExpiry;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfExpiry SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12dateOfExpiryyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfExpiry() const;

  inline const static struct _impl_dateOfIssue {  // impl struct for case dateOfIssue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfIssue;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfIssue SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11dateOfIssueyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfIssue() const;

  inline const static struct _impl_documentAdditionalNumber {  // impl struct for case documentAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentAdditionalNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentAdditionalNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO24documentAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentAdditionalNumber() const;

  inline const static struct _impl_documentOptionalAdditionalNumber {  // impl struct for case documentOptionalAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentOptionalAdditionalNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentOptionalAdditionalNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO32documentOptionalAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentOptionalAdditionalNumber() const;

  inline const static struct _impl_documentNumber {  // impl struct for case documentNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO14documentNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentNumber() const;

  inline const static struct _impl_employer {  // impl struct for case employer
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::employer;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } employer SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8employeryA2CmF");
  SWIFT_INLINE_THUNK bool isEmployer() const;

  inline const static struct _impl_endorsements {  // impl struct for case endorsements
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::endorsements;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } endorsements SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12endorsementsyA2CmF");
  SWIFT_INLINE_THUNK bool isEndorsements() const;

  inline const static struct _impl_fathersName {  // impl struct for case fathersName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fathersName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } fathersName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11fathersNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFathersName() const;

  inline const static struct _impl_firstName {  // impl struct for case firstName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::firstName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } firstName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO9firstNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFirstName() const;

  inline const static struct _impl_fullName {  // impl struct for case fullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } fullName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8fullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFullName() const;

  inline const static struct _impl_issuingAuthority {  // impl struct for case issuingAuthority
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuingAuthority;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } issuingAuthority SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO16issuingAuthorityyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuingAuthority() const;

  inline const static struct _impl_lastName {  // impl struct for case lastName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lastName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } lastName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8lastNameyA2CmF");
  SWIFT_INLINE_THUNK bool isLastName() const;

  inline const static struct _impl_licenceType {  // impl struct for case licenceType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::licenceType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } licenceType SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO07licenceD0yA2CmF");
  SWIFT_INLINE_THUNK bool isLicenceType() const;

  inline const static struct _impl_localizedName {  // impl struct for case localizedName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::localizedName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } localizedName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO13localizedNameyA2CmF");
  SWIFT_INLINE_THUNK bool isLocalizedName() const;

  inline const static struct _impl_maritalStatus {  // impl struct for case maritalStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maritalStatus;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } maritalStatus SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO13maritalStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isMaritalStatus() const;

  inline const static struct _impl_mothersName {  // impl struct for case mothersName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mothersName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } mothersName SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11mothersNameyA2CmF");
  SWIFT_INLINE_THUNK bool isMothersName() const;

  inline const static struct _impl_mrz {  // impl struct for case mrz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrz;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } mrz SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO3mrzyA2CmF");
  SWIFT_INLINE_THUNK bool isMrz() const;

  inline const static struct _impl_nationality {  // impl struct for case nationality
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nationality;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } nationality SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO11nationalityyA2CmF");
  SWIFT_INLINE_THUNK bool isNationality() const;

  inline const static struct _impl_personalIdNumber {  // impl struct for case personalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::personalIdNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } personalIdNumber SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO16personalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isPersonalIdNumber() const;

  inline const static struct _impl_placeOfBirth {  // impl struct for case placeOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::placeOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } placeOfBirth SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12placeOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isPlaceOfBirth() const;

  inline const static struct _impl_profession {  // impl struct for case profession
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::profession;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } profession SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO10professionyA2CmF");
  SWIFT_INLINE_THUNK bool isProfession() const;

  inline const static struct _impl_race {  // impl struct for case race
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::race;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } race SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO4raceyA2CmF");
  SWIFT_INLINE_THUNK bool isRace() const;

  inline const static struct _impl_religion {  // impl struct for case religion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::religion;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } religion SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8religionyA2CmF");
  SWIFT_INLINE_THUNK bool isReligion() const;

  inline const static struct _impl_residentialStatus {  // impl struct for case residentialStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residentialStatus;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } residentialStatus SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO17residentialStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isResidentialStatus() const;

  inline const static struct _impl_restrictions {  // impl struct for case restrictions
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::restrictions;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } restrictions SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12restrictionsyA2CmF");
  SWIFT_INLINE_THUNK bool isRestrictions() const;

  inline const static struct _impl_sex {  // impl struct for case sex
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sex;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } sex SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO3sexyA2CmF");
  SWIFT_INLINE_THUNK bool isSex() const;

  inline const static struct _impl_vehicleClass {  // impl struct for case vehicleClass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleClass;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } vehicleClass SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO12vehicleClassyA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleClass() const;

  inline const static struct _impl_bloodType {  // impl struct for case bloodType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bloodType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } bloodType SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO05bloodD0yA2CmF");
  SWIFT_INLINE_THUNK bool isBloodType() const;

  inline const static struct _impl_sponsor {  // impl struct for case sponsor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sponsor;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } sponsor SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO7sponsoryA2CmF");
  SWIFT_INLINE_THUNK bool isSponsor() const;

  inline const static struct _impl_visaType {  // impl struct for case visaType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visaType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } visaType SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO04visaD0yA2CmF");
  SWIFT_INLINE_THUNK bool isVisaType() const;

  inline const static struct _impl_numberOfEntries {  // impl struct for case numberOfEntries
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::numberOfEntries;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } numberOfEntries SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO15numberOfEntriesyA2CmF");
  SWIFT_INLINE_THUNK bool isNumberOfEntries() const;

  inline const static struct _impl_durationOfStay {  // impl struct for case durationOfStay
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::durationOfStay;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } durationOfStay SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO14durationOfStayyA2CmF");
  SWIFT_INLINE_THUNK bool isDurationOfStay() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO28additionalAddressInformationyA2CmFWC) return cases::additionalAddressInformation;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO25additionalNameInformationyA2CmFWC) return cases::additionalNameInformation;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC) return cases::additionalOptionalAddressInformation;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO26additionalPersonalIdNumberyA2CmFWC) return cases::additionalPersonalIdNumber;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO7addressyA2CmFWC) return cases::address;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO18classEffectiveDateyA2CmFWC) return cases::classEffectiveDate;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO15classExpiryDateyA2CmFWC) return cases::classExpiryDate;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO10conditionsyA2CmFWC) return cases::conditions;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO11dateOfBirthyA2CmFWC) return cases::dateOfBirth;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO12dateOfExpiryyA2CmFWC) return cases::dateOfExpiry;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO11dateOfIssueyA2CmFWC) return cases::dateOfIssue;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO24documentAdditionalNumberyA2CmFWC) return cases::documentAdditionalNumber;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC) return cases::documentOptionalAdditionalNumber;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO14documentNumberyA2CmFWC) return cases::documentNumber;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO8employeryA2CmFWC) return cases::employer;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO12endorsementsyA2CmFWC) return cases::endorsements;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO11fathersNameyA2CmFWC) return cases::fathersName;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO9firstNameyA2CmFWC) return cases::firstName;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO8fullNameyA2CmFWC) return cases::fullName;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO16issuingAuthorityyA2CmFWC) return cases::issuingAuthority;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO8lastNameyA2CmFWC) return cases::lastName;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO07licenceD0yA2CmFWC) return cases::licenceType;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO13localizedNameyA2CmFWC) return cases::localizedName;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO13maritalStatusyA2CmFWC) return cases::maritalStatus;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO11mothersNameyA2CmFWC) return cases::mothersName;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO3mrzyA2CmFWC) return cases::mrz;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO11nationalityyA2CmFWC) return cases::nationality;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO16personalIdNumberyA2CmFWC) return cases::personalIdNumber;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO12placeOfBirthyA2CmFWC) return cases::placeOfBirth;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO10professionyA2CmFWC) return cases::profession;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO4raceyA2CmFWC) return cases::race;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO8religionyA2CmFWC) return cases::religion;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO17residentialStatusyA2CmFWC) return cases::residentialStatus;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO12restrictionsyA2CmFWC) return cases::restrictions;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO3sexyA2CmFWC) return cases::sex;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO12vehicleClassyA2CmFWC) return cases::vehicleClass;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO05bloodD0yA2CmFWC) return cases::bloodType;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO7sponsoryA2CmFWC) return cases::sponsor;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO04visaD0yA2CmFWC) return cases::visaType;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO15numberOfEntriesyA2CmFWC) return cases::numberOfEntries;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO14durationOfStayyA2CmFWC) return cases::durationOfStay;
    if (tag == _impl::$s13BlinkIDVerify9FieldTypeO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<FieldType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify9FieldTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK FieldType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldType _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify9FieldTypeOD;
  static inline constexpr $s13BlinkIDVerify9FieldTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldType returnNewValue(T callable) {
    auto result = FieldType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::FieldType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify9FieldTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::FieldType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::FieldType> = true;
template<>
struct implClassFor<BlinkIDVerify::FieldType> { using type = BlinkIDVerify::_impl::_impl_FieldType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


namespace _impl {

class _impl_FormatCheck;

// Type metadata accessor for FormatCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11FormatCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV") FormatCheck final {
public:
  SWIFT_INLINE_THUNK ~FormatCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11FormatCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FormatCheck(const FormatCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11FormatCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FormatCheck &operator =(const FormatCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11FormatCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FormatCheck &operator =(FormatCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FormatCheck(FormatCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV7overallAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDateOfBirthCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV011dateOfBirthD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDateOfExpiryCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV012dateOfExpiryD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDateOfIssueCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV011dateOfIssueD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDocumentNumberCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV014documentNumberD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDocumentAdditionalNumberCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV024documentAdditionalNumberD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDocumentOptionalAdditionalNumberCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV032documentOptionalAdditionalNumberD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getPersonalIdNumberCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV016personalIdNumberD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getAdditionalPersonalIdNumberCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV026additionalPersonalIdNumberD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getGenderCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV06genderD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getNationalityCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV011nationalityD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getIssuingAuthorityCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV016issuingAuthorityD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getMaritalStatusCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV013maritalStatusD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getReligionCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV08religionD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getClassEffectiveDateCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV018classEffectiveDateD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getClassExpiryDateCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV015classExpiryDateD0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify11FormatCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK FormatCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FormatCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11FormatCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FormatCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FormatCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11FormatCheckVD;
  static inline constexpr $s13BlinkIDVerify11FormatCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FormatCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FormatCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FormatCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FormatCheck returnNewValue(T callable) {
    auto result = FormatCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11FormatCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::FormatCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11FormatCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::FormatCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::FormatCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::FormatCheck> { using type = BlinkIDVerify::_impl::_impl_FormatCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO") ImageAnalysisDetectionStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageAnalysisDetectionStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV") FrameAnalysisResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::FrameAnalysisResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_FrameAnalysisResult;

// Type metadata accessor for FrameAnalysisResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify19FrameAnalysisResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV") FrameAnalysisResult final {
public:
  SWIFT_INLINE_THUNK ~FrameAnalysisResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19FrameAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FrameAnalysisResult(const FrameAnalysisResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19FrameAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FrameAnalysisResult &operator =(const FrameAnalysisResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19FrameAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FrameAnalysisResult &operator =(FrameAnalysisResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FrameAnalysisResult(FrameAnalysisResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus getVerificationProcessingStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV28verificationProcessingStatusAA0abgH0Ovp");
  SWIFT_INLINE_THUNK ProcessingStatus getProcessingStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV16processingStatusAA010ProcessingG0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<DocumentLocation> getDocumentLocation() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV16documentLocationAA08DocumentG0VSgvp");
  SWIFT_INLINE_THUNK DocumentLocalizationStatus getDocumentLocalizationStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV26documentLocalizationStatusAA08DocumentgH0Ovp");
  SWIFT_INLINE_THUNK bool getBlurDetected() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV12blurDetectedSbvp");
  SWIFT_INLINE_THUNK bool getGlareDetected() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV13glareDetectedSbvp");
  SWIFT_INLINE_THUNK bool getOcclusionDetected() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV17occlusionDetectedSbvp");
  SWIFT_INLINE_THUNK bool getTiltDetected() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV12tiltDetectedSbvp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getMoire() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV5moireAA05ImageD15DetectionStatusOvp");
  SWIFT_INLINE_THUNK DocumentImageColorStatus getMonochrome() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV10monochromeAA24DocumentImageColorStatusOvp");
  SWIFT_INLINE_THUNK DetectionStatus getDetectionStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV15detectionStatusAA09DetectionG0Ovp");
  SWIFT_INLINE_THUNK bool hasBarcodeReadingIssue() const SWIFT_SYMBOL("s:13BlinkIDVerify19FrameAnalysisResultV22hasBarcodeReadingIssueSbvp");
private:
  SWIFT_INLINE_THUNK FrameAnalysisResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FrameAnalysisResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19FrameAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FrameAnalysisResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FrameAnalysisResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify19FrameAnalysisResultVD;
  static inline constexpr $s13BlinkIDVerify19FrameAnalysisResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FrameAnalysisResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FrameAnalysisResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FrameAnalysisResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FrameAnalysisResult returnNewValue(T callable) {
    auto result = FrameAnalysisResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify19FrameAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::FrameAnalysisResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify19FrameAnalysisResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::FrameAnalysisResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::FrameAnalysisResult> = true;
template<>
struct implClassFor<BlinkIDVerify::FrameAnalysisResult> { using type = BlinkIDVerify::_impl::_impl_FrameAnalysisResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


/// Detection status determined from the scanned image.
namespace _impl {

class _impl_ImageAnalysisDetectionStatus;

// Type metadata accessor for ImageAnalysisDetectionStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageAnalysisDetectionStatus
extern "C" {
extern unsigned $s13BlinkIDVerify28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC;
extern unsigned $s13BlinkIDVerify28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC;
extern unsigned $s13BlinkIDVerify28ImageAnalysisDetectionStatusO8detectedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO") ImageAnalysisDetectionStatus final {
public:
  SWIFT_INLINE_THUNK ~ImageAnalysisDetectionStatus() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus(const ImageAnalysisDetectionStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus &operator =(const ImageAnalysisDetectionStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus &operator =(ImageAnalysisDetectionStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisDetectionStatus(ImageAnalysisDetectionStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO12notAvailableyA2CmF"),
    notDetected SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO11notDetectedyA2CmF"),
    detected SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO8detectedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_notDetected {  // impl struct for case notDetected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notDetected;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } notDetected SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO11notDetectedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotDetected() const;

  inline const static struct _impl_detected {  // impl struct for case detected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detected;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } detected SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO8detectedyA2CmF");
  SWIFT_INLINE_THUNK bool isDetected() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC) return cases::notDetected;
    if (tag == _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO8detectedyA2CmFWC) return cases::detected;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> init(swift::Int rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify28ImageAnalysisDetectionStatusO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageAnalysisDetectionStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageAnalysisDetectionStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify28ImageAnalysisDetectionStatusOD;
  static inline constexpr $s13BlinkIDVerify28ImageAnalysisDetectionStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageAnalysisDetectionStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageAnalysisDetectionStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageAnalysisDetectionStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisDetectionStatus returnNewValue(T callable) {
    auto result = ImageAnalysisDetectionStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ImageAnalysisDetectionStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ImageAnalysisDetectionStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ImageAnalysisDetectionStatus> = true;
template<>
struct implClassFor<BlinkIDVerify::ImageAnalysisDetectionStatus> { using type = BlinkIDVerify::_impl::_impl_ImageAnalysisDetectionStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV") ImageAnalysisResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageAnalysisResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_ImageAnalysisResult;

// Type metadata accessor for ImageAnalysisResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify19ImageAnalysisResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV") ImageAnalysisResult final {
public:
  SWIFT_INLINE_THUNK ~ImageAnalysisResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19ImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisResult(const ImageAnalysisResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19ImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisResult &operator =(const ImageAnalysisResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19ImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageAnalysisResult &operator =(ImageAnalysisResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisResult(ImageAnalysisResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> getBlurred() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV7blurredSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> getDocumentImageColorStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV08documentC11ColorStatusAA08DocumentcgH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> getDocumentImageMoireStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV08documentC11MoireStatusAA0cd9DetectionH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> getFaceDetectionStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV19faceDetectionStatusAA0cdgH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> getMrzDetectionStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV18mrzDetectionStatusAA0cdgH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> getBarcodeDetectionStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV22barcodeDetectionStatusAA0cdgH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CardOrientation> getCardOrientation() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV15cardOrientationAA04CardG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CardRotation> getCardRotation() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV12cardRotationAA04CardG0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> getRealIDDetectionStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify19ImageAnalysisResultV21realIDDetectionStatusAA0cd9DetectionH0OSgvp");
private:
  SWIFT_INLINE_THUNK ImageAnalysisResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageAnalysisResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19ImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageAnalysisResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageAnalysisResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify19ImageAnalysisResultVD;
  static inline constexpr $s13BlinkIDVerify19ImageAnalysisResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageAnalysisResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageAnalysisResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageAnalysisResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisResult returnNewValue(T callable) {
    auto result = ImageAnalysisResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify19ImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ImageAnalysisResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify19ImageAnalysisResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ImageAnalysisResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ImageAnalysisResult> = true;
template<>
struct implClassFor<BlinkIDVerify::ImageAnalysisResult> { using type = BlinkIDVerify::_impl::_impl_ImageAnalysisResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ImageFormat;

// Type metadata accessor for ImageFormat
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11ImageFormatOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageFormat
extern "C" {
extern unsigned $s13BlinkIDVerify11ImageFormatO3jpgyA2CmFWC;
extern unsigned $s13BlinkIDVerify11ImageFormatO3pngyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO") ImageFormat final {
public:
  SWIFT_INLINE_THUNK ~ImageFormat() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageFormat(const ImageFormat &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageFormat &operator =(const ImageFormat &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageFormat &operator =(ImageFormat &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageFormat(ImageFormat &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    jpg SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO3jpgyA2CmF"),
    png SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO3pngyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_jpg {  // impl struct for case jpg
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jpg;
    }
    SWIFT_INLINE_THUNK ImageFormat operator()() const;
  } jpg SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO3jpgyA2CmF");
  SWIFT_INLINE_THUNK bool isJpg() const;

  inline const static struct _impl_png {  // impl struct for case png
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::png;
    }
    SWIFT_INLINE_THUNK ImageFormat operator()() const;
  } png SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO3pngyA2CmF");
  SWIFT_INLINE_THUNK bool isPng() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify11ImageFormatO3jpgyA2CmFWC) return cases::jpg;
    if (tag == _impl::$s13BlinkIDVerify11ImageFormatO3pngyA2CmFWC) return cases::png;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO2idSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<ImageFormat> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify11ImageFormatO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ImageFormat(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageFormat _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageFormat(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageFormat;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11ImageFormatOD;
  static inline constexpr $s13BlinkIDVerify11ImageFormatOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageFormat {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageFormat &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageFormat &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageFormat returnNewValue(T callable) {
    auto result = ImageFormat::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11ImageFormatOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ImageFormat> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11ImageFormatOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ImageFormat> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ImageFormat> = true;
template<>
struct implClassFor<BlinkIDVerify::ImageFormat> { using type = BlinkIDVerify::_impl::_impl_ImageFormat; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

/// Represents the orientation of an image in the document verification process.
/// This enum defines the possible orientations of captured images, including
/// both standard and mirrored orientations.
namespace _impl {

class _impl_ImageOrientation;

// Type metadata accessor for ImageOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16ImageOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageOrientation
extern "C" {
extern unsigned $s13BlinkIDVerify16ImageOrientationO2upyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ImageOrientationO4downyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ImageOrientationO4leftyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ImageOrientationO5rightyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ImageOrientationO10upMirroredyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ImageOrientationO12downMirroredyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ImageOrientationO12leftMirroredyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ImageOrientationO13rightMirroredyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO") ImageOrientation final {
public:
  SWIFT_INLINE_THUNK ~ImageOrientation() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageOrientation(const ImageOrientation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageOrientation &operator =(const ImageOrientation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageOrientation &operator =(ImageOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageOrientation(ImageOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    up SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO2upyA2CmF"),
    down SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO4downyA2CmF"),
    left SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO4leftyA2CmF"),
    right SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO5rightyA2CmF"),
    upMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO10upMirroredyA2CmF"),
    downMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO12downMirroredyA2CmF"),
    leftMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO12leftMirroredyA2CmF"),
    rightMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO13rightMirroredyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_up {  // impl struct for case up
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::up;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } up SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO2upyA2CmF");
  SWIFT_INLINE_THUNK bool isUp() const;

  inline const static struct _impl_down {  // impl struct for case down
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::down;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } down SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO4downyA2CmF");
  SWIFT_INLINE_THUNK bool isDown() const;

  inline const static struct _impl_left {  // impl struct for case left
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::left;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } left SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO4leftyA2CmF");
  SWIFT_INLINE_THUNK bool isLeft() const;

  inline const static struct _impl_right {  // impl struct for case right
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::right;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } right SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO5rightyA2CmF");
  SWIFT_INLINE_THUNK bool isRight() const;

  inline const static struct _impl_upMirrored {  // impl struct for case upMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } upMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO10upMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isUpMirrored() const;

  inline const static struct _impl_downMirrored {  // impl struct for case downMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::downMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } downMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO12downMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isDownMirrored() const;

  inline const static struct _impl_leftMirrored {  // impl struct for case leftMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::leftMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } leftMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO12leftMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isLeftMirrored() const;

  inline const static struct _impl_rightMirrored {  // impl struct for case rightMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rightMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } rightMirrored SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO13rightMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isRightMirrored() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO2upyA2CmFWC) return cases::up;
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO4downyA2CmFWC) return cases::down;
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO4leftyA2CmFWC) return cases::left;
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO5rightyA2CmFWC) return cases::right;
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO10upMirroredyA2CmFWC) return cases::upMirrored;
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO12downMirroredyA2CmFWC) return cases::downMirrored;
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO12leftMirroredyA2CmFWC) return cases::leftMirrored;
    if (tag == _impl::$s13BlinkIDVerify16ImageOrientationO13rightMirroredyA2CmFWC) return cases::rightMirrored;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13BlinkIDVerify16ImageOrientationO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ImageOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageOrientation _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16ImageOrientationOD;
  static inline constexpr $s13BlinkIDVerify16ImageOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageOrientation returnNewValue(T callable) {
    auto result = ImageOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ImageOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16ImageOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ImageOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ImageOrientation> = true;
template<>
struct implClassFor<BlinkIDVerify::ImageOrientation> { using type = BlinkIDVerify::_impl::_impl_ImageOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO") ImageQualityInterpretation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ImageQualityInterpretation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_ImageQualityInterpretation;

// Type metadata accessor for ImageQualityInterpretation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify26ImageQualityInterpretationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageQualityInterpretation
extern "C" {
extern unsigned $s13BlinkIDVerify26ImageQualityInterpretationO6ignoreyA2CmFWC;
extern unsigned $s13BlinkIDVerify26ImageQualityInterpretationO12conservativeyA2CmFWC;
extern unsigned $s13BlinkIDVerify26ImageQualityInterpretationO13highAssuranceyA2CmFWC;
extern unsigned $s13BlinkIDVerify26ImageQualityInterpretationO14highConversionyA2CmFWC;
extern unsigned $s13BlinkIDVerify26ImageQualityInterpretationO18veryHighConversionyA2CmFWC;
extern unsigned $s13BlinkIDVerify26ImageQualityInterpretationO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO") ImageQualityInterpretation final {
public:
  SWIFT_INLINE_THUNK ~ImageQualityInterpretation() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation(const ImageQualityInterpretation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation &operator =(const ImageQualityInterpretation &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation &operator =(ImageQualityInterpretation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageQualityInterpretation(ImageQualityInterpretation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    ignore SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO6ignoreyA2CmF"),
    conservative SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO12conservativeyA2CmF"),
    highAssurance SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO13highAssuranceyA2CmF"),
    highConversion SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO14highConversionyA2CmF"),
    veryHighConversion SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO18veryHighConversionyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_ignore {  // impl struct for case ignore
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ignore;
    }
    SWIFT_INLINE_THUNK ImageQualityInterpretation operator()() const;
  } ignore SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO6ignoreyA2CmF");
  SWIFT_INLINE_THUNK bool isIgnore() const;

  inline const static struct _impl_conservative {  // impl struct for case conservative
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::conservative;
    }
    SWIFT_INLINE_THUNK ImageQualityInterpretation operator()() const;
  } conservative SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO12conservativeyA2CmF");
  SWIFT_INLINE_THUNK bool isConservative() const;

  inline const static struct _impl_highAssurance {  // impl struct for case highAssurance
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::highAssurance;
    }
    SWIFT_INLINE_THUNK ImageQualityInterpretation operator()() const;
  } highAssurance SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO13highAssuranceyA2CmF");
  SWIFT_INLINE_THUNK bool isHighAssurance() const;

  inline const static struct _impl_highConversion {  // impl struct for case highConversion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::highConversion;
    }
    SWIFT_INLINE_THUNK ImageQualityInterpretation operator()() const;
  } highConversion SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO14highConversionyA2CmF");
  SWIFT_INLINE_THUNK bool isHighConversion() const;

  inline const static struct _impl_veryHighConversion {  // impl struct for case veryHighConversion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veryHighConversion;
    }
    SWIFT_INLINE_THUNK ImageQualityInterpretation operator()() const;
  } veryHighConversion SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO18veryHighConversionyA2CmF");
  SWIFT_INLINE_THUNK bool isVeryHighConversion() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK ImageQualityInterpretation operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify26ImageQualityInterpretationO6ignoreyA2CmFWC) return cases::ignore;
    if (tag == _impl::$s13BlinkIDVerify26ImageQualityInterpretationO12conservativeyA2CmFWC) return cases::conservative;
    if (tag == _impl::$s13BlinkIDVerify26ImageQualityInterpretationO13highAssuranceyA2CmFWC) return cases::highAssurance;
    if (tag == _impl::$s13BlinkIDVerify26ImageQualityInterpretationO14highConversionyA2CmFWC) return cases::highConversion;
    if (tag == _impl::$s13BlinkIDVerify26ImageQualityInterpretationO18veryHighConversionyA2CmFWC) return cases::veryHighConversion;
    if (tag == _impl::$s13BlinkIDVerify26ImageQualityInterpretationO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO2idSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<ImageQualityInterpretation> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify26ImageQualityInterpretationO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ImageQualityInterpretation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageQualityInterpretation _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageQualityInterpretation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageQualityInterpretation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify26ImageQualityInterpretationOD;
  static inline constexpr $s13BlinkIDVerify26ImageQualityInterpretationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageQualityInterpretation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageQualityInterpretation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageQualityInterpretation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageQualityInterpretation returnNewValue(T callable) {
    auto result = ImageQualityInterpretation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ImageQualityInterpretation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify26ImageQualityInterpretationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ImageQualityInterpretation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ImageQualityInterpretation> = true;
template<>
struct implClassFor<BlinkIDVerify::ImageQualityInterpretation> { using type = BlinkIDVerify::_impl::_impl_ImageQualityInterpretation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ImageQualitySettings;

// Type metadata accessor for ImageQualitySettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify20ImageQualitySettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV") ImageQualitySettings final {
public:
  SWIFT_INLINE_THUNK ~ImageQualitySettings() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20ImageQualitySettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageQualitySettings(const ImageQualitySettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20ImageQualitySettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageQualitySettings &operator =(const ImageQualitySettings &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20ImageQualitySettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageQualitySettings &operator =(ImageQualitySettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageQualitySettings(ImageQualitySettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getBlurMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setBlurMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getGlareMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV15glareMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setGlareMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV15glareMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getLightingMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV18lightingMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setLightingMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV18lightingMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getSharpnessMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV19sharpnessMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setSharpnessMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV19sharpnessMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getHandOcclusionMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV23handOcclusionMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK void setHandOcclusionMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV23handOcclusionMatchLevelAA0hI0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getDpiMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV13dpiMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setDpiMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV13dpiMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> getTiltMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV14tiltMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK void setTiltMatchLevel(const swift::Optional<MatchLevel>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV14tiltMatchLevelAA0gH0OSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ImageQualityInterpretation> getImageQualityInterpretation() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV05imageD14InterpretationAA0cdG0OSgvp");
  SWIFT_INLINE_THUNK void setImageQualityInterpretation(const swift::Optional<ImageQualityInterpretation>& value) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV05imageD14InterpretationAA0cdG0OSgvp");
  static SWIFT_INLINE_THUNK ImageQualitySettings init(const swift::Optional<MatchLevel>& blurMatchLevel, const swift::Optional<MatchLevel>& glareMatchLevel, const swift::Optional<MatchLevel>& lightingMatchLevel, const swift::Optional<MatchLevel>& sharpnessMatchLevel, const swift::Optional<MatchLevel>& handOcclusionMatchLevel, const swift::Optional<MatchLevel>& dpiMatchLevel, const swift::Optional<MatchLevel>& tiltMatchLevel, const swift::Optional<ImageQualityInterpretation>& imageQualityInterpretation) SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevel05glaregH008lightinggH009sharpnessgH0013handOcclusiongH003dpigH004tiltgH005imageD14InterpretationAcA0gH0OSg_A6nA0cdQ0OSgtcfc");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify20ImageQualitySettingsV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ImageQualitySettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageQualitySettings _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20ImageQualitySettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageQualitySettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageQualitySettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify20ImageQualitySettingsVD;
  static inline constexpr $s13BlinkIDVerify20ImageQualitySettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageQualitySettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageQualitySettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageQualitySettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageQualitySettings returnNewValue(T callable) {
    auto result = ImageQualitySettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify20ImageQualitySettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ImageQualitySettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify20ImageQualitySettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ImageQualitySettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ImageQualitySettings> = true;
template<>
struct implClassFor<BlinkIDVerify::ImageQualitySettings> { using type = BlinkIDVerify::_impl::_impl_ImageQualitySettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ImageResult;

// Type metadata accessor for ImageResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11ImageResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11ImageResultV") ImageResult final {
public:
  SWIFT_INLINE_THUNK ~ImageResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageResult(const ImageResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageResult &operator =(const ImageResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageResult &operator =(ImageResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageResult(ImageResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getName() const SWIFT_SYMBOL("s:13BlinkIDVerify11ImageResultV4nameSSvp");
  SWIFT_INLINE_THUNK UIImage *_Nullable getImage() const SWIFT_SYMBOL("s:13BlinkIDVerify11ImageResultV5imageSo7UIImageCSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify11ImageResultV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ImageResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11ImageResultVD;
  static inline constexpr $s13BlinkIDVerify11ImageResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageResult returnNewValue(T callable) {
    auto result = ImageResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11ImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ImageResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11ImageResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ImageResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ImageResult> = true;
template<>
struct implClassFor<BlinkIDVerify::ImageResult> { using type = BlinkIDVerify::_impl::_impl_ImageResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO") IndicatorResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::IndicatorResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_IndicatorResult;

// Type metadata accessor for IndicatorResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify15IndicatorResultOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum IndicatorResult
extern "C" {
extern unsigned $s13BlinkIDVerify15IndicatorResultO12notPerformedyA2CmFWC;
extern unsigned $s13BlinkIDVerify15IndicatorResultO4passyA2CmFWC;
extern unsigned $s13BlinkIDVerify15IndicatorResultO4failyA2CmFWC;
extern unsigned $s13BlinkIDVerify15IndicatorResultO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO") IndicatorResult final {
public:
  SWIFT_INLINE_THUNK ~IndicatorResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK IndicatorResult(const IndicatorResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK IndicatorResult &operator =(const IndicatorResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK IndicatorResult &operator =(IndicatorResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER IndicatorResult(IndicatorResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notPerformed SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO12notPerformedyA2CmF"),
    pass SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO4passyA2CmF"),
    fail SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO4failyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notPerformed {  // impl struct for case notPerformed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notPerformed;
    }
    SWIFT_INLINE_THUNK IndicatorResult operator()() const;
  } notPerformed SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO12notPerformedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotPerformed() const;

  inline const static struct _impl_pass {  // impl struct for case pass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pass;
    }
    SWIFT_INLINE_THUNK IndicatorResult operator()() const;
  } pass SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO4passyA2CmF");
  SWIFT_INLINE_THUNK bool isPass() const;

  inline const static struct _impl_fail {  // impl struct for case fail
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fail;
    }
    SWIFT_INLINE_THUNK IndicatorResult operator()() const;
  } fail SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO4failyA2CmF");
  SWIFT_INLINE_THUNK bool isFail() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK IndicatorResult operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify15IndicatorResultO12notPerformedyA2CmFWC) return cases::notPerformed;
    if (tag == _impl::$s13BlinkIDVerify15IndicatorResultO4passyA2CmFWC) return cases::pass;
    if (tag == _impl::$s13BlinkIDVerify15IndicatorResultO4failyA2CmFWC) return cases::fail;
    if (tag == _impl::$s13BlinkIDVerify15IndicatorResultO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<IndicatorResult> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify15IndicatorResultO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK IndicatorResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK IndicatorResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return IndicatorResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_IndicatorResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify15IndicatorResultOD;
  static inline constexpr $s13BlinkIDVerify15IndicatorResultOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_IndicatorResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(IndicatorResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const IndicatorResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER IndicatorResult returnNewValue(T callable) {
    auto result = IndicatorResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify15IndicatorResultOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::IndicatorResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify15IndicatorResultOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::IndicatorResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::IndicatorResult> = true;
template<>
struct implClassFor<BlinkIDVerify::IndicatorResult> { using type = BlinkIDVerify::_impl::_impl_IndicatorResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO") IndicatorType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::IndicatorType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_IndicatorType;

// Type metadata accessor for IndicatorType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13IndicatorTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum IndicatorType
extern "C" {
extern unsigned $s13BlinkIDVerify13IndicatorTypeO12imageQualityyA2CmFWC;
extern unsigned $s13BlinkIDVerify13IndicatorTypeO11scanProcessyA2CmFWC;
extern unsigned $s13BlinkIDVerify13IndicatorTypeO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO") IndicatorType final {
public:
  SWIFT_INLINE_THUNK ~IndicatorType() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK IndicatorType(const IndicatorType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK IndicatorType &operator =(const IndicatorType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK IndicatorType &operator =(IndicatorType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER IndicatorType(IndicatorType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    imageQuality SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO12imageQualityyA2CmF"),
    scanProcess SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO11scanProcessyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_imageQuality {  // impl struct for case imageQuality
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imageQuality;
    }
    SWIFT_INLINE_THUNK IndicatorType operator()() const;
  } imageQuality SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO12imageQualityyA2CmF");
  SWIFT_INLINE_THUNK bool isImageQuality() const;

  inline const static struct _impl_scanProcess {  // impl struct for case scanProcess
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanProcess;
    }
    SWIFT_INLINE_THUNK IndicatorType operator()() const;
  } scanProcess SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO11scanProcessyA2CmF");
  SWIFT_INLINE_THUNK bool isScanProcess() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK IndicatorType operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify13IndicatorTypeO12imageQualityyA2CmFWC) return cases::imageQuality;
    if (tag == _impl::$s13BlinkIDVerify13IndicatorTypeO11scanProcessyA2CmFWC) return cases::scanProcess;
    if (tag == _impl::$s13BlinkIDVerify13IndicatorTypeO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<IndicatorType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify13IndicatorTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK IndicatorType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK IndicatorType _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return IndicatorType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_IndicatorType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13IndicatorTypeOD;
  static inline constexpr $s13BlinkIDVerify13IndicatorTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_IndicatorType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(IndicatorType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const IndicatorType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER IndicatorType returnNewValue(T callable) {
    auto result = IndicatorType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13IndicatorTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::IndicatorType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13IndicatorTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::IndicatorType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::IndicatorType> = true;
template<>
struct implClassFor<BlinkIDVerify::IndicatorType> { using type = BlinkIDVerify::_impl::_impl_IndicatorType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


/// A class representing an input image for document verification.
/// This class wraps either a UIImage or camera frame and prepares it for
/// processing by the document verification system. It handles proper
/// orientation and region of interest settings.
/// Example usage:
/// \code
/// // Create from UIImage
/// let inputImage1 = InputImage(
///     uiImage: documentImage,
///     regionOfInterest: RegionOfInterest(x: 0, y: 0, width: 1.0, height: 1.0)
/// )
///
/// // Create from camera frame
/// let inputImage2 = InputImage(cameraFrame: cameraFrame)
///
/// \endcode
class SWIFT_SYMBOL("s:13BlinkIDVerify10InputImageC") InputImage;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::InputImage> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_InputImage;
// Type metadata accessor for InputImage
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10InputImageCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10InputImageC") InputImage final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Creates an input image from a UIImage.
/// \param uiImage The source UIImage
///
/// \param regionOfInterest Optional region of interest within the image
///
  static SWIFT_INLINE_THUNK InputImage init(UIImage *_Nonnull uiImage, const RegionOfInterest& regionOfInterest) SWIFT_SYMBOL("s:13BlinkIDVerify10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0Vtcfc");
/// Creates an input image from a camera frame.
/// \param cameraFrame The source camera frame containing image data
///
  static SWIFT_INLINE_THUNK InputImage init(const CameraFrame& cameraFrame) SWIFT_SYMBOL("s:13BlinkIDVerify10InputImageC11cameraFrameAcA06CameraF0V_tcfc");
protected:
  SWIFT_INLINE_THUNK InputImage(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_InputImage;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10InputImageCD;
  static inline constexpr $s13BlinkIDVerify10InputImageCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImage {
public:
static SWIFT_INLINE_THUNK InputImage makeRetained(void * _Nonnull ptr) noexcept { return InputImage(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::InputImage> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10InputImageCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkIDVerify::InputImage> { using type = BlinkIDVerify::_impl::_impl_InputImage; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify22InvalidLicenseKeyErrorV") InvalidLicenseKeyError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::InvalidLicenseKeyError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_InvalidLicenseKeyError;

// Type metadata accessor for InvalidLicenseKeyError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify22InvalidLicenseKeyErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify22InvalidLicenseKeyErrorV") InvalidLicenseKeyError final {
public:
  SWIFT_INLINE_THUNK ~InvalidLicenseKeyError() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError(const InvalidLicenseKeyError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError &operator =(const InvalidLicenseKeyError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError &operator =(InvalidLicenseKeyError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InvalidLicenseKeyError(InvalidLicenseKeyError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:13BlinkIDVerify22InvalidLicenseKeyErrorV7messageSSvp");
private:
  SWIFT_INLINE_THUNK InvalidLicenseKeyError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InvalidLicenseKeyError _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InvalidLicenseKeyError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InvalidLicenseKeyError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify22InvalidLicenseKeyErrorVD;
  static inline constexpr $s13BlinkIDVerify22InvalidLicenseKeyErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InvalidLicenseKeyError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InvalidLicenseKeyError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InvalidLicenseKeyError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InvalidLicenseKeyError returnNewValue(T callable) {
    auto result = InvalidLicenseKeyError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::InvalidLicenseKeyError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify22InvalidLicenseKeyErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::InvalidLicenseKeyError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::InvalidLicenseKeyError> = true;
template<>
struct implClassFor<BlinkIDVerify::InvalidLicenseKeyError> { using type = BlinkIDVerify::_impl::_impl_InvalidLicenseKeyError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {



class SWIFT_SYMBOL("s:13BlinkIDVerify8Point2dfV") Point2df;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Point2df> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_LocationInfo;

// Type metadata accessor for LocationInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12LocationInfoVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12LocationInfoV") LocationInfo final {
public:
  SWIFT_INLINE_THUNK ~LocationInfo() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12LocationInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LocationInfo(const LocationInfo &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12LocationInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LocationInfo &operator =(const LocationInfo &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12LocationInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LocationInfo &operator =(LocationInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LocationInfo(LocationInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<Point2df> getTopLeftCorner() const SWIFT_SYMBOL("s:13BlinkIDVerify12LocationInfoV13topLeftCornerAA8Point2dfVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<Dimensions> getDimensions() const SWIFT_SYMBOL("s:13BlinkIDVerify12LocationInfoV10dimensionsAA10DimensionsVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<Side> getSide() const SWIFT_SYMBOL("s:13BlinkIDVerify12LocationInfoV4sideAA4SideOSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify12LocationInfoV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK LocationInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LocationInfo _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12LocationInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LocationInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LocationInfo;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12LocationInfoVD;
  static inline constexpr $s13BlinkIDVerify12LocationInfoVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LocationInfo {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LocationInfo &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LocationInfo &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LocationInfo returnNewValue(T callable) {
    auto result = LocationInfo::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12LocationInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::LocationInfo> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12LocationInfoVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::LocationInfo> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::LocationInfo> = true;
template<>
struct implClassFor<BlinkIDVerify::LocationInfo> { using type = BlinkIDVerify::_impl::_impl_LocationInfo; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify11NumberLogicV") NumberLogic;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::NumberLogic> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_LogicCheck;

// Type metadata accessor for LogicCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10LogicCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV") LogicCheck final {
public:
  SWIFT_INLINE_THUNK ~LogicCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10LogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK LogicCheck(const LogicCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10LogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK LogicCheck &operator =(const LogicCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10LogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK LogicCheck &operator =(LogicCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER LogicCheck(LogicCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV7overallAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DateLogicCheck> getDateLogicCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV04datecD0AA04DatecD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> getDocumentNumberLogic() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV014documentNumberC0AA0fC0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> getPersonalIdNumberLogic() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV016personalIdNumberC0AA0gC0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> getInventoryControlNumberLogic() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV022inventoryControlNumberC0AA0gC0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> getDocumentDiscriminatorLogic() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV021documentDiscriminatorC0AA06NumberC0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> getCustomerIdNumberLogic() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV016customerIdNumberC0AA0gC0VSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10LogicCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK LogicCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK LogicCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10LogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return LogicCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_LogicCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10LogicCheckVD;
  static inline constexpr $s13BlinkIDVerify10LogicCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_LogicCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(LogicCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const LogicCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER LogicCheck returnNewValue(T callable) {
    auto result = LogicCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10LogicCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::LogicCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10LogicCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::LogicCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::LogicCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::LogicCheck> { using type = BlinkIDVerify::_impl::_impl_LogicCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_MatchCheck;

// Type metadata accessor for MatchCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10MatchCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV") MatchCheck final {
public:
  SWIFT_INLINE_THUNK ~MatchCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MatchCheck(const MatchCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MatchCheck &operator =(const MatchCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MatchCheck &operator =(MatchCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MatchCheck(MatchCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<TieredCheck> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV7overallAA06TieredD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getFirstNameMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV09firstNameC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getLastNameMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV08lastNameC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getFullNameMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV08fullNameC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getAddressMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV07addressC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getPlaceOfBirthMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV012placeOfBirthC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getRaceMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV04raceC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getReligionMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV08religionC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getProfessionMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV010professionC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getMaritalStatusMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV013maritalStatusC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getResidentialStatusMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV017residentialStatusC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getEmployerMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV08employerC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDateOfBirthMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV011dateOfBirthC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDateOfIssueMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV011dateOfIssueC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDateOfExpiryMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV012dateOfExpiryC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDocumentNumberMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV014documentNumberC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getPersonalIdNumberMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV016personalIdNumberC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDocumentAdditionalNumberMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV024documentAdditionalNumberC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> getDocumentOptionalAdditionalNumberMatch() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV032documentOptionalAdditionalNumberC0AA05FieldD0VSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK MatchCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MatchCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MatchCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MatchCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10MatchCheckVD;
  static inline constexpr $s13BlinkIDVerify10MatchCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MatchCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MatchCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MatchCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MatchCheck returnNewValue(T callable) {
    auto result = MatchCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10MatchCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::MatchCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10MatchCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::MatchCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::MatchCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::MatchCheck> { using type = BlinkIDVerify::_impl::_impl_MatchCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_MatchLevel;

// Type metadata accessor for MatchLevel
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10MatchLevelOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum MatchLevel
extern "C" {
extern unsigned $s13BlinkIDVerify10MatchLevelO8disabledyA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level1yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level2yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level3yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level4yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level5yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level6yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level7yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level8yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO6level9yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO7level10yA2CmFWC;
extern unsigned $s13BlinkIDVerify10MatchLevelO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO") MatchLevel final {
public:
  SWIFT_INLINE_THUNK ~MatchLevel() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MatchLevel(const MatchLevel &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MatchLevel &operator =(const MatchLevel &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MatchLevel &operator =(MatchLevel &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MatchLevel(MatchLevel &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    disabled SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO8disabledyA2CmF"),
    level1 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level1yA2CmF"),
    level2 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level2yA2CmF"),
    level3 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level3yA2CmF"),
    level4 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level4yA2CmF"),
    level5 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level5yA2CmF"),
    level6 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level6yA2CmF"),
    level7 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level7yA2CmF"),
    level8 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level8yA2CmF"),
    level9 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level9yA2CmF"),
    level10 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO7level10yA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_disabled {  // impl struct for case disabled
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::disabled;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } disabled SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO8disabledyA2CmF");
  SWIFT_INLINE_THUNK bool isDisabled() const;

  inline const static struct _impl_level1 {  // impl struct for case level1
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level1;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level1 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level1yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel1() const;

  inline const static struct _impl_level2 {  // impl struct for case level2
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level2;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level2 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level2yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel2() const;

  inline const static struct _impl_level3 {  // impl struct for case level3
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level3;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level3 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level3yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel3() const;

  inline const static struct _impl_level4 {  // impl struct for case level4
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level4;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level4 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level4yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel4() const;

  inline const static struct _impl_level5 {  // impl struct for case level5
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level5;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level5 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level5yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel5() const;

  inline const static struct _impl_level6 {  // impl struct for case level6
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level6;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level6 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level6yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel6() const;

  inline const static struct _impl_level7 {  // impl struct for case level7
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level7;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level7 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level7yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel7() const;

  inline const static struct _impl_level8 {  // impl struct for case level8
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level8;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level8 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level8yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel8() const;

  inline const static struct _impl_level9 {  // impl struct for case level9
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level9;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level9 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO6level9yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel9() const;

  inline const static struct _impl_level10 {  // impl struct for case level10
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::level10;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } level10 SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO7level10yA2CmF");
  SWIFT_INLINE_THUNK bool isLevel10() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK MatchLevel operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO8disabledyA2CmFWC) return cases::disabled;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level1yA2CmFWC) return cases::level1;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level2yA2CmFWC) return cases::level2;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level3yA2CmFWC) return cases::level3;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level4yA2CmFWC) return cases::level4;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level5yA2CmFWC) return cases::level5;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level6yA2CmFWC) return cases::level6;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level7yA2CmFWC) return cases::level7;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level8yA2CmFWC) return cases::level8;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO6level9yA2CmFWC) return cases::level9;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO7level10yA2CmFWC) return cases::level10;
    if (tag == _impl::$s13BlinkIDVerify10MatchLevelO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO2idSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<MatchLevel> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify10MatchLevelO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK MatchLevel(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MatchLevel _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MatchLevel(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MatchLevel;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10MatchLevelOD;
  static inline constexpr $s13BlinkIDVerify10MatchLevelOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MatchLevel {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MatchLevel &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MatchLevel &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MatchLevel returnNewValue(T callable) {
    auto result = MatchLevel::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10MatchLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::MatchLevel> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10MatchLevelOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::MatchLevel> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::MatchLevel> = true;
template<>
struct implClassFor<BlinkIDVerify::MatchLevel> { using type = BlinkIDVerify::_impl::_impl_MatchLevel; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify18MemoryReserveErrorV") MemoryReserveError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::MemoryReserveError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_MemoryReserveError;

// Type metadata accessor for MemoryReserveError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify18MemoryReserveErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify18MemoryReserveErrorV") MemoryReserveError final {
public:
  SWIFT_INLINE_THUNK ~MemoryReserveError() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MemoryReserveError(const MemoryReserveError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MemoryReserveError &operator =(const MemoryReserveError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MemoryReserveError &operator =(MemoryReserveError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MemoryReserveError(MemoryReserveError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getMinRequiredMemory() const SWIFT_SYMBOL("s:13BlinkIDVerify18MemoryReserveErrorV011minRequiredC0Sivp");
  static SWIFT_INLINE_THUNK MemoryReserveError init(swift::Int minRequiredMemory) SWIFT_SYMBOL("s:13BlinkIDVerify18MemoryReserveErrorV011minRequiredC0ACSi_tcfc");
private:
  SWIFT_INLINE_THUNK MemoryReserveError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MemoryReserveError _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MemoryReserveError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MemoryReserveError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify18MemoryReserveErrorVD;
  static inline constexpr $s13BlinkIDVerify18MemoryReserveErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MemoryReserveError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MemoryReserveError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MemoryReserveError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MemoryReserveError returnNewValue(T callable) {
    auto result = MemoryReserveError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::MemoryReserveError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify18MemoryReserveErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::MemoryReserveError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::MemoryReserveError> = true;
template<>
struct implClassFor<BlinkIDVerify::MemoryReserveError> { using type = BlinkIDVerify::_impl::_impl_MemoryReserveError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO") MessageStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::MessageStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_MessageStatus;

// Type metadata accessor for MessageStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13MessageStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum MessageStatus
extern "C" {
extern unsigned $s13BlinkIDVerify13MessageStatusO4infoyA2CmFWC;
extern unsigned $s13BlinkIDVerify13MessageStatusO7warningyA2CmFWC;
extern unsigned $s13BlinkIDVerify13MessageStatusO5erroryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO") MessageStatus final {
public:
  SWIFT_INLINE_THUNK ~MessageStatus() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MessageStatus(const MessageStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MessageStatus &operator =(const MessageStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MessageStatus &operator =(MessageStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MessageStatus(MessageStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    info SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO4infoyA2CmF"),
    warning SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO7warningyA2CmF"),
    error SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO5erroryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_info {  // impl struct for case info
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::info;
    }
    SWIFT_INLINE_THUNK MessageStatus operator()() const;
  } info SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO4infoyA2CmF");
  SWIFT_INLINE_THUNK bool isInfo() const;

  inline const static struct _impl_warning {  // impl struct for case warning
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::warning;
    }
    SWIFT_INLINE_THUNK MessageStatus operator()() const;
  } warning SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO7warningyA2CmF");
  SWIFT_INLINE_THUNK bool isWarning() const;

  inline const static struct _impl_error {  // impl struct for case error
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::error;
    }
    SWIFT_INLINE_THUNK MessageStatus operator()() const;
  } error SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO5erroryA2CmF");
  SWIFT_INLINE_THUNK bool isError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify13MessageStatusO4infoyA2CmFWC) return cases::info;
    if (tag == _impl::$s13BlinkIDVerify13MessageStatusO7warningyA2CmFWC) return cases::warning;
    if (tag == _impl::$s13BlinkIDVerify13MessageStatusO5erroryA2CmFWC) return cases::error;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<MessageStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify13MessageStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK MessageStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MessageStatus _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MessageStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MessageStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13MessageStatusOD;
  static inline constexpr $s13BlinkIDVerify13MessageStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MessageStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MessageStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MessageStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MessageStatus returnNewValue(T callable) {
    auto result = MessageStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13MessageStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::MessageStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13MessageStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::MessageStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::MessageStatus> = true;
template<>
struct implClassFor<BlinkIDVerify::MessageStatus> { using type = BlinkIDVerify::_impl::_impl_MessageStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify13MissingBundleV") MissingBundle;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::MissingBundle> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_MissingBundle;

// Type metadata accessor for MissingBundle
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13MissingBundleVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13MissingBundleV") MissingBundle final {
public:
  SWIFT_INLINE_THUNK ~MissingBundle() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingBundle(const MissingBundle &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingBundle &operator =(const MissingBundle &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MissingBundle &operator =(MissingBundle &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MissingBundle(MissingBundle &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:13BlinkIDVerify13MissingBundleV7messageSSvp");
private:
  SWIFT_INLINE_THUNK MissingBundle(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MissingBundle _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MissingBundle(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MissingBundle;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13MissingBundleVD;
  static inline constexpr $s13BlinkIDVerify13MissingBundleVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MissingBundle {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MissingBundle &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MissingBundle &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MissingBundle returnNewValue(T callable) {
    auto result = MissingBundle::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::MissingBundle> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13MissingBundleVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::MissingBundle> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::MissingBundle> = true;
template<>
struct implClassFor<BlinkIDVerify::MissingBundle> { using type = BlinkIDVerify::_impl::_impl_MissingBundle; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify16MissingResourcesV") MissingResources;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::MissingResources> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_MissingResources;

// Type metadata accessor for MissingResources
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16MissingResourcesVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16MissingResourcesV") MissingResources final {
public:
  SWIFT_INLINE_THUNK ~MissingResources() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingResources(const MissingResources &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingResources &operator =(const MissingResources &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MissingResources &operator =(MissingResources &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MissingResources(MissingResources &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK MissingResources(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MissingResources _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MissingResources(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MissingResources;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16MissingResourcesVD;
  static inline constexpr $s13BlinkIDVerify16MissingResourcesVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MissingResources {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MissingResources &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MissingResources &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MissingResources returnNewValue(T callable) {
    auto result = MissingResources::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::MissingResources> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16MissingResourcesVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::MissingResources> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::MissingResources> = true;
template<>
struct implClassFor<BlinkIDVerify::MissingResources> { using type = BlinkIDVerify::_impl::_impl_MissingResources; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO") ModelLoadError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ModelLoadError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
/// Represents specific errors that can occur during model loading.
/// This enum defines the possible failure modes when loading SDK models
/// and resources.
namespace _impl {

class _impl_ModelLoadError;

// Type metadata accessor for ModelLoadError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify14ModelLoadErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ModelLoadError
extern "C" {
extern unsigned $s13BlinkIDVerify14ModelLoadErrorO11missingFileyA2CmFWC;
extern unsigned $s13BlinkIDVerify14ModelLoadErrorO11invalidFileyA2CmFWC;
extern unsigned $s13BlinkIDVerify14ModelLoadErrorO14invalidLicenseyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO") ModelLoadError final {
public:
  SWIFT_INLINE_THUNK ~ModelLoadError() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelLoadError(const ModelLoadError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelLoadError &operator =(const ModelLoadError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ModelLoadError &operator =(ModelLoadError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ModelLoadError(ModelLoadError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    missingFile SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO11missingFileyA2CmF"),
    invalidFile SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO11invalidFileyA2CmF"),
    invalidLicense SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO14invalidLicenseyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_missingFile {  // impl struct for case missingFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::missingFile;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } missingFile SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO11missingFileyA2CmF");
  SWIFT_INLINE_THUNK bool isMissingFile() const;

  inline const static struct _impl_invalidFile {  // impl struct for case invalidFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidFile;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } invalidFile SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO11invalidFileyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidFile() const;

  inline const static struct _impl_invalidLicense {  // impl struct for case invalidLicense
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidLicense;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } invalidLicense SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO14invalidLicenseyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidLicense() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify14ModelLoadErrorO11missingFileyA2CmFWC) return cases::missingFile;
    if (tag == _impl::$s13BlinkIDVerify14ModelLoadErrorO11invalidFileyA2CmFWC) return cases::invalidFile;
    if (tag == _impl::$s13BlinkIDVerify14ModelLoadErrorO14invalidLicenseyA2CmFWC) return cases::invalidLicense;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO16errorDescriptionSSSgvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:13BlinkIDVerify14ModelLoadErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ModelLoadError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ModelLoadError _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ModelLoadError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ModelLoadError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify14ModelLoadErrorOD;
  static inline constexpr $s13BlinkIDVerify14ModelLoadErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ModelLoadError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ModelLoadError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ModelLoadError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ModelLoadError returnNewValue(T callable) {
    auto result = ModelLoadError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ModelLoadError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify14ModelLoadErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ModelLoadError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ModelLoadError> = true;
template<>
struct implClassFor<BlinkIDVerify::ModelLoadError> { using type = BlinkIDVerify::_impl::_impl_ModelLoadError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_MrzCheck;

// Type metadata accessor for MrzCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify8MrzCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify8MrzCheckV") MrzCheck final {
public:
  SWIFT_INLINE_THUNK ~MrzCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8MrzCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MrzCheck(const MrzCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8MrzCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MrzCheck &operator =(const MrzCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8MrzCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MrzCheck &operator =(MrzCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MrzCheck(MrzCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify8MrzCheckV7overallAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getParsed() const SWIFT_SYMBOL("s:13BlinkIDVerify8MrzCheckV6parsedAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getCheckDigits() const SWIFT_SYMBOL("s:13BlinkIDVerify8MrzCheckV11checkDigitsAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify8MrzCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK MrzCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MrzCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8MrzCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MrzCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MrzCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify8MrzCheckVD;
  static inline constexpr $s13BlinkIDVerify8MrzCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MrzCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MrzCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MrzCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MrzCheck returnNewValue(T callable) {
    auto result = MrzCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify8MrzCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::MrzCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify8MrzCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::MrzCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::MrzCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::MrzCheck> { using type = BlinkIDVerify::_impl::_impl_MrzCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_NumberLogic;

// Type metadata accessor for NumberLogic
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11NumberLogicVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11NumberLogicV") NumberLogic final {
public:
  SWIFT_INLINE_THUNK ~NumberLogic() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11NumberLogicVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK NumberLogic(const NumberLogic &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11NumberLogicVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK NumberLogic &operator =(const NumberLogic &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11NumberLogicVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK NumberLogic &operator =(NumberLogic &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER NumberLogic(NumberLogic &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify11NumberLogicV7overallAA11CheckResultOSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify11NumberLogicV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK NumberLogic(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK NumberLogic _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11NumberLogicVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return NumberLogic(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_NumberLogic;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11NumberLogicVD;
  static inline constexpr $s13BlinkIDVerify11NumberLogicVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_NumberLogic {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(NumberLogic &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const NumberLogic &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER NumberLogic returnNewValue(T callable) {
    auto result = NumberLogic::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11NumberLogicVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::NumberLogic> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11NumberLogicVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::NumberLogic> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::NumberLogic> = true;
template<>
struct implClassFor<BlinkIDVerify::NumberLogic> { using type = BlinkIDVerify::_impl::_impl_NumberLogic; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


class SWIFT_SYMBOL("s:13BlinkIDVerify5PointV") Point;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Point> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_Point;

// Type metadata accessor for Point
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify5PointVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify5PointV") Point final {
public:
  SWIFT_INLINE_THUNK ~Point() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Point(const Point &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Point &operator =(const Point &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Point &operator =(Point &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Point(Point &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK int32_t getX() const SWIFT_SYMBOL("s:13BlinkIDVerify5PointV1xs5Int32Vvp");
  SWIFT_INLINE_THUNK int32_t getY() const SWIFT_SYMBOL("s:13BlinkIDVerify5PointV1ys5Int32Vvp");
private:
  SWIFT_INLINE_THUNK Point(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Point _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Point(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Point;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify5PointVD;
  static inline constexpr $s13BlinkIDVerify5PointVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Point {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Point &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Point &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Point returnNewValue(T callable) {
    auto result = Point::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Point> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify5PointVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Point> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Point> = true;
template<>
struct implClassFor<BlinkIDVerify::Point> { using type = BlinkIDVerify::_impl::_impl_Point; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_Point2df;

// Type metadata accessor for Point2df
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify8Point2dfVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify8Point2dfV") Point2df final {
public:
  SWIFT_INLINE_THUNK ~Point2df() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8Point2dfVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Point2df(const Point2df &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8Point2dfVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Point2df &operator =(const Point2df &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8Point2dfVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Point2df &operator =(Point2df &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Point2df(Point2df &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<float> getX() const SWIFT_SYMBOL("s:13BlinkIDVerify8Point2dfV1xSfSgvp");
  SWIFT_INLINE_THUNK swift::Optional<float> getY() const SWIFT_SYMBOL("s:13BlinkIDVerify8Point2dfV1ySfSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify8Point2dfV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK Point2df(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Point2df _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify8Point2dfVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Point2df(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Point2df;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify8Point2dfVD;
  static inline constexpr $s13BlinkIDVerify8Point2dfVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Point2df {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Point2df &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Point2df &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Point2df returnNewValue(T callable) {
    auto result = Point2df::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify8Point2dfVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Point2df> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify8Point2dfVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Point2df> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Point2df> = true;
template<>
struct implClassFor<BlinkIDVerify::Point2df> { using type = BlinkIDVerify::_impl::_impl_Point2df; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ProcessIndicator;

// Type metadata accessor for ProcessIndicator
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16ProcessIndicatorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessIndicatorV") ProcessIndicator final {
public:
  SWIFT_INLINE_THUNK ~ProcessIndicator() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessIndicatorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessIndicator(const ProcessIndicator &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessIndicatorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessIndicator &operator =(const ProcessIndicator &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessIndicatorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ProcessIndicator &operator =(ProcessIndicator &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ProcessIndicator(ProcessIndicator &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getName() const SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessIndicatorV4nameSSvp");
  SWIFT_INLINE_THUNK IndicatorType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessIndicatorV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK IndicatorResult getResult() const SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessIndicatorV6resultAA0D6ResultOvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessIndicatorV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ProcessIndicator(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ProcessIndicator _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessIndicatorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ProcessIndicator(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ProcessIndicator;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16ProcessIndicatorVD;
  static inline constexpr $s13BlinkIDVerify16ProcessIndicatorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessIndicator {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ProcessIndicator &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ProcessIndicator &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ProcessIndicator returnNewValue(T callable) {
    auto result = ProcessIndicator::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessIndicatorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ProcessIndicator> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16ProcessIndicatorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ProcessIndicator> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ProcessIndicator> = true;
template<>
struct implClassFor<BlinkIDVerify::ProcessIndicator> { using type = BlinkIDVerify::_impl::_impl_ProcessIndicator; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify18ResultCompletenessV") ResultCompleteness;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ResultCompleteness> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify13ProcessResultV") ProcessResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ProcessResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_ProcessResult;

// Type metadata accessor for ProcessResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13ProcessResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13ProcessResultV") ProcessResult final {
public:
  SWIFT_INLINE_THUNK ~ProcessResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13ProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessResult(const ProcessResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13ProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessResult &operator =(const ProcessResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13ProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ProcessResult &operator =(ProcessResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ProcessResult(ProcessResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK FrameAnalysisResult getFrameAnalysisResult() const SWIFT_SYMBOL("s:13BlinkIDVerify13ProcessResultV013frameAnalysisD0AA05FramefD0Vvp");
  SWIFT_INLINE_THUNK ResultCompleteness getResultCompleteness() const SWIFT_SYMBOL("s:13BlinkIDVerify13ProcessResultV18resultCompletenessAA0dF0Vvp");
private:
  SWIFT_INLINE_THUNK ProcessResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ProcessResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13ProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ProcessResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ProcessResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13ProcessResultVD;
  static inline constexpr $s13BlinkIDVerify13ProcessResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ProcessResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ProcessResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ProcessResult returnNewValue(T callable) {
    auto result = ProcessResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13ProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ProcessResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13ProcessResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ProcessResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ProcessResult> = true;
template<>
struct implClassFor<BlinkIDVerify::ProcessResult> { using type = BlinkIDVerify::_impl::_impl_ProcessResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


/// A global actor that provides isolated execution context for processing operations.
/// The <code>ProcessingActor</code> ensures thread-safe access to shared resources and maintains
/// data consistency across concurrent operations. Execute operations in a sequential, thread-safe manner.
class SWIFT_SYMBOL("s:13BlinkIDVerify15ProcessingActorC") ProcessingActor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ProcessingActor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_ProcessingActor;
// Type metadata accessor for ProcessingActor
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify15ProcessingActorCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify15ProcessingActorC") ProcessingActor : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK ProcessingActor(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_ProcessingActor;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify15ProcessingActorCD;
  static inline constexpr $s13BlinkIDVerify15ProcessingActorCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessingActor {
public:
static SWIFT_INLINE_THUNK ProcessingActor makeRetained(void * _Nonnull ptr) noexcept { return ProcessingActor(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ProcessingActor> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify15ProcessingActorCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkIDVerify::ProcessingActor> { using type = BlinkIDVerify::_impl::_impl_ProcessingActor; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

/// Detailed information about the recognition process.
namespace _impl {

class _impl_ProcessingStatus;

// Type metadata accessor for ProcessingStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16ProcessingStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ProcessingStatus
extern "C" {
extern unsigned $s13BlinkIDVerify16ProcessingStatusO7successyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO15detectionFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO19stabilityTestFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO17scanningWrongSideyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO22invalidCharactersFoundyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO17imageReturnFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO16mrzParsingFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO13classFilteredyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO16unsupportedClassyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO20unsupportedByLicenseyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO17awaitingOtherSideyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO10notScannedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC;
extern unsigned $s13BlinkIDVerify16ProcessingStatusO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO") ProcessingStatus final {
public:
  SWIFT_INLINE_THUNK ~ProcessingStatus() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessingStatus(const ProcessingStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessingStatus &operator =(const ProcessingStatus &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ProcessingStatus &operator =(ProcessingStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ProcessingStatus(ProcessingStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    success SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO7successyA2CmF"),
    detectionFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO15detectionFailedyA2CmF"),
    imagePreprocessingFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO24imagePreprocessingFailedyA2CmF"),
    stabilityTestFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO19stabilityTestFailedyA2CmF"),
    scanningWrongSide SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO17scanningWrongSideyA2CmF"),
    fieldIdentificationFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO25fieldIdentificationFailedyA2CmF"),
    mandatoryFieldMissing SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO21mandatoryFieldMissingyA2CmF"),
    invalidCharactersFound SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO22invalidCharactersFoundyA2CmF"),
    imageReturnFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO17imageReturnFailedyA2CmF"),
    barcodeRecognitionFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO24barcodeRecognitionFailedyA2CmF"),
    mrzParsingFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO16mrzParsingFailedyA2CmF"),
    classFiltered SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO13classFilteredyA2CmF"),
    unsupportedClass SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO16unsupportedClassyA2CmF"),
    unsupportedByLicense SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO20unsupportedByLicenseyA2CmF"),
    awaitingOtherSide SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO17awaitingOtherSideyA2CmF"),
    notScanned SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO10notScannedyA2CmF"),
    barcodeDetectionFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO22barcodeDetectionFailedyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } success SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_detectionFailed {  // impl struct for case detectionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detectionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } detectionFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO15detectionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isDetectionFailed() const;

  inline const static struct _impl_imagePreprocessingFailed {  // impl struct for case imagePreprocessingFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imagePreprocessingFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } imagePreprocessingFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO24imagePreprocessingFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isImagePreprocessingFailed() const;

  inline const static struct _impl_stabilityTestFailed {  // impl struct for case stabilityTestFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::stabilityTestFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } stabilityTestFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO19stabilityTestFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isStabilityTestFailed() const;

  inline const static struct _impl_scanningWrongSide {  // impl struct for case scanningWrongSide
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanningWrongSide;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } scanningWrongSide SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO17scanningWrongSideyA2CmF");
  SWIFT_INLINE_THUNK bool isScanningWrongSide() const;

  inline const static struct _impl_fieldIdentificationFailed {  // impl struct for case fieldIdentificationFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fieldIdentificationFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } fieldIdentificationFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO25fieldIdentificationFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isFieldIdentificationFailed() const;

  inline const static struct _impl_mandatoryFieldMissing {  // impl struct for case mandatoryFieldMissing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mandatoryFieldMissing;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } mandatoryFieldMissing SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO21mandatoryFieldMissingyA2CmF");
  SWIFT_INLINE_THUNK bool isMandatoryFieldMissing() const;

  inline const static struct _impl_invalidCharactersFound {  // impl struct for case invalidCharactersFound
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidCharactersFound;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } invalidCharactersFound SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO22invalidCharactersFoundyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidCharactersFound() const;

  inline const static struct _impl_imageReturnFailed {  // impl struct for case imageReturnFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imageReturnFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } imageReturnFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO17imageReturnFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isImageReturnFailed() const;

  inline const static struct _impl_barcodeRecognitionFailed {  // impl struct for case barcodeRecognitionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeRecognitionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } barcodeRecognitionFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO24barcodeRecognitionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeRecognitionFailed() const;

  inline const static struct _impl_mrzParsingFailed {  // impl struct for case mrzParsingFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzParsingFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } mrzParsingFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO16mrzParsingFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzParsingFailed() const;

  inline const static struct _impl_classFiltered {  // impl struct for case classFiltered
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::classFiltered;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } classFiltered SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO13classFilteredyA2CmF");
  SWIFT_INLINE_THUNK bool isClassFiltered() const;

  inline const static struct _impl_unsupportedClass {  // impl struct for case unsupportedClass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unsupportedClass;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } unsupportedClass SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO16unsupportedClassyA2CmF");
  SWIFT_INLINE_THUNK bool isUnsupportedClass() const;

  inline const static struct _impl_unsupportedByLicense {  // impl struct for case unsupportedByLicense
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unsupportedByLicense;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } unsupportedByLicense SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO20unsupportedByLicenseyA2CmF");
  SWIFT_INLINE_THUNK bool isUnsupportedByLicense() const;

  inline const static struct _impl_awaitingOtherSide {  // impl struct for case awaitingOtherSide
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::awaitingOtherSide;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } awaitingOtherSide SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO17awaitingOtherSideyA2CmF");
  SWIFT_INLINE_THUNK bool isAwaitingOtherSide() const;

  inline const static struct _impl_notScanned {  // impl struct for case notScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notScanned;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } notScanned SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO10notScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotScanned() const;

  inline const static struct _impl_barcodeDetectionFailed {  // impl struct for case barcodeDetectionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeDetectionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } barcodeDetectionFailed SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO22barcodeDetectionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeDetectionFailed() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO15detectionFailedyA2CmFWC) return cases::detectionFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC) return cases::imagePreprocessingFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO19stabilityTestFailedyA2CmFWC) return cases::stabilityTestFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO17scanningWrongSideyA2CmFWC) return cases::scanningWrongSide;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC) return cases::fieldIdentificationFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC) return cases::mandatoryFieldMissing;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO22invalidCharactersFoundyA2CmFWC) return cases::invalidCharactersFound;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO17imageReturnFailedyA2CmFWC) return cases::imageReturnFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC) return cases::barcodeRecognitionFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO16mrzParsingFailedyA2CmFWC) return cases::mrzParsingFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO13classFilteredyA2CmFWC) return cases::classFiltered;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO16unsupportedClassyA2CmFWC) return cases::unsupportedClass;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO20unsupportedByLicenseyA2CmFWC) return cases::unsupportedByLicense;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO17awaitingOtherSideyA2CmFWC) return cases::awaitingOtherSide;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO10notScannedyA2CmFWC) return cases::notScanned;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC) return cases::barcodeDetectionFailed;
    if (tag == _impl::$s13BlinkIDVerify16ProcessingStatusO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify16ProcessingStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ProcessingStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ProcessingStatus _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ProcessingStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ProcessingStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16ProcessingStatusOD;
  static inline constexpr $s13BlinkIDVerify16ProcessingStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessingStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ProcessingStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ProcessingStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ProcessingStatus returnNewValue(T callable) {
    auto result = ProcessingStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ProcessingStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16ProcessingStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ProcessingStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ProcessingStatus> = true;
template<>
struct implClassFor<BlinkIDVerify::ProcessingStatus> { using type = BlinkIDVerify::_impl::_impl_ProcessingStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_Quadrilateral;

// Type metadata accessor for Quadrilateral
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13QuadrilateralVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13QuadrilateralV") Quadrilateral final {
public:
  SWIFT_INLINE_THUNK ~Quadrilateral() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Quadrilateral(const Quadrilateral &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Quadrilateral &operator =(const Quadrilateral &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Quadrilateral &operator =(Quadrilateral &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Quadrilateral(Quadrilateral &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK Point getUpperLeft() const SWIFT_SYMBOL("s:13BlinkIDVerify13QuadrilateralV9upperLeftAA5PointVvp");
  SWIFT_INLINE_THUNK Point getUpperRight() const SWIFT_SYMBOL("s:13BlinkIDVerify13QuadrilateralV10upperRightAA5PointVvp");
  SWIFT_INLINE_THUNK Point getLowerRight() const SWIFT_SYMBOL("s:13BlinkIDVerify13QuadrilateralV10lowerRightAA5PointVvp");
  SWIFT_INLINE_THUNK Point getLowerLeft() const SWIFT_SYMBOL("s:13BlinkIDVerify13QuadrilateralV9lowerLeftAA5PointVvp");
private:
  SWIFT_INLINE_THUNK Quadrilateral(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Quadrilateral _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Quadrilateral(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Quadrilateral;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13QuadrilateralVD;
  static inline constexpr $s13BlinkIDVerify13QuadrilateralVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Quadrilateral {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Quadrilateral &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Quadrilateral &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Quadrilateral returnNewValue(T callable) {
    auto result = Quadrilateral::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Quadrilateral> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13QuadrilateralVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Quadrilateral> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Quadrilateral> = true;
template<>
struct implClassFor<BlinkIDVerify::Quadrilateral> { using type = BlinkIDVerify::_impl::_impl_Quadrilateral; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_RecognitionMode;

// Type metadata accessor for RecognitionMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify15RecognitionModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum RecognitionMode
extern "C" {
extern unsigned $s13BlinkIDVerify15RecognitionModeO4noneyA2CmFWC;
extern unsigned $s13BlinkIDVerify15RecognitionModeO5mrzIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify15RecognitionModeO7mrzVisayA2CmFWC;
extern unsigned $s13BlinkIDVerify15RecognitionModeO11mrzPassportyA2CmFWC;
extern unsigned $s13BlinkIDVerify15RecognitionModeO7photoIdyA2CmFWC;
extern unsigned $s13BlinkIDVerify15RecognitionModeO04fullC0yA2CmFWC;
extern unsigned $s13BlinkIDVerify15RecognitionModeO9barcodeIdyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO") RecognitionMode final {
public:
  SWIFT_INLINE_THUNK ~RecognitionMode() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionMode(const RecognitionMode &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionMode &operator =(const RecognitionMode &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RecognitionMode &operator =(RecognitionMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RecognitionMode(RecognitionMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO4noneyA2CmF"),
    mrzId SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO5mrzIdyA2CmF"),
    mrzVisa SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO7mrzVisayA2CmF"),
    mrzPassport SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO11mrzPassportyA2CmF"),
    photoId SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO7photoIdyA2CmF"),
    fullRecognition SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO04fullC0yA2CmF"),
    barcodeId SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO9barcodeIdyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } none SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_mrzId {  // impl struct for case mrzId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzId SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO5mrzIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzId() const;

  inline const static struct _impl_mrzVisa {  // impl struct for case mrzVisa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzVisa;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzVisa SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO7mrzVisayA2CmF");
  SWIFT_INLINE_THUNK bool isMrzVisa() const;

  inline const static struct _impl_mrzPassport {  // impl struct for case mrzPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzPassport;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzPassport SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO11mrzPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzPassport() const;

  inline const static struct _impl_photoId {  // impl struct for case photoId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::photoId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } photoId SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO7photoIdyA2CmF");
  SWIFT_INLINE_THUNK bool isPhotoId() const;

  inline const static struct _impl_fullRecognition {  // impl struct for case fullRecognition
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullRecognition;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } fullRecognition SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO04fullC0yA2CmF");
  SWIFT_INLINE_THUNK bool isFullRecognition() const;

  inline const static struct _impl_barcodeId {  // impl struct for case barcodeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } barcodeId SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO9barcodeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeId() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify15RecognitionModeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s13BlinkIDVerify15RecognitionModeO5mrzIdyA2CmFWC) return cases::mrzId;
    if (tag == _impl::$s13BlinkIDVerify15RecognitionModeO7mrzVisayA2CmFWC) return cases::mrzVisa;
    if (tag == _impl::$s13BlinkIDVerify15RecognitionModeO11mrzPassportyA2CmFWC) return cases::mrzPassport;
    if (tag == _impl::$s13BlinkIDVerify15RecognitionModeO7photoIdyA2CmFWC) return cases::photoId;
    if (tag == _impl::$s13BlinkIDVerify15RecognitionModeO04fullC0yA2CmFWC) return cases::fullRecognition;
    if (tag == _impl::$s13BlinkIDVerify15RecognitionModeO9barcodeIdyA2CmFWC) return cases::barcodeId;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<RecognitionMode> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify15RecognitionModeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK RecognitionMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RecognitionMode _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RecognitionMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RecognitionMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify15RecognitionModeOD;
  static inline constexpr $s13BlinkIDVerify15RecognitionModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RecognitionMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RecognitionMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RecognitionMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RecognitionMode returnNewValue(T callable) {
    auto result = RecognitionMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::RecognitionMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify15RecognitionModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::RecognitionMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::RecognitionMode> = true;
template<>
struct implClassFor<BlinkIDVerify::RecognitionMode> { using type = BlinkIDVerify::_impl::_impl_RecognitionMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

/// Document region.
namespace _impl {

class _impl_Region;

// Type metadata accessor for Region
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify6RegionOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Region
extern "C" {
extern unsigned $s13BlinkIDVerify6RegionO4noneyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7alabamayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6alaskayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7albertayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7arizonayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8arkansasyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO26australianCapitalTerritoryyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO15britishColumbiayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10californiayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8coloradoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11connecticutyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8delawareyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO18districtOfColumbiayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7floridayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7georgiayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6hawaiiyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO5idahoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8illinoisyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7indianayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO4iowayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6kansasyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8kentuckyyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9louisianayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO5maineyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8manitobayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8marylandyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13massachusettsyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8michiganyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9minnesotayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11mississippiyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8missouriyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7montanayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8nebraskayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6nevadayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO12newBrunswickyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO12newHampshireyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9newJerseyyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9newMexicoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13newSouthWalesyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7newYorkyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO17northernTerritoryyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13northCarolinayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11northDakotayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10novaScotiayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO4ohioyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8oklahomayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7ontarioyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6oregonyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO12pennsylvaniayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6quebecyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10queenslandyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11rhodeIslandyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO12saskatchewanyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO14southAustraliayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13southCarolinayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11southDakotayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8tasmaniayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9tennesseeyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO5texasyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO4utahyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7vermontyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8victoriayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8virginiayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10washingtonyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO16westernAustraliayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO12westVirginiayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9wisconsinyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7wyomingyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO5yukonyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO14ciudadDeMexicoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7jaliscoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO23newfoundlandAndLabradoryA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9nuevoLeonyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO14bajaCaliforniayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9chihuahuayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10guanajuatoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8guerreroyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6mexicoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9michoacanyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11newYorkCityyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10tamaulipasyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8veracruzyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7chiapasyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8coahuilayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7durangoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO14guerreroCoculayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO16guerreroJuchitanyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO21guerreroTepecoacuilcoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO16guerreroTlacoapayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7gujaratyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7hidalgoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9karnatakayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6keralayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO17khyberPakhtunkhwayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13madhyaPradeshyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11maharashtrayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7morelosyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7nayarityA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6oaxacayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6pueblayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6punjabyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9queretaroyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13sanLuisPotosiyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7sinaloayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6sonorayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7tabascoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9tamilNaduyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7yucatanyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO9zacatecasyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO14aguascalientesyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO17bajaCaliforniaSuryA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8campecheyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6colimayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO23quintanaRooBenitoJuarezyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11quintanaRooyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO22quintanaRooSolidaridadyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8tlaxcalayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO18quintanaRooCozumelyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8saoPaoloyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO12rioDeJaneiroyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO14rioGrandeDoSulyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO20northwestTerritoriesyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7nunavutyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO18princeEdwardIslandyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO15distritoFederalyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO8maranhaoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10matoGrossoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO11minasGeraisyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO4parayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO6paranayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO10pernambucoyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13santaCatarinayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO13andhraPradeshyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO5cearayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO5goiasyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7haryanayA2CmFWC;
extern unsigned $s13BlinkIDVerify6RegionO7sergipeyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO") Region final {
public:
  SWIFT_INLINE_THUNK ~Region() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Region(const Region &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Region &operator =(const Region &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Region &operator =(Region &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Region(Region &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4noneyA2CmF"),
    alabama SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7alabamayA2CmF"),
    alaska SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6alaskayA2CmF"),
    alberta SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7albertayA2CmF"),
    arizona SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7arizonayA2CmF"),
    arkansas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8arkansasyA2CmF"),
    australianCapitalTerritory SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO26australianCapitalTerritoryyA2CmF"),
    britishColumbia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO15britishColumbiayA2CmF"),
    california SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10californiayA2CmF"),
    colorado SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8coloradoyA2CmF"),
    connecticut SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11connecticutyA2CmF"),
    delaware SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8delawareyA2CmF"),
    districtOfColumbia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO18districtOfColumbiayA2CmF"),
    florida SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7floridayA2CmF"),
    georgia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7georgiayA2CmF"),
    hawaii SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6hawaiiyA2CmF"),
    idaho SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5idahoyA2CmF"),
    illinois SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8illinoisyA2CmF"),
    indiana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7indianayA2CmF"),
    iowa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4iowayA2CmF"),
    kansas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6kansasyA2CmF"),
    kentucky SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8kentuckyyA2CmF"),
    louisiana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9louisianayA2CmF"),
    maine SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5maineyA2CmF"),
    manitoba SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8manitobayA2CmF"),
    maryland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8marylandyA2CmF"),
    massachusetts SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13massachusettsyA2CmF"),
    michigan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8michiganyA2CmF"),
    minnesota SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9minnesotayA2CmF"),
    mississippi SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11mississippiyA2CmF"),
    missouri SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8missouriyA2CmF"),
    montana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7montanayA2CmF"),
    nebraska SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8nebraskayA2CmF"),
    nevada SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6nevadayA2CmF"),
    newBrunswick SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12newBrunswickyA2CmF"),
    newHampshire SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12newHampshireyA2CmF"),
    newJersey SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9newJerseyyA2CmF"),
    newMexico SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9newMexicoyA2CmF"),
    newSouthWales SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13newSouthWalesyA2CmF"),
    newYork SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7newYorkyA2CmF"),
    northernTerritory SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO17northernTerritoryyA2CmF"),
    northCarolina SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13northCarolinayA2CmF"),
    northDakota SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11northDakotayA2CmF"),
    novaScotia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10novaScotiayA2CmF"),
    ohio SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4ohioyA2CmF"),
    oklahoma SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8oklahomayA2CmF"),
    ontario SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7ontarioyA2CmF"),
    oregon SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6oregonyA2CmF"),
    pennsylvania SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12pennsylvaniayA2CmF"),
    quebec SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6quebecyA2CmF"),
    queensland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10queenslandyA2CmF"),
    rhodeIsland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11rhodeIslandyA2CmF"),
    saskatchewan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12saskatchewanyA2CmF"),
    southAustralia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14southAustraliayA2CmF"),
    southCarolina SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13southCarolinayA2CmF"),
    southDakota SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11southDakotayA2CmF"),
    tasmania SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8tasmaniayA2CmF"),
    tennessee SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9tennesseeyA2CmF"),
    texas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5texasyA2CmF"),
    utah SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4utahyA2CmF"),
    vermont SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7vermontyA2CmF"),
    victoria SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8victoriayA2CmF"),
    virginia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8virginiayA2CmF"),
    washington SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10washingtonyA2CmF"),
    westernAustralia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO16westernAustraliayA2CmF"),
    westVirginia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12westVirginiayA2CmF"),
    wisconsin SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9wisconsinyA2CmF"),
    wyoming SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7wyomingyA2CmF"),
    yukon SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5yukonyA2CmF"),
    ciudadDeMexico SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14ciudadDeMexicoyA2CmF"),
    jalisco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7jaliscoyA2CmF"),
    newfoundlandAndLabrador SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO23newfoundlandAndLabradoryA2CmF"),
    nuevoLeon SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9nuevoLeonyA2CmF"),
    bajaCalifornia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14bajaCaliforniayA2CmF"),
    chihuahua SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9chihuahuayA2CmF"),
    guanajuato SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10guanajuatoyA2CmF"),
    guerrero SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8guerreroyA2CmF"),
    mexico SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6mexicoyA2CmF"),
    michoacan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9michoacanyA2CmF"),
    newYorkCity SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11newYorkCityyA2CmF"),
    tamaulipas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10tamaulipasyA2CmF"),
    veracruz SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8veracruzyA2CmF"),
    chiapas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7chiapasyA2CmF"),
    coahuila SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8coahuilayA2CmF"),
    durango SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7durangoyA2CmF"),
    guerreroCocula SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14guerreroCoculayA2CmF"),
    guerreroJuchitan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO16guerreroJuchitanyA2CmF"),
    guerreroTepecoacuilco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO21guerreroTepecoacuilcoyA2CmF"),
    guerreroTlacoapa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO16guerreroTlacoapayA2CmF"),
    gujarat SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7gujaratyA2CmF"),
    hidalgo SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7hidalgoyA2CmF"),
    karnataka SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9karnatakayA2CmF"),
    kerala SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6keralayA2CmF"),
    khyberPakhtunkhwa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO17khyberPakhtunkhwayA2CmF"),
    madhyaPradesh SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13madhyaPradeshyA2CmF"),
    maharashtra SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11maharashtrayA2CmF"),
    morelos SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7morelosyA2CmF"),
    nayarit SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7nayarityA2CmF"),
    oaxaca SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6oaxacayA2CmF"),
    puebla SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6pueblayA2CmF"),
    punjab SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6punjabyA2CmF"),
    queretaro SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9queretaroyA2CmF"),
    sanLuisPotosi SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13sanLuisPotosiyA2CmF"),
    sinaloa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7sinaloayA2CmF"),
    sonora SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6sonorayA2CmF"),
    tabasco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7tabascoyA2CmF"),
    tamilNadu SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9tamilNaduyA2CmF"),
    yucatan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7yucatanyA2CmF"),
    zacatecas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9zacatecasyA2CmF"),
    aguascalientes SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14aguascalientesyA2CmF"),
    bajaCaliforniaSur SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO17bajaCaliforniaSuryA2CmF"),
    campeche SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8campecheyA2CmF"),
    colima SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6colimayA2CmF"),
    quintanaRooBenitoJuarez SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO23quintanaRooBenitoJuarezyA2CmF"),
    quintanaRoo SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11quintanaRooyA2CmF"),
    quintanaRooSolidaridad SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO22quintanaRooSolidaridadyA2CmF"),
    tlaxcala SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8tlaxcalayA2CmF"),
    quintanaRooCozumel SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO18quintanaRooCozumelyA2CmF"),
    saoPaolo SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8saoPaoloyA2CmF"),
    rioDeJaneiro SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12rioDeJaneiroyA2CmF"),
    rioGrandeDoSul SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14rioGrandeDoSulyA2CmF"),
    northwestTerritories SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO20northwestTerritoriesyA2CmF"),
    nunavut SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7nunavutyA2CmF"),
    princeEdwardIsland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO18princeEdwardIslandyA2CmF"),
    distritoFederal SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO15distritoFederalyA2CmF"),
    maranhao SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8maranhaoyA2CmF"),
    matoGrosso SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10matoGrossoyA2CmF"),
    minasGerais SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11minasGeraisyA2CmF"),
    para SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4parayA2CmF"),
    parana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6paranayA2CmF"),
    pernambuco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10pernambucoyA2CmF"),
    santaCatarina SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13santaCatarinayA2CmF"),
    andhraPradesh SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13andhraPradeshyA2CmF"),
    ceara SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5cearayA2CmF"),
    goias SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5goiasyA2CmF"),
    guerreroAcapulcoDeJuarez SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO24guerreroAcapulcoDeJuarezyA2CmF"),
    haryana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7haryanayA2CmF"),
    sergipe SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7sergipeyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } none SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_alabama {  // impl struct for case alabama
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alabama;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alabama SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7alabamayA2CmF");
  SWIFT_INLINE_THUNK bool isAlabama() const;

  inline const static struct _impl_alaska {  // impl struct for case alaska
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alaska;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alaska SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6alaskayA2CmF");
  SWIFT_INLINE_THUNK bool isAlaska() const;

  inline const static struct _impl_alberta {  // impl struct for case alberta
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alberta;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alberta SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7albertayA2CmF");
  SWIFT_INLINE_THUNK bool isAlberta() const;

  inline const static struct _impl_arizona {  // impl struct for case arizona
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arizona;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } arizona SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7arizonayA2CmF");
  SWIFT_INLINE_THUNK bool isArizona() const;

  inline const static struct _impl_arkansas {  // impl struct for case arkansas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arkansas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } arkansas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8arkansasyA2CmF");
  SWIFT_INLINE_THUNK bool isArkansas() const;

  inline const static struct _impl_australianCapitalTerritory {  // impl struct for case australianCapitalTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::australianCapitalTerritory;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } australianCapitalTerritory SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO26australianCapitalTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isAustralianCapitalTerritory() const;

  inline const static struct _impl_britishColumbia {  // impl struct for case britishColumbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::britishColumbia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } britishColumbia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO15britishColumbiayA2CmF");
  SWIFT_INLINE_THUNK bool isBritishColumbia() const;

  inline const static struct _impl_california {  // impl struct for case california
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::california;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } california SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10californiayA2CmF");
  SWIFT_INLINE_THUNK bool isCalifornia() const;

  inline const static struct _impl_colorado {  // impl struct for case colorado
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colorado;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } colorado SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8coloradoyA2CmF");
  SWIFT_INLINE_THUNK bool isColorado() const;

  inline const static struct _impl_connecticut {  // impl struct for case connecticut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::connecticut;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } connecticut SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11connecticutyA2CmF");
  SWIFT_INLINE_THUNK bool isConnecticut() const;

  inline const static struct _impl_delaware {  // impl struct for case delaware
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::delaware;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } delaware SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8delawareyA2CmF");
  SWIFT_INLINE_THUNK bool isDelaware() const;

  inline const static struct _impl_districtOfColumbia {  // impl struct for case districtOfColumbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::districtOfColumbia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } districtOfColumbia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO18districtOfColumbiayA2CmF");
  SWIFT_INLINE_THUNK bool isDistrictOfColumbia() const;

  inline const static struct _impl_florida {  // impl struct for case florida
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::florida;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } florida SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7floridayA2CmF");
  SWIFT_INLINE_THUNK bool isFlorida() const;

  inline const static struct _impl_georgia {  // impl struct for case georgia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::georgia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } georgia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7georgiayA2CmF");
  SWIFT_INLINE_THUNK bool isGeorgia() const;

  inline const static struct _impl_hawaii {  // impl struct for case hawaii
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hawaii;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } hawaii SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6hawaiiyA2CmF");
  SWIFT_INLINE_THUNK bool isHawaii() const;

  inline const static struct _impl_idaho {  // impl struct for case idaho
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::idaho;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } idaho SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5idahoyA2CmF");
  SWIFT_INLINE_THUNK bool isIdaho() const;

  inline const static struct _impl_illinois {  // impl struct for case illinois
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::illinois;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } illinois SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8illinoisyA2CmF");
  SWIFT_INLINE_THUNK bool isIllinois() const;

  inline const static struct _impl_indiana {  // impl struct for case indiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::indiana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } indiana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7indianayA2CmF");
  SWIFT_INLINE_THUNK bool isIndiana() const;

  inline const static struct _impl_iowa {  // impl struct for case iowa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iowa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } iowa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4iowayA2CmF");
  SWIFT_INLINE_THUNK bool isIowa() const;

  inline const static struct _impl_kansas {  // impl struct for case kansas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kansas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kansas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6kansasyA2CmF");
  SWIFT_INLINE_THUNK bool isKansas() const;

  inline const static struct _impl_kentucky {  // impl struct for case kentucky
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kentucky;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kentucky SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8kentuckyyA2CmF");
  SWIFT_INLINE_THUNK bool isKentucky() const;

  inline const static struct _impl_louisiana {  // impl struct for case louisiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::louisiana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } louisiana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9louisianayA2CmF");
  SWIFT_INLINE_THUNK bool isLouisiana() const;

  inline const static struct _impl_maine {  // impl struct for case maine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maine;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maine SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5maineyA2CmF");
  SWIFT_INLINE_THUNK bool isMaine() const;

  inline const static struct _impl_manitoba {  // impl struct for case manitoba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::manitoba;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } manitoba SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8manitobayA2CmF");
  SWIFT_INLINE_THUNK bool isManitoba() const;

  inline const static struct _impl_maryland {  // impl struct for case maryland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maryland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maryland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8marylandyA2CmF");
  SWIFT_INLINE_THUNK bool isMaryland() const;

  inline const static struct _impl_massachusetts {  // impl struct for case massachusetts
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::massachusetts;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } massachusetts SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13massachusettsyA2CmF");
  SWIFT_INLINE_THUNK bool isMassachusetts() const;

  inline const static struct _impl_michigan {  // impl struct for case michigan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::michigan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } michigan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8michiganyA2CmF");
  SWIFT_INLINE_THUNK bool isMichigan() const;

  inline const static struct _impl_minnesota {  // impl struct for case minnesota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minnesota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } minnesota SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9minnesotayA2CmF");
  SWIFT_INLINE_THUNK bool isMinnesota() const;

  inline const static struct _impl_mississippi {  // impl struct for case mississippi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mississippi;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } mississippi SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11mississippiyA2CmF");
  SWIFT_INLINE_THUNK bool isMississippi() const;

  inline const static struct _impl_missouri {  // impl struct for case missouri
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::missouri;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } missouri SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8missouriyA2CmF");
  SWIFT_INLINE_THUNK bool isMissouri() const;

  inline const static struct _impl_montana {  // impl struct for case montana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } montana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7montanayA2CmF");
  SWIFT_INLINE_THUNK bool isMontana() const;

  inline const static struct _impl_nebraska {  // impl struct for case nebraska
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nebraska;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nebraska SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8nebraskayA2CmF");
  SWIFT_INLINE_THUNK bool isNebraska() const;

  inline const static struct _impl_nevada {  // impl struct for case nevada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nevada;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nevada SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6nevadayA2CmF");
  SWIFT_INLINE_THUNK bool isNevada() const;

  inline const static struct _impl_newBrunswick {  // impl struct for case newBrunswick
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newBrunswick;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newBrunswick SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12newBrunswickyA2CmF");
  SWIFT_INLINE_THUNK bool isNewBrunswick() const;

  inline const static struct _impl_newHampshire {  // impl struct for case newHampshire
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newHampshire;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newHampshire SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12newHampshireyA2CmF");
  SWIFT_INLINE_THUNK bool isNewHampshire() const;

  inline const static struct _impl_newJersey {  // impl struct for case newJersey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newJersey;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newJersey SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9newJerseyyA2CmF");
  SWIFT_INLINE_THUNK bool isNewJersey() const;

  inline const static struct _impl_newMexico {  // impl struct for case newMexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newMexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newMexico SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9newMexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isNewMexico() const;

  inline const static struct _impl_newSouthWales {  // impl struct for case newSouthWales
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newSouthWales;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newSouthWales SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13newSouthWalesyA2CmF");
  SWIFT_INLINE_THUNK bool isNewSouthWales() const;

  inline const static struct _impl_newYork {  // impl struct for case newYork
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newYork;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newYork SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7newYorkyA2CmF");
  SWIFT_INLINE_THUNK bool isNewYork() const;

  inline const static struct _impl_northernTerritory {  // impl struct for case northernTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernTerritory;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northernTerritory SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO17northernTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernTerritory() const;

  inline const static struct _impl_northCarolina {  // impl struct for case northCarolina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northCarolina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northCarolina SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13northCarolinayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthCarolina() const;

  inline const static struct _impl_northDakota {  // impl struct for case northDakota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northDakota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northDakota SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11northDakotayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthDakota() const;

  inline const static struct _impl_novaScotia {  // impl struct for case novaScotia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::novaScotia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } novaScotia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10novaScotiayA2CmF");
  SWIFT_INLINE_THUNK bool isNovaScotia() const;

  inline const static struct _impl_ohio {  // impl struct for case ohio
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ohio;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ohio SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4ohioyA2CmF");
  SWIFT_INLINE_THUNK bool isOhio() const;

  inline const static struct _impl_oklahoma {  // impl struct for case oklahoma
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oklahoma;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oklahoma SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8oklahomayA2CmF");
  SWIFT_INLINE_THUNK bool isOklahoma() const;

  inline const static struct _impl_ontario {  // impl struct for case ontario
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ontario;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ontario SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7ontarioyA2CmF");
  SWIFT_INLINE_THUNK bool isOntario() const;

  inline const static struct _impl_oregon {  // impl struct for case oregon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oregon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oregon SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6oregonyA2CmF");
  SWIFT_INLINE_THUNK bool isOregon() const;

  inline const static struct _impl_pennsylvania {  // impl struct for case pennsylvania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pennsylvania;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } pennsylvania SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12pennsylvaniayA2CmF");
  SWIFT_INLINE_THUNK bool isPennsylvania() const;

  inline const static struct _impl_quebec {  // impl struct for case quebec
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quebec;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quebec SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6quebecyA2CmF");
  SWIFT_INLINE_THUNK bool isQuebec() const;

  inline const static struct _impl_queensland {  // impl struct for case queensland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::queensland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } queensland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10queenslandyA2CmF");
  SWIFT_INLINE_THUNK bool isQueensland() const;

  inline const static struct _impl_rhodeIsland {  // impl struct for case rhodeIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rhodeIsland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rhodeIsland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11rhodeIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isRhodeIsland() const;

  inline const static struct _impl_saskatchewan {  // impl struct for case saskatchewan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saskatchewan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } saskatchewan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12saskatchewanyA2CmF");
  SWIFT_INLINE_THUNK bool isSaskatchewan() const;

  inline const static struct _impl_southAustralia {  // impl struct for case southAustralia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southAustralia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southAustralia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14southAustraliayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthAustralia() const;

  inline const static struct _impl_southCarolina {  // impl struct for case southCarolina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southCarolina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southCarolina SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13southCarolinayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthCarolina() const;

  inline const static struct _impl_southDakota {  // impl struct for case southDakota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southDakota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southDakota SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11southDakotayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthDakota() const;

  inline const static struct _impl_tasmania {  // impl struct for case tasmania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tasmania;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tasmania SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8tasmaniayA2CmF");
  SWIFT_INLINE_THUNK bool isTasmania() const;

  inline const static struct _impl_tennessee {  // impl struct for case tennessee
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tennessee;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tennessee SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9tennesseeyA2CmF");
  SWIFT_INLINE_THUNK bool isTennessee() const;

  inline const static struct _impl_texas {  // impl struct for case texas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::texas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } texas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5texasyA2CmF");
  SWIFT_INLINE_THUNK bool isTexas() const;

  inline const static struct _impl_utah {  // impl struct for case utah
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::utah;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } utah SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4utahyA2CmF");
  SWIFT_INLINE_THUNK bool isUtah() const;

  inline const static struct _impl_vermont {  // impl struct for case vermont
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vermont;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } vermont SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7vermontyA2CmF");
  SWIFT_INLINE_THUNK bool isVermont() const;

  inline const static struct _impl_victoria {  // impl struct for case victoria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::victoria;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } victoria SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8victoriayA2CmF");
  SWIFT_INLINE_THUNK bool isVictoria() const;

  inline const static struct _impl_virginia {  // impl struct for case virginia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } virginia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8virginiayA2CmF");
  SWIFT_INLINE_THUNK bool isVirginia() const;

  inline const static struct _impl_washington {  // impl struct for case washington
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::washington;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } washington SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10washingtonyA2CmF");
  SWIFT_INLINE_THUNK bool isWashington() const;

  inline const static struct _impl_westernAustralia {  // impl struct for case westernAustralia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westernAustralia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } westernAustralia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO16westernAustraliayA2CmF");
  SWIFT_INLINE_THUNK bool isWesternAustralia() const;

  inline const static struct _impl_westVirginia {  // impl struct for case westVirginia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westVirginia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } westVirginia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12westVirginiayA2CmF");
  SWIFT_INLINE_THUNK bool isWestVirginia() const;

  inline const static struct _impl_wisconsin {  // impl struct for case wisconsin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wisconsin;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } wisconsin SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9wisconsinyA2CmF");
  SWIFT_INLINE_THUNK bool isWisconsin() const;

  inline const static struct _impl_wyoming {  // impl struct for case wyoming
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wyoming;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } wyoming SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7wyomingyA2CmF");
  SWIFT_INLINE_THUNK bool isWyoming() const;

  inline const static struct _impl_yukon {  // impl struct for case yukon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yukon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } yukon SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5yukonyA2CmF");
  SWIFT_INLINE_THUNK bool isYukon() const;

  inline const static struct _impl_ciudadDeMexico {  // impl struct for case ciudadDeMexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ciudadDeMexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ciudadDeMexico SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14ciudadDeMexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isCiudadDeMexico() const;

  inline const static struct _impl_jalisco {  // impl struct for case jalisco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jalisco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } jalisco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7jaliscoyA2CmF");
  SWIFT_INLINE_THUNK bool isJalisco() const;

  inline const static struct _impl_newfoundlandAndLabrador {  // impl struct for case newfoundlandAndLabrador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newfoundlandAndLabrador;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newfoundlandAndLabrador SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO23newfoundlandAndLabradoryA2CmF");
  SWIFT_INLINE_THUNK bool isNewfoundlandAndLabrador() const;

  inline const static struct _impl_nuevoLeon {  // impl struct for case nuevoLeon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nuevoLeon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nuevoLeon SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9nuevoLeonyA2CmF");
  SWIFT_INLINE_THUNK bool isNuevoLeon() const;

  inline const static struct _impl_bajaCalifornia {  // impl struct for case bajaCalifornia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bajaCalifornia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bajaCalifornia SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14bajaCaliforniayA2CmF");
  SWIFT_INLINE_THUNK bool isBajaCalifornia() const;

  inline const static struct _impl_chihuahua {  // impl struct for case chihuahua
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chihuahua;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } chihuahua SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9chihuahuayA2CmF");
  SWIFT_INLINE_THUNK bool isChihuahua() const;

  inline const static struct _impl_guanajuato {  // impl struct for case guanajuato
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guanajuato;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guanajuato SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10guanajuatoyA2CmF");
  SWIFT_INLINE_THUNK bool isGuanajuato() const;

  inline const static struct _impl_guerrero {  // impl struct for case guerrero
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerrero;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerrero SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8guerreroyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerrero() const;

  inline const static struct _impl_mexico {  // impl struct for case mexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } mexico SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6mexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isMexico() const;

  inline const static struct _impl_michoacan {  // impl struct for case michoacan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::michoacan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } michoacan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9michoacanyA2CmF");
  SWIFT_INLINE_THUNK bool isMichoacan() const;

  inline const static struct _impl_newYorkCity {  // impl struct for case newYorkCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newYorkCity;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newYorkCity SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11newYorkCityyA2CmF");
  SWIFT_INLINE_THUNK bool isNewYorkCity() const;

  inline const static struct _impl_tamaulipas {  // impl struct for case tamaulipas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tamaulipas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tamaulipas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10tamaulipasyA2CmF");
  SWIFT_INLINE_THUNK bool isTamaulipas() const;

  inline const static struct _impl_veracruz {  // impl struct for case veracruz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veracruz;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } veracruz SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8veracruzyA2CmF");
  SWIFT_INLINE_THUNK bool isVeracruz() const;

  inline const static struct _impl_chiapas {  // impl struct for case chiapas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chiapas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } chiapas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7chiapasyA2CmF");
  SWIFT_INLINE_THUNK bool isChiapas() const;

  inline const static struct _impl_coahuila {  // impl struct for case coahuila
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::coahuila;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } coahuila SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8coahuilayA2CmF");
  SWIFT_INLINE_THUNK bool isCoahuila() const;

  inline const static struct _impl_durango {  // impl struct for case durango
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::durango;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } durango SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7durangoyA2CmF");
  SWIFT_INLINE_THUNK bool isDurango() const;

  inline const static struct _impl_guerreroCocula {  // impl struct for case guerreroCocula
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroCocula;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroCocula SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14guerreroCoculayA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroCocula() const;

  inline const static struct _impl_guerreroJuchitan {  // impl struct for case guerreroJuchitan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroJuchitan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroJuchitan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO16guerreroJuchitanyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroJuchitan() const;

  inline const static struct _impl_guerreroTepecoacuilco {  // impl struct for case guerreroTepecoacuilco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroTepecoacuilco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroTepecoacuilco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO21guerreroTepecoacuilcoyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroTepecoacuilco() const;

  inline const static struct _impl_guerreroTlacoapa {  // impl struct for case guerreroTlacoapa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroTlacoapa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroTlacoapa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO16guerreroTlacoapayA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroTlacoapa() const;

  inline const static struct _impl_gujarat {  // impl struct for case gujarat
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gujarat;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } gujarat SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7gujaratyA2CmF");
  SWIFT_INLINE_THUNK bool isGujarat() const;

  inline const static struct _impl_hidalgo {  // impl struct for case hidalgo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hidalgo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } hidalgo SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7hidalgoyA2CmF");
  SWIFT_INLINE_THUNK bool isHidalgo() const;

  inline const static struct _impl_karnataka {  // impl struct for case karnataka
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::karnataka;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } karnataka SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9karnatakayA2CmF");
  SWIFT_INLINE_THUNK bool isKarnataka() const;

  inline const static struct _impl_kerala {  // impl struct for case kerala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kerala;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kerala SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6keralayA2CmF");
  SWIFT_INLINE_THUNK bool isKerala() const;

  inline const static struct _impl_khyberPakhtunkhwa {  // impl struct for case khyberPakhtunkhwa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::khyberPakhtunkhwa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } khyberPakhtunkhwa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO17khyberPakhtunkhwayA2CmF");
  SWIFT_INLINE_THUNK bool isKhyberPakhtunkhwa() const;

  inline const static struct _impl_madhyaPradesh {  // impl struct for case madhyaPradesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::madhyaPradesh;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } madhyaPradesh SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13madhyaPradeshyA2CmF");
  SWIFT_INLINE_THUNK bool isMadhyaPradesh() const;

  inline const static struct _impl_maharashtra {  // impl struct for case maharashtra
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maharashtra;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maharashtra SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11maharashtrayA2CmF");
  SWIFT_INLINE_THUNK bool isMaharashtra() const;

  inline const static struct _impl_morelos {  // impl struct for case morelos
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::morelos;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } morelos SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7morelosyA2CmF");
  SWIFT_INLINE_THUNK bool isMorelos() const;

  inline const static struct _impl_nayarit {  // impl struct for case nayarit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nayarit;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nayarit SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7nayarityA2CmF");
  SWIFT_INLINE_THUNK bool isNayarit() const;

  inline const static struct _impl_oaxaca {  // impl struct for case oaxaca
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oaxaca;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oaxaca SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6oaxacayA2CmF");
  SWIFT_INLINE_THUNK bool isOaxaca() const;

  inline const static struct _impl_puebla {  // impl struct for case puebla
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::puebla;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } puebla SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6pueblayA2CmF");
  SWIFT_INLINE_THUNK bool isPuebla() const;

  inline const static struct _impl_punjab {  // impl struct for case punjab
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::punjab;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } punjab SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6punjabyA2CmF");
  SWIFT_INLINE_THUNK bool isPunjab() const;

  inline const static struct _impl_queretaro {  // impl struct for case queretaro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::queretaro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } queretaro SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9queretaroyA2CmF");
  SWIFT_INLINE_THUNK bool isQueretaro() const;

  inline const static struct _impl_sanLuisPotosi {  // impl struct for case sanLuisPotosi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sanLuisPotosi;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sanLuisPotosi SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13sanLuisPotosiyA2CmF");
  SWIFT_INLINE_THUNK bool isSanLuisPotosi() const;

  inline const static struct _impl_sinaloa {  // impl struct for case sinaloa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sinaloa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sinaloa SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7sinaloayA2CmF");
  SWIFT_INLINE_THUNK bool isSinaloa() const;

  inline const static struct _impl_sonora {  // impl struct for case sonora
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sonora;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sonora SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6sonorayA2CmF");
  SWIFT_INLINE_THUNK bool isSonora() const;

  inline const static struct _impl_tabasco {  // impl struct for case tabasco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tabasco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tabasco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7tabascoyA2CmF");
  SWIFT_INLINE_THUNK bool isTabasco() const;

  inline const static struct _impl_tamilNadu {  // impl struct for case tamilNadu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tamilNadu;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tamilNadu SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9tamilNaduyA2CmF");
  SWIFT_INLINE_THUNK bool isTamilNadu() const;

  inline const static struct _impl_yucatan {  // impl struct for case yucatan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yucatan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } yucatan SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7yucatanyA2CmF");
  SWIFT_INLINE_THUNK bool isYucatan() const;

  inline const static struct _impl_zacatecas {  // impl struct for case zacatecas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zacatecas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } zacatecas SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO9zacatecasyA2CmF");
  SWIFT_INLINE_THUNK bool isZacatecas() const;

  inline const static struct _impl_aguascalientes {  // impl struct for case aguascalientes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aguascalientes;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } aguascalientes SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14aguascalientesyA2CmF");
  SWIFT_INLINE_THUNK bool isAguascalientes() const;

  inline const static struct _impl_bajaCaliforniaSur {  // impl struct for case bajaCaliforniaSur
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bajaCaliforniaSur;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bajaCaliforniaSur SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO17bajaCaliforniaSuryA2CmF");
  SWIFT_INLINE_THUNK bool isBajaCaliforniaSur() const;

  inline const static struct _impl_campeche {  // impl struct for case campeche
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::campeche;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } campeche SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8campecheyA2CmF");
  SWIFT_INLINE_THUNK bool isCampeche() const;

  inline const static struct _impl_colima {  // impl struct for case colima
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colima;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } colima SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6colimayA2CmF");
  SWIFT_INLINE_THUNK bool isColima() const;

  inline const static struct _impl_quintanaRooBenitoJuarez {  // impl struct for case quintanaRooBenitoJuarez
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooBenitoJuarez;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooBenitoJuarez SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO23quintanaRooBenitoJuarezyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooBenitoJuarez() const;

  inline const static struct _impl_quintanaRoo {  // impl struct for case quintanaRoo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRoo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRoo SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11quintanaRooyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRoo() const;

  inline const static struct _impl_quintanaRooSolidaridad {  // impl struct for case quintanaRooSolidaridad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooSolidaridad;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooSolidaridad SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO22quintanaRooSolidaridadyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooSolidaridad() const;

  inline const static struct _impl_tlaxcala {  // impl struct for case tlaxcala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tlaxcala;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tlaxcala SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8tlaxcalayA2CmF");
  SWIFT_INLINE_THUNK bool isTlaxcala() const;

  inline const static struct _impl_quintanaRooCozumel {  // impl struct for case quintanaRooCozumel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooCozumel;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooCozumel SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO18quintanaRooCozumelyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooCozumel() const;

  inline const static struct _impl_saoPaolo {  // impl struct for case saoPaolo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saoPaolo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } saoPaolo SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8saoPaoloyA2CmF");
  SWIFT_INLINE_THUNK bool isSaoPaolo() const;

  inline const static struct _impl_rioDeJaneiro {  // impl struct for case rioDeJaneiro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rioDeJaneiro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rioDeJaneiro SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO12rioDeJaneiroyA2CmF");
  SWIFT_INLINE_THUNK bool isRioDeJaneiro() const;

  inline const static struct _impl_rioGrandeDoSul {  // impl struct for case rioGrandeDoSul
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rioGrandeDoSul;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rioGrandeDoSul SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO14rioGrandeDoSulyA2CmF");
  SWIFT_INLINE_THUNK bool isRioGrandeDoSul() const;

  inline const static struct _impl_northwestTerritories {  // impl struct for case northwestTerritories
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northwestTerritories;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northwestTerritories SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO20northwestTerritoriesyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthwestTerritories() const;

  inline const static struct _impl_nunavut {  // impl struct for case nunavut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nunavut;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nunavut SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7nunavutyA2CmF");
  SWIFT_INLINE_THUNK bool isNunavut() const;

  inline const static struct _impl_princeEdwardIsland {  // impl struct for case princeEdwardIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::princeEdwardIsland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } princeEdwardIsland SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO18princeEdwardIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isPrinceEdwardIsland() const;

  inline const static struct _impl_distritoFederal {  // impl struct for case distritoFederal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::distritoFederal;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } distritoFederal SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO15distritoFederalyA2CmF");
  SWIFT_INLINE_THUNK bool isDistritoFederal() const;

  inline const static struct _impl_maranhao {  // impl struct for case maranhao
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maranhao;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maranhao SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8maranhaoyA2CmF");
  SWIFT_INLINE_THUNK bool isMaranhao() const;

  inline const static struct _impl_matoGrosso {  // impl struct for case matoGrosso
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::matoGrosso;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } matoGrosso SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10matoGrossoyA2CmF");
  SWIFT_INLINE_THUNK bool isMatoGrosso() const;

  inline const static struct _impl_minasGerais {  // impl struct for case minasGerais
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minasGerais;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } minasGerais SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO11minasGeraisyA2CmF");
  SWIFT_INLINE_THUNK bool isMinasGerais() const;

  inline const static struct _impl_para {  // impl struct for case para
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::para;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } para SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO4parayA2CmF");
  SWIFT_INLINE_THUNK bool isPara() const;

  inline const static struct _impl_parana {  // impl struct for case parana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::parana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } parana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO6paranayA2CmF");
  SWIFT_INLINE_THUNK bool isParana() const;

  inline const static struct _impl_pernambuco {  // impl struct for case pernambuco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pernambuco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } pernambuco SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO10pernambucoyA2CmF");
  SWIFT_INLINE_THUNK bool isPernambuco() const;

  inline const static struct _impl_santaCatarina {  // impl struct for case santaCatarina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::santaCatarina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } santaCatarina SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13santaCatarinayA2CmF");
  SWIFT_INLINE_THUNK bool isSantaCatarina() const;

  inline const static struct _impl_andhraPradesh {  // impl struct for case andhraPradesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::andhraPradesh;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } andhraPradesh SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO13andhraPradeshyA2CmF");
  SWIFT_INLINE_THUNK bool isAndhraPradesh() const;

  inline const static struct _impl_ceara {  // impl struct for case ceara
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ceara;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ceara SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5cearayA2CmF");
  SWIFT_INLINE_THUNK bool isCeara() const;

  inline const static struct _impl_goias {  // impl struct for case goias
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::goias;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } goias SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO5goiasyA2CmF");
  SWIFT_INLINE_THUNK bool isGoias() const;

  inline const static struct _impl_guerreroAcapulcoDeJuarez {  // impl struct for case guerreroAcapulcoDeJuarez
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroAcapulcoDeJuarez;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroAcapulcoDeJuarez SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO24guerreroAcapulcoDeJuarezyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroAcapulcoDeJuarez() const;

  inline const static struct _impl_haryana {  // impl struct for case haryana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::haryana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } haryana SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7haryanayA2CmF");
  SWIFT_INLINE_THUNK bool isHaryana() const;

  inline const static struct _impl_sergipe {  // impl struct for case sergipe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sergipe;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sergipe SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO7sergipeyA2CmF");
  SWIFT_INLINE_THUNK bool isSergipe() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify6RegionO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7alabamayA2CmFWC) return cases::alabama;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6alaskayA2CmFWC) return cases::alaska;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7albertayA2CmFWC) return cases::alberta;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7arizonayA2CmFWC) return cases::arizona;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8arkansasyA2CmFWC) return cases::arkansas;
    if (tag == _impl::$s13BlinkIDVerify6RegionO26australianCapitalTerritoryyA2CmFWC) return cases::australianCapitalTerritory;
    if (tag == _impl::$s13BlinkIDVerify6RegionO15britishColumbiayA2CmFWC) return cases::britishColumbia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10californiayA2CmFWC) return cases::california;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8coloradoyA2CmFWC) return cases::colorado;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11connecticutyA2CmFWC) return cases::connecticut;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8delawareyA2CmFWC) return cases::delaware;
    if (tag == _impl::$s13BlinkIDVerify6RegionO18districtOfColumbiayA2CmFWC) return cases::districtOfColumbia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7floridayA2CmFWC) return cases::florida;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7georgiayA2CmFWC) return cases::georgia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6hawaiiyA2CmFWC) return cases::hawaii;
    if (tag == _impl::$s13BlinkIDVerify6RegionO5idahoyA2CmFWC) return cases::idaho;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8illinoisyA2CmFWC) return cases::illinois;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7indianayA2CmFWC) return cases::indiana;
    if (tag == _impl::$s13BlinkIDVerify6RegionO4iowayA2CmFWC) return cases::iowa;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6kansasyA2CmFWC) return cases::kansas;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8kentuckyyA2CmFWC) return cases::kentucky;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9louisianayA2CmFWC) return cases::louisiana;
    if (tag == _impl::$s13BlinkIDVerify6RegionO5maineyA2CmFWC) return cases::maine;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8manitobayA2CmFWC) return cases::manitoba;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8marylandyA2CmFWC) return cases::maryland;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13massachusettsyA2CmFWC) return cases::massachusetts;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8michiganyA2CmFWC) return cases::michigan;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9minnesotayA2CmFWC) return cases::minnesota;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11mississippiyA2CmFWC) return cases::mississippi;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8missouriyA2CmFWC) return cases::missouri;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7montanayA2CmFWC) return cases::montana;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8nebraskayA2CmFWC) return cases::nebraska;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6nevadayA2CmFWC) return cases::nevada;
    if (tag == _impl::$s13BlinkIDVerify6RegionO12newBrunswickyA2CmFWC) return cases::newBrunswick;
    if (tag == _impl::$s13BlinkIDVerify6RegionO12newHampshireyA2CmFWC) return cases::newHampshire;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9newJerseyyA2CmFWC) return cases::newJersey;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9newMexicoyA2CmFWC) return cases::newMexico;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13newSouthWalesyA2CmFWC) return cases::newSouthWales;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7newYorkyA2CmFWC) return cases::newYork;
    if (tag == _impl::$s13BlinkIDVerify6RegionO17northernTerritoryyA2CmFWC) return cases::northernTerritory;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13northCarolinayA2CmFWC) return cases::northCarolina;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11northDakotayA2CmFWC) return cases::northDakota;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10novaScotiayA2CmFWC) return cases::novaScotia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO4ohioyA2CmFWC) return cases::ohio;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8oklahomayA2CmFWC) return cases::oklahoma;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7ontarioyA2CmFWC) return cases::ontario;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6oregonyA2CmFWC) return cases::oregon;
    if (tag == _impl::$s13BlinkIDVerify6RegionO12pennsylvaniayA2CmFWC) return cases::pennsylvania;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6quebecyA2CmFWC) return cases::quebec;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10queenslandyA2CmFWC) return cases::queensland;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11rhodeIslandyA2CmFWC) return cases::rhodeIsland;
    if (tag == _impl::$s13BlinkIDVerify6RegionO12saskatchewanyA2CmFWC) return cases::saskatchewan;
    if (tag == _impl::$s13BlinkIDVerify6RegionO14southAustraliayA2CmFWC) return cases::southAustralia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13southCarolinayA2CmFWC) return cases::southCarolina;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11southDakotayA2CmFWC) return cases::southDakota;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8tasmaniayA2CmFWC) return cases::tasmania;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9tennesseeyA2CmFWC) return cases::tennessee;
    if (tag == _impl::$s13BlinkIDVerify6RegionO5texasyA2CmFWC) return cases::texas;
    if (tag == _impl::$s13BlinkIDVerify6RegionO4utahyA2CmFWC) return cases::utah;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7vermontyA2CmFWC) return cases::vermont;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8victoriayA2CmFWC) return cases::victoria;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8virginiayA2CmFWC) return cases::virginia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10washingtonyA2CmFWC) return cases::washington;
    if (tag == _impl::$s13BlinkIDVerify6RegionO16westernAustraliayA2CmFWC) return cases::westernAustralia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO12westVirginiayA2CmFWC) return cases::westVirginia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9wisconsinyA2CmFWC) return cases::wisconsin;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7wyomingyA2CmFWC) return cases::wyoming;
    if (tag == _impl::$s13BlinkIDVerify6RegionO5yukonyA2CmFWC) return cases::yukon;
    if (tag == _impl::$s13BlinkIDVerify6RegionO14ciudadDeMexicoyA2CmFWC) return cases::ciudadDeMexico;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7jaliscoyA2CmFWC) return cases::jalisco;
    if (tag == _impl::$s13BlinkIDVerify6RegionO23newfoundlandAndLabradoryA2CmFWC) return cases::newfoundlandAndLabrador;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9nuevoLeonyA2CmFWC) return cases::nuevoLeon;
    if (tag == _impl::$s13BlinkIDVerify6RegionO14bajaCaliforniayA2CmFWC) return cases::bajaCalifornia;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9chihuahuayA2CmFWC) return cases::chihuahua;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10guanajuatoyA2CmFWC) return cases::guanajuato;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8guerreroyA2CmFWC) return cases::guerrero;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6mexicoyA2CmFWC) return cases::mexico;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9michoacanyA2CmFWC) return cases::michoacan;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11newYorkCityyA2CmFWC) return cases::newYorkCity;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10tamaulipasyA2CmFWC) return cases::tamaulipas;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8veracruzyA2CmFWC) return cases::veracruz;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7chiapasyA2CmFWC) return cases::chiapas;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8coahuilayA2CmFWC) return cases::coahuila;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7durangoyA2CmFWC) return cases::durango;
    if (tag == _impl::$s13BlinkIDVerify6RegionO14guerreroCoculayA2CmFWC) return cases::guerreroCocula;
    if (tag == _impl::$s13BlinkIDVerify6RegionO16guerreroJuchitanyA2CmFWC) return cases::guerreroJuchitan;
    if (tag == _impl::$s13BlinkIDVerify6RegionO21guerreroTepecoacuilcoyA2CmFWC) return cases::guerreroTepecoacuilco;
    if (tag == _impl::$s13BlinkIDVerify6RegionO16guerreroTlacoapayA2CmFWC) return cases::guerreroTlacoapa;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7gujaratyA2CmFWC) return cases::gujarat;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7hidalgoyA2CmFWC) return cases::hidalgo;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9karnatakayA2CmFWC) return cases::karnataka;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6keralayA2CmFWC) return cases::kerala;
    if (tag == _impl::$s13BlinkIDVerify6RegionO17khyberPakhtunkhwayA2CmFWC) return cases::khyberPakhtunkhwa;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13madhyaPradeshyA2CmFWC) return cases::madhyaPradesh;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11maharashtrayA2CmFWC) return cases::maharashtra;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7morelosyA2CmFWC) return cases::morelos;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7nayarityA2CmFWC) return cases::nayarit;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6oaxacayA2CmFWC) return cases::oaxaca;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6pueblayA2CmFWC) return cases::puebla;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6punjabyA2CmFWC) return cases::punjab;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9queretaroyA2CmFWC) return cases::queretaro;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13sanLuisPotosiyA2CmFWC) return cases::sanLuisPotosi;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7sinaloayA2CmFWC) return cases::sinaloa;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6sonorayA2CmFWC) return cases::sonora;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7tabascoyA2CmFWC) return cases::tabasco;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9tamilNaduyA2CmFWC) return cases::tamilNadu;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7yucatanyA2CmFWC) return cases::yucatan;
    if (tag == _impl::$s13BlinkIDVerify6RegionO9zacatecasyA2CmFWC) return cases::zacatecas;
    if (tag == _impl::$s13BlinkIDVerify6RegionO14aguascalientesyA2CmFWC) return cases::aguascalientes;
    if (tag == _impl::$s13BlinkIDVerify6RegionO17bajaCaliforniaSuryA2CmFWC) return cases::bajaCaliforniaSur;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8campecheyA2CmFWC) return cases::campeche;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6colimayA2CmFWC) return cases::colima;
    if (tag == _impl::$s13BlinkIDVerify6RegionO23quintanaRooBenitoJuarezyA2CmFWC) return cases::quintanaRooBenitoJuarez;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11quintanaRooyA2CmFWC) return cases::quintanaRoo;
    if (tag == _impl::$s13BlinkIDVerify6RegionO22quintanaRooSolidaridadyA2CmFWC) return cases::quintanaRooSolidaridad;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8tlaxcalayA2CmFWC) return cases::tlaxcala;
    if (tag == _impl::$s13BlinkIDVerify6RegionO18quintanaRooCozumelyA2CmFWC) return cases::quintanaRooCozumel;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8saoPaoloyA2CmFWC) return cases::saoPaolo;
    if (tag == _impl::$s13BlinkIDVerify6RegionO12rioDeJaneiroyA2CmFWC) return cases::rioDeJaneiro;
    if (tag == _impl::$s13BlinkIDVerify6RegionO14rioGrandeDoSulyA2CmFWC) return cases::rioGrandeDoSul;
    if (tag == _impl::$s13BlinkIDVerify6RegionO20northwestTerritoriesyA2CmFWC) return cases::northwestTerritories;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7nunavutyA2CmFWC) return cases::nunavut;
    if (tag == _impl::$s13BlinkIDVerify6RegionO18princeEdwardIslandyA2CmFWC) return cases::princeEdwardIsland;
    if (tag == _impl::$s13BlinkIDVerify6RegionO15distritoFederalyA2CmFWC) return cases::distritoFederal;
    if (tag == _impl::$s13BlinkIDVerify6RegionO8maranhaoyA2CmFWC) return cases::maranhao;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10matoGrossoyA2CmFWC) return cases::matoGrosso;
    if (tag == _impl::$s13BlinkIDVerify6RegionO11minasGeraisyA2CmFWC) return cases::minasGerais;
    if (tag == _impl::$s13BlinkIDVerify6RegionO4parayA2CmFWC) return cases::para;
    if (tag == _impl::$s13BlinkIDVerify6RegionO6paranayA2CmFWC) return cases::parana;
    if (tag == _impl::$s13BlinkIDVerify6RegionO10pernambucoyA2CmFWC) return cases::pernambuco;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13santaCatarinayA2CmFWC) return cases::santaCatarina;
    if (tag == _impl::$s13BlinkIDVerify6RegionO13andhraPradeshyA2CmFWC) return cases::andhraPradesh;
    if (tag == _impl::$s13BlinkIDVerify6RegionO5cearayA2CmFWC) return cases::ceara;
    if (tag == _impl::$s13BlinkIDVerify6RegionO5goiasyA2CmFWC) return cases::goias;
    if (tag == _impl::$s13BlinkIDVerify6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC) return cases::guerreroAcapulcoDeJuarez;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7haryanayA2CmFWC) return cases::haryana;
    if (tag == _impl::$s13BlinkIDVerify6RegionO7sergipeyA2CmFWC) return cases::sergipe;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<Region> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify6RegionO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK Region(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Region _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Region(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Region;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify6RegionOD;
  static inline constexpr $s13BlinkIDVerify6RegionOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Region {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Region &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Region &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Region returnNewValue(T callable) {
    auto result = Region::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Region> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify6RegionOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Region> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Region> = true;
template<>
struct implClassFor<BlinkIDVerify::Region> { using type = BlinkIDVerify::_impl::_impl_Region; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_RegionOfInterest;

// Type metadata accessor for RegionOfInterest
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify16RegionOfInterestVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify16RegionOfInterestV") RegionOfInterest final {
public:
  SWIFT_INLINE_THUNK ~RegionOfInterest() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RegionOfInterest(const RegionOfInterest &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RegionOfInterest &operator =(const RegionOfInterest &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RegionOfInterest &operator =(RegionOfInterest &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RegionOfInterest(RegionOfInterest &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK float getX() const SWIFT_SYMBOL("s:13BlinkIDVerify16RegionOfInterestV1xSfvp");
  SWIFT_INLINE_THUNK float getY() const SWIFT_SYMBOL("s:13BlinkIDVerify16RegionOfInterestV1ySfvp");
  SWIFT_INLINE_THUNK float getWidth() const SWIFT_SYMBOL("s:13BlinkIDVerify16RegionOfInterestV5widthSfvp");
  SWIFT_INLINE_THUNK float getHeight() const SWIFT_SYMBOL("s:13BlinkIDVerify16RegionOfInterestV6heightSfvp");
  static SWIFT_INLINE_THUNK RegionOfInterest init(float x, float y, float width, float height) SWIFT_SYMBOL("s:13BlinkIDVerify16RegionOfInterestV1x1y5width6heightACSf_S3ftcfc");
private:
  SWIFT_INLINE_THUNK RegionOfInterest(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RegionOfInterest _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RegionOfInterest(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RegionOfInterest;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify16RegionOfInterestVD;
  static inline constexpr $s13BlinkIDVerify16RegionOfInterestVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RegionOfInterest {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RegionOfInterest &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RegionOfInterest &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RegionOfInterest returnNewValue(T callable) {
    auto result = RegionOfInterest::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::RegionOfInterest> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify16RegionOfInterestVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::RegionOfInterest> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::RegionOfInterest> = true;
template<>
struct implClassFor<BlinkIDVerify::RegionOfInterest> { using type = BlinkIDVerify::_impl::_impl_RegionOfInterest; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO") RequestError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::RequestError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_RequestError;

// Type metadata accessor for RequestError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12RequestErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum RequestError
extern "C" {
extern unsigned $s13BlinkIDVerify12RequestErrorO12unauthorizedyA2CmFWC;
extern unsigned $s13BlinkIDVerify12RequestErrorO06serverD0yA2CmFWC;
extern unsigned $s13BlinkIDVerify12RequestErrorO21serverIncompatibilityyA2CmFWC;
extern unsigned $s13BlinkIDVerify12RequestErrorO11unknownHostyA2CmFWC;
extern unsigned $s13BlinkIDVerify12RequestErrorO10invalidURLyA2CmFWC;
extern unsigned $s13BlinkIDVerify12RequestErrorO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO") RequestError final {
public:
  SWIFT_INLINE_THUNK ~RequestError() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestError(const RequestError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestError &operator =(const RequestError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RequestError &operator =(RequestError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RequestError(RequestError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    unauthorized SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO12unauthorizedyA2CmF"),
    serverError SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO06serverD0yA2CmF"),
    serverIncompatibility SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO21serverIncompatibilityyA2CmF"),
    unknownHost SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO11unknownHostyA2CmF"),
    invalidURL SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO10invalidURLyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_unauthorized {  // impl struct for case unauthorized
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unauthorized;
    }
    SWIFT_INLINE_THUNK RequestError operator()() const;
  } unauthorized SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO12unauthorizedyA2CmF");
  SWIFT_INLINE_THUNK bool isUnauthorized() const;

  inline const static struct _impl_serverError {  // impl struct for case serverError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serverError;
    }
    SWIFT_INLINE_THUNK RequestError operator()() const;
  } serverError SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO06serverD0yA2CmF");
  SWIFT_INLINE_THUNK bool isServerError() const;

  inline const static struct _impl_serverIncompatibility {  // impl struct for case serverIncompatibility
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serverIncompatibility;
    }
    SWIFT_INLINE_THUNK RequestError operator()() const;
  } serverIncompatibility SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO21serverIncompatibilityyA2CmF");
  SWIFT_INLINE_THUNK bool isServerIncompatibility() const;

  inline const static struct _impl_unknownHost {  // impl struct for case unknownHost
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownHost;
    }
    SWIFT_INLINE_THUNK RequestError operator()() const;
  } unknownHost SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO11unknownHostyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknownHost() const;

  inline const static struct _impl_invalidURL {  // impl struct for case invalidURL
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidURL;
    }
    SWIFT_INLINE_THUNK RequestError operator()() const;
  } invalidURL SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO10invalidURLyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidURL() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK RequestError operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify12RequestErrorO12unauthorizedyA2CmFWC) return cases::unauthorized;
    if (tag == _impl::$s13BlinkIDVerify12RequestErrorO06serverD0yA2CmFWC) return cases::serverError;
    if (tag == _impl::$s13BlinkIDVerify12RequestErrorO21serverIncompatibilityyA2CmFWC) return cases::serverIncompatibility;
    if (tag == _impl::$s13BlinkIDVerify12RequestErrorO11unknownHostyA2CmFWC) return cases::unknownHost;
    if (tag == _impl::$s13BlinkIDVerify12RequestErrorO10invalidURLyA2CmFWC) return cases::invalidURL;
    if (tag == _impl::$s13BlinkIDVerify12RequestErrorO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<RequestError> init(swift::Int rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify12RequestErrorO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK RequestError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RequestError _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RequestError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RequestError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12RequestErrorOD;
  static inline constexpr $s13BlinkIDVerify12RequestErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RequestError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RequestError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RequestError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RequestError returnNewValue(T callable) {
    auto result = RequestError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12RequestErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::RequestError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12RequestErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::RequestError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::RequestError> = true;
template<>
struct implClassFor<BlinkIDVerify::RequestError> { using type = BlinkIDVerify::_impl::_impl_RequestError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_RequestTimeout;

// Type metadata accessor for RequestTimeout
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify14RequestTimeoutVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify14RequestTimeoutV") RequestTimeout final {
public:
  SWIFT_INLINE_THUNK ~RequestTimeout() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestTimeout(const RequestTimeout &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestTimeout &operator =(const RequestTimeout &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RequestTimeout &operator =(RequestTimeout &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RequestTimeout(RequestTimeout &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK RequestTimeout(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RequestTimeout _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RequestTimeout(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RequestTimeout;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify14RequestTimeoutVD;
  static inline constexpr $s13BlinkIDVerify14RequestTimeoutVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RequestTimeout {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RequestTimeout &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RequestTimeout &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RequestTimeout returnNewValue(T callable) {
    auto result = RequestTimeout::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::RequestTimeout> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify14RequestTimeoutVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::RequestTimeout> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::RequestTimeout> = true;
template<>
struct implClassFor<BlinkIDVerify::RequestTimeout> { using type = BlinkIDVerify::_impl::_impl_RequestTimeout; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify17ResourceLoadErrorV") ResourceLoadError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ResourceLoadError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_ResourceLoadError;

// Type metadata accessor for ResourceLoadError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify17ResourceLoadErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify17ResourceLoadErrorV") ResourceLoadError final {
public:
  SWIFT_INLINE_THUNK ~ResourceLoadError() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourceLoadError(const ResourceLoadError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourceLoadError &operator =(const ResourceLoadError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResourceLoadError &operator =(ResourceLoadError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResourceLoadError(ResourceLoadError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getName() const SWIFT_SYMBOL("s:13BlinkIDVerify17ResourceLoadErrorV4nameSSvp");
  SWIFT_INLINE_THUNK ModelLoadError getError() const SWIFT_SYMBOL("s:13BlinkIDVerify17ResourceLoadErrorV5errorAA05ModeldE0Ovp");
private:
  SWIFT_INLINE_THUNK ResourceLoadError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResourceLoadError _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResourceLoadError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResourceLoadError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify17ResourceLoadErrorVD;
  static inline constexpr $s13BlinkIDVerify17ResourceLoadErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResourceLoadError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResourceLoadError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResourceLoadError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResourceLoadError returnNewValue(T callable) {
    auto result = ResourceLoadError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ResourceLoadError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify17ResourceLoadErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ResourceLoadError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ResourceLoadError> = true;
template<>
struct implClassFor<BlinkIDVerify::ResourceLoadError> { using type = BlinkIDVerify::_impl::_impl_ResourceLoadError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO") ResourcesError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ResourcesError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
/// Represents various resource-related errors that can occur during SDK initialization.
/// This enum encompasses errors related to asset corruption, resource downloading,
/// and bundle validation.
namespace _impl {

class _impl_ResourcesError;

// Type metadata accessor for ResourcesError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify14ResourcesErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ResourcesError
extern "C" {
extern unsigned $s13BlinkIDVerify14ResourcesErrorO15corruptedAssetsyACSScACmFWC;
extern unsigned $s13BlinkIDVerify14ResourcesErrorO16resourceDownloadyACSScACmFWC;
extern unsigned $s13BlinkIDVerify14ResourcesErrorO13invalidBundleyACSScACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO") ResourcesError final {
public:
  SWIFT_INLINE_THUNK ~ResourcesError() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourcesError(const ResourcesError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourcesError &operator =(const ResourcesError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResourcesError &operator =(ResourcesError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResourcesError(ResourcesError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    corruptedAssets SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO15corruptedAssetsyACSScACmF"),
    resourceDownload SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO16resourceDownloadyACSScACmF"),
    invalidBundle SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO13invalidBundleyACSScACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_corruptedAssets {  // impl struct for case corruptedAssets
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::corruptedAssets;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } corruptedAssets SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO15corruptedAssetsyACSScACmF");
  SWIFT_INLINE_THUNK bool isCorruptedAssets() const;
  SWIFT_INLINE_THUNK swift::String getCorruptedAssets() const;

  inline const static struct _impl_resourceDownload {  // impl struct for case resourceDownload
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resourceDownload;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } resourceDownload SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO16resourceDownloadyACSScACmF");
  SWIFT_INLINE_THUNK bool isResourceDownload() const;
  SWIFT_INLINE_THUNK swift::String getResourceDownload() const;

  inline const static struct _impl_invalidBundle {  // impl struct for case invalidBundle
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidBundle;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } invalidBundle SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO13invalidBundleyACSScACmF");
  SWIFT_INLINE_THUNK bool isInvalidBundle() const;
  SWIFT_INLINE_THUNK swift::String getInvalidBundle() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify14ResourcesErrorO15corruptedAssetsyACSScACmFWC) return cases::corruptedAssets;
    if (tag == _impl::$s13BlinkIDVerify14ResourcesErrorO16resourceDownloadyACSScACmFWC) return cases::resourceDownload;
    if (tag == _impl::$s13BlinkIDVerify14ResourcesErrorO13invalidBundleyACSScACmFWC) return cases::invalidBundle;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify14ResourcesErrorO16errorDescriptionSSSgvp");
private:
  SWIFT_INLINE_THUNK ResourcesError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResourcesError _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResourcesError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResourcesError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify14ResourcesErrorOD;
  static inline constexpr $s13BlinkIDVerify14ResourcesErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResourcesError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResourcesError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResourcesError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResourcesError returnNewValue(T callable) {
    auto result = ResourcesError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ResourcesError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify14ResourcesErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ResourcesError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ResourcesError> = true;
template<>
struct implClassFor<BlinkIDVerify::ResourcesError> { using type = BlinkIDVerify::_impl::_impl_ResourcesError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ResultArray;

// Type metadata accessor for ResultArray
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11ResultArrayVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11ResultArrayV") ResultArray final {
public:
  SWIFT_INLINE_THUNK ~ResultArray() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultArray(const ResultArray &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultArray &operator =(const ResultArray &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResultArray &operator =(ResultArray &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResultArray(ResultArray &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify11ResultArrayV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ResultArray(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResultArray _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResultArray(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResultArray;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11ResultArrayVD;
  static inline constexpr $s13BlinkIDVerify11ResultArrayVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResultArray {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResultArray &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResultArray &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResultArray returnNewValue(T callable) {
    auto result = ResultArray::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11ResultArrayVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ResultArray> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11ResultArrayVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ResultArray> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ResultArray> = true;
template<>
struct implClassFor<BlinkIDVerify::ResultArray> { using type = BlinkIDVerify::_impl::_impl_ResultArray; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ResultCompleteness;

// Type metadata accessor for ResultCompleteness
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify18ResultCompletenessVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify18ResultCompletenessV") ResultCompleteness final {
public:
  SWIFT_INLINE_THUNK ~ResultCompleteness() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18ResultCompletenessVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultCompleteness(const ResultCompleteness &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18ResultCompletenessVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultCompleteness &operator =(const ResultCompleteness &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18ResultCompletenessVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResultCompleteness &operator =(ResultCompleteness &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResultCompleteness(ResultCompleteness &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK bool getFrontSideFinished() const SWIFT_SYMBOL("s:13BlinkIDVerify18ResultCompletenessV17frontSideFinishedSbvp");
  SWIFT_INLINE_THUNK bool getBackSideFinished() const SWIFT_SYMBOL("s:13BlinkIDVerify18ResultCompletenessV16backSideFinishedSbvp");
  SWIFT_INLINE_THUNK bool getBarcodeFrameCaptured() const SWIFT_SYMBOL("s:13BlinkIDVerify18ResultCompletenessV20barcodeFrameCapturedSbvp");
  SWIFT_INLINE_THUNK bool getOverallFlowFinished() const SWIFT_SYMBOL("s:13BlinkIDVerify18ResultCompletenessV19overallFlowFinishedSbvp");
private:
  SWIFT_INLINE_THUNK ResultCompleteness(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResultCompleteness _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify18ResultCompletenessVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResultCompleteness(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResultCompleteness;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify18ResultCompletenessVD;
  static inline constexpr $s13BlinkIDVerify18ResultCompletenessVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResultCompleteness {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResultCompleteness &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResultCompleteness &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResultCompleteness returnNewValue(T callable) {
    auto result = ResultCompleteness::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify18ResultCompletenessVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ResultCompleteness> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify18ResultCompletenessVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ResultCompleteness> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ResultCompleteness> = true;
template<>
struct implClassFor<BlinkIDVerify::ResultCompleteness> { using type = BlinkIDVerify::_impl::_impl_ResultCompleteness; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ResultState;

// Type metadata accessor for ResultState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11ResultStateOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ResultState
extern "C" {
extern unsigned $s13BlinkIDVerify11ResultStateO5emptyyA2CmFWC;
extern unsigned $s13BlinkIDVerify11ResultStateO9uncertainyA2CmFWC;
extern unsigned $s13BlinkIDVerify11ResultStateO5validyA2CmFWC;
extern unsigned $s13BlinkIDVerify11ResultStateO10stageValidyA2CmFWC;
extern unsigned $s13BlinkIDVerify11ResultStateO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO") ResultState final {
public:
  SWIFT_INLINE_THUNK ~ResultState() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultState(const ResultState &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultState &operator =(const ResultState &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResultState &operator =(ResultState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResultState(ResultState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    empty SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO5emptyyA2CmF"),
    uncertain SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO9uncertainyA2CmF"),
    valid SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO5validyA2CmF"),
    stageValid SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO10stageValidyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_empty {  // impl struct for case empty
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::empty;
    }
    SWIFT_INLINE_THUNK ResultState operator()() const;
  } empty SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO5emptyyA2CmF");
  SWIFT_INLINE_THUNK bool isEmpty() const;

  inline const static struct _impl_uncertain {  // impl struct for case uncertain
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uncertain;
    }
    SWIFT_INLINE_THUNK ResultState operator()() const;
  } uncertain SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO9uncertainyA2CmF");
  SWIFT_INLINE_THUNK bool isUncertain() const;

  inline const static struct _impl_valid {  // impl struct for case valid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::valid;
    }
    SWIFT_INLINE_THUNK ResultState operator()() const;
  } valid SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO5validyA2CmF");
  SWIFT_INLINE_THUNK bool isValid() const;

  inline const static struct _impl_stageValid {  // impl struct for case stageValid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::stageValid;
    }
    SWIFT_INLINE_THUNK ResultState operator()() const;
  } stageValid SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO10stageValidyA2CmF");
  SWIFT_INLINE_THUNK bool isStageValid() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK ResultState operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify11ResultStateO5emptyyA2CmFWC) return cases::empty;
    if (tag == _impl::$s13BlinkIDVerify11ResultStateO9uncertainyA2CmFWC) return cases::uncertain;
    if (tag == _impl::$s13BlinkIDVerify11ResultStateO5validyA2CmFWC) return cases::valid;
    if (tag == _impl::$s13BlinkIDVerify11ResultStateO10stageValidyA2CmFWC) return cases::stageValid;
    if (tag == _impl::$s13BlinkIDVerify11ResultStateO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ResultState> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify11ResultStateO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ResultState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResultState _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResultState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResultState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11ResultStateOD;
  static inline constexpr $s13BlinkIDVerify11ResultStateOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResultState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResultState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResultState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResultState returnNewValue(T callable) {
    auto result = ResultState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11ResultStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ResultState> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11ResultStateOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ResultState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ResultState> = true;
template<>
struct implClassFor<BlinkIDVerify::ResultState> { using type = BlinkIDVerify::_impl::_impl_ResultState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ResultType;

// Type metadata accessor for ResultType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify10ResultTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ResultType
extern "C" {
extern unsigned $s13BlinkIDVerify10ResultTypeO06stringC0yA2CmFWC;
extern unsigned $s13BlinkIDVerify10ResultTypeO04dateC0yA2CmFWC;
extern unsigned $s13BlinkIDVerify10ResultTypeO014detailedStringC0yA2CmFWC;
extern unsigned $s13BlinkIDVerify10ResultTypeO012detailedDateC0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO") ResultType final {
public:
  SWIFT_INLINE_THUNK ~ResultType() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultType(const ResultType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultType &operator =(const ResultType &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResultType &operator =(ResultType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResultType(ResultType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    stringResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO06stringC0yA2CmF"),
    dateResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO04dateC0yA2CmF"),
    detailedStringResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO014detailedStringC0yA2CmF"),
    detailedDateResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO012detailedDateC0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_stringResult {  // impl struct for case stringResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::stringResult;
    }
    SWIFT_INLINE_THUNK ResultType operator()() const;
  } stringResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO06stringC0yA2CmF");
  SWIFT_INLINE_THUNK bool isStringResult() const;

  inline const static struct _impl_dateResult {  // impl struct for case dateResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateResult;
    }
    SWIFT_INLINE_THUNK ResultType operator()() const;
  } dateResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO04dateC0yA2CmF");
  SWIFT_INLINE_THUNK bool isDateResult() const;

  inline const static struct _impl_detailedStringResult {  // impl struct for case detailedStringResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detailedStringResult;
    }
    SWIFT_INLINE_THUNK ResultType operator()() const;
  } detailedStringResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO014detailedStringC0yA2CmF");
  SWIFT_INLINE_THUNK bool isDetailedStringResult() const;

  inline const static struct _impl_detailedDateResult {  // impl struct for case detailedDateResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detailedDateResult;
    }
    SWIFT_INLINE_THUNK ResultType operator()() const;
  } detailedDateResult SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO012detailedDateC0yA2CmF");
  SWIFT_INLINE_THUNK bool isDetailedDateResult() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify10ResultTypeO06stringC0yA2CmFWC) return cases::stringResult;
    if (tag == _impl::$s13BlinkIDVerify10ResultTypeO04dateC0yA2CmFWC) return cases::dateResult;
    if (tag == _impl::$s13BlinkIDVerify10ResultTypeO014detailedStringC0yA2CmFWC) return cases::detailedStringResult;
    if (tag == _impl::$s13BlinkIDVerify10ResultTypeO012detailedDateC0yA2CmFWC) return cases::detailedDateResult;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ResultType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify10ResultTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ResultType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResultType _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResultType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResultType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify10ResultTypeOD;
  static inline constexpr $s13BlinkIDVerify10ResultTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResultType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResultType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResultType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResultType returnNewValue(T callable) {
    auto result = ResultType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify10ResultTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ResultType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify10ResultTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ResultType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ResultType> = true;
template<>
struct implClassFor<BlinkIDVerify::ResultType> { using type = BlinkIDVerify::_impl::_impl_ResultType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV") StringResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::StringResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
class SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO") ResultValue;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::ResultValue> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_ResultValue;

// Type metadata accessor for ResultValue
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11ResultValueOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ResultValue
extern "C" {
extern unsigned $s13BlinkIDVerify11ResultValueO06stringC0yAcA06StringC0VcACmFWC;
extern unsigned $s13BlinkIDVerify11ResultValueO014detailedStringC0yAcA08DetailedfC0VcACmFWC;
extern unsigned $s13BlinkIDVerify11ResultValueO04dateC0yAcA04DateC0VcACmFWC;
extern unsigned $s13BlinkIDVerify11ResultValueO012detailedDateC0yAcA08DetailedfC0VcACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO") ResultValue final {
public:
  SWIFT_INLINE_THUNK ~ResultValue() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultValue(const ResultValue &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResultValue &operator =(const ResultValue &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResultValue &operator =(ResultValue &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResultValue(ResultValue &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    stringResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO06stringC0yAcA06StringC0VcACmF"),
    detailedStringResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO014detailedStringC0yAcA08DetailedfC0VcACmF"),
    dateResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO04dateC0yAcA04DateC0VcACmF"),
    detailedDateResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO012detailedDateC0yAcA08DetailedfC0VcACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_stringResult {  // impl struct for case stringResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::stringResult;
    }
    SWIFT_INLINE_THUNK ResultValue operator()(const StringResult& val) const;
  } stringResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO06stringC0yAcA06StringC0VcACmF");
  SWIFT_INLINE_THUNK bool isStringResult() const;
  SWIFT_INLINE_THUNK StringResult getStringResult() const;

  inline const static struct _impl_detailedStringResult {  // impl struct for case detailedStringResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detailedStringResult;
    }
    SWIFT_INLINE_THUNK ResultValue operator()(const DetailedStringResult& val) const;
  } detailedStringResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO014detailedStringC0yAcA08DetailedfC0VcACmF");
  SWIFT_INLINE_THUNK bool isDetailedStringResult() const;
  SWIFT_INLINE_THUNK DetailedStringResult getDetailedStringResult() const;

  inline const static struct _impl_dateResult {  // impl struct for case dateResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateResult;
    }
    SWIFT_INLINE_THUNK ResultValue operator()(const DateResult& val) const;
  } dateResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO04dateC0yAcA04DateC0VcACmF");
  SWIFT_INLINE_THUNK bool isDateResult() const;
  SWIFT_INLINE_THUNK DateResult getDateResult() const;

  inline const static struct _impl_detailedDateResult {  // impl struct for case detailedDateResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detailedDateResult;
    }
    SWIFT_INLINE_THUNK ResultValue operator()(const DetailedDateResult& val) const;
  } detailedDateResult SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO012detailedDateC0yAcA08DetailedfC0VcACmF");
  SWIFT_INLINE_THUNK bool isDetailedDateResult() const;
  SWIFT_INLINE_THUNK DetailedDateResult getDetailedDateResult() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify11ResultValueO06stringC0yAcA06StringC0VcACmFWC) return cases::stringResult;
    if (tag == _impl::$s13BlinkIDVerify11ResultValueO014detailedStringC0yAcA08DetailedfC0VcACmFWC) return cases::detailedStringResult;
    if (tag == _impl::$s13BlinkIDVerify11ResultValueO04dateC0yAcA04DateC0VcACmFWC) return cases::dateResult;
    if (tag == _impl::$s13BlinkIDVerify11ResultValueO012detailedDateC0yAcA08DetailedfC0VcACmFWC) return cases::detailedDateResult;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify11ResultValueO11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK ResultValue(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResultValue _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResultValue(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResultValue;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11ResultValueOD;
  static inline constexpr $s13BlinkIDVerify11ResultValueOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResultValue {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResultValue &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResultValue &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResultValue returnNewValue(T callable) {
    auto result = ResultValue::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11ResultValueOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ResultValue> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11ResultValueOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ResultValue> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ResultValue> = true;
template<>
struct implClassFor<BlinkIDVerify::ResultValue> { using type = BlinkIDVerify::_impl::_impl_ResultValue; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ReviewSensitivity;

// Type metadata accessor for ReviewSensitivity
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify17ReviewSensitivityOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ReviewSensitivity
extern "C" {
extern unsigned $s13BlinkIDVerify17ReviewSensitivityO3lowyA2CmFWC;
extern unsigned $s13BlinkIDVerify17ReviewSensitivityO8standardyA2CmFWC;
extern unsigned $s13BlinkIDVerify17ReviewSensitivityO4highyA2CmFWC;
extern unsigned $s13BlinkIDVerify17ReviewSensitivityO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO") ReviewSensitivity final {
public:
  SWIFT_INLINE_THUNK ~ReviewSensitivity() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ReviewSensitivity(const ReviewSensitivity &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ReviewSensitivity &operator =(const ReviewSensitivity &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ReviewSensitivity &operator =(ReviewSensitivity &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ReviewSensitivity(ReviewSensitivity &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    low SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO3lowyA2CmF"),
    standard SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO8standardyA2CmF"),
    high SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO4highyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_low {  // impl struct for case low
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::low;
    }
    SWIFT_INLINE_THUNK ReviewSensitivity operator()() const;
  } low SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO3lowyA2CmF");
  SWIFT_INLINE_THUNK bool isLow() const;

  inline const static struct _impl_standard {  // impl struct for case standard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standard;
    }
    SWIFT_INLINE_THUNK ReviewSensitivity operator()() const;
  } standard SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO8standardyA2CmF");
  SWIFT_INLINE_THUNK bool isStandard() const;

  inline const static struct _impl_high {  // impl struct for case high
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::high;
    }
    SWIFT_INLINE_THUNK ReviewSensitivity operator()() const;
  } high SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO4highyA2CmF");
  SWIFT_INLINE_THUNK bool isHigh() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK ReviewSensitivity operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify17ReviewSensitivityO3lowyA2CmFWC) return cases::low;
    if (tag == _impl::$s13BlinkIDVerify17ReviewSensitivityO8standardyA2CmFWC) return cases::standard;
    if (tag == _impl::$s13BlinkIDVerify17ReviewSensitivityO4highyA2CmFWC) return cases::high;
    if (tag == _impl::$s13BlinkIDVerify17ReviewSensitivityO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO2idSSvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO11descriptionSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<ReviewSensitivity> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify17ReviewSensitivityO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ReviewSensitivity(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ReviewSensitivity _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ReviewSensitivity(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ReviewSensitivity;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify17ReviewSensitivityOD;
  static inline constexpr $s13BlinkIDVerify17ReviewSensitivityOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ReviewSensitivity {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ReviewSensitivity &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ReviewSensitivity &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ReviewSensitivity returnNewValue(T callable) {
    auto result = ReviewSensitivity::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ReviewSensitivity> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify17ReviewSensitivityOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ReviewSensitivity> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ReviewSensitivity> = true;
template<>
struct implClassFor<BlinkIDVerify::ReviewSensitivity> { using type = BlinkIDVerify::_impl::_impl_ReviewSensitivity; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_ReviewStrategy;

// Type metadata accessor for ReviewStrategy
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify14ReviewStrategyOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ReviewStrategy
extern "C" {
extern unsigned $s13BlinkIDVerify14ReviewStrategyO5neveryA2CmFWC;
extern unsigned $s13BlinkIDVerify14ReviewStrategyO19rejectedAndAcceptedyA2CmFWC;
extern unsigned $s13BlinkIDVerify14ReviewStrategyO12rejectedOnlyyA2CmFWC;
extern unsigned $s13BlinkIDVerify14ReviewStrategyO12acceptedOnlyyA2CmFWC;
extern unsigned $s13BlinkIDVerify14ReviewStrategyO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO") ReviewStrategy final {
public:
  SWIFT_INLINE_THUNK ~ReviewStrategy() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ReviewStrategy(const ReviewStrategy &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ReviewStrategy &operator =(const ReviewStrategy &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ReviewStrategy &operator =(ReviewStrategy &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ReviewStrategy(ReviewStrategy &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    never SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO5neveryA2CmF"),
    rejectedAndAccepted SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO19rejectedAndAcceptedyA2CmF"),
    rejectedOnly SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO12rejectedOnlyyA2CmF"),
    acceptedOnly SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO12acceptedOnlyyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_never {  // impl struct for case never
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::never;
    }
    SWIFT_INLINE_THUNK ReviewStrategy operator()() const;
  } never SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO5neveryA2CmF");
  SWIFT_INLINE_THUNK bool isNever() const;

  inline const static struct _impl_rejectedAndAccepted {  // impl struct for case rejectedAndAccepted
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rejectedAndAccepted;
    }
    SWIFT_INLINE_THUNK ReviewStrategy operator()() const;
  } rejectedAndAccepted SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO19rejectedAndAcceptedyA2CmF");
  SWIFT_INLINE_THUNK bool isRejectedAndAccepted() const;

  inline const static struct _impl_rejectedOnly {  // impl struct for case rejectedOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rejectedOnly;
    }
    SWIFT_INLINE_THUNK ReviewStrategy operator()() const;
  } rejectedOnly SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO12rejectedOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isRejectedOnly() const;

  inline const static struct _impl_acceptedOnly {  // impl struct for case acceptedOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::acceptedOnly;
    }
    SWIFT_INLINE_THUNK ReviewStrategy operator()() const;
  } acceptedOnly SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO12acceptedOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isAcceptedOnly() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK ReviewStrategy operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify14ReviewStrategyO5neveryA2CmFWC) return cases::never;
    if (tag == _impl::$s13BlinkIDVerify14ReviewStrategyO19rejectedAndAcceptedyA2CmFWC) return cases::rejectedAndAccepted;
    if (tag == _impl::$s13BlinkIDVerify14ReviewStrategyO12rejectedOnlyyA2CmFWC) return cases::rejectedOnly;
    if (tag == _impl::$s13BlinkIDVerify14ReviewStrategyO12acceptedOnlyyA2CmFWC) return cases::acceptedOnly;
    if (tag == _impl::$s13BlinkIDVerify14ReviewStrategyO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO2idSSvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO11descriptionSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<ReviewStrategy> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify14ReviewStrategyO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ReviewStrategy(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ReviewStrategy _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ReviewStrategy(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ReviewStrategy;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify14ReviewStrategyOD;
  static inline constexpr $s13BlinkIDVerify14ReviewStrategyOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ReviewStrategy {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ReviewStrategy &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ReviewStrategy &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ReviewStrategy returnNewValue(T callable) {
    auto result = ReviewStrategy::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify14ReviewStrategyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::ReviewStrategy> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify14ReviewStrategyOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::ReviewStrategy> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::ReviewStrategy> = true;
template<>
struct implClassFor<BlinkIDVerify::ReviewStrategy> { using type = BlinkIDVerify::_impl::_impl_ReviewStrategy; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify12SDKInitErrorO") SDKInitError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::SDKInitError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
/// Represents high-level SDK initialization errors.
/// This enum encompasses various errors that can occur during SDK initialization,
/// including resource loading and memory allocation failures.
namespace _impl {

class _impl_SDKInitError;

// Type metadata accessor for SDKInitError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12SDKInitErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum SDKInitError
extern "C" {
extern unsigned $s13BlinkIDVerify12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC;
extern unsigned $s13BlinkIDVerify12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12SDKInitErrorO") SDKInitError final {
public:
  SWIFT_INLINE_THUNK ~SDKInitError() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SDKInitError(const SDKInitError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SDKInitError &operator =(const SDKInitError &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SDKInitError &operator =(SDKInitError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SDKInitError(SDKInitError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    resourceLoad SWIFT_SYMBOL("s:13BlinkIDVerify12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmF"),
    memoryReserve SWIFT_SYMBOL("s:13BlinkIDVerify12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_resourceLoad {  // impl struct for case resourceLoad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resourceLoad;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()(const ResourceLoadError& val) const;
  } resourceLoad SWIFT_SYMBOL("s:13BlinkIDVerify12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmF");
  SWIFT_INLINE_THUNK bool isResourceLoad() const;
  SWIFT_INLINE_THUNK ResourceLoadError getResourceLoad() const;

  inline const static struct _impl_memoryReserve {  // impl struct for case memoryReserve
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::memoryReserve;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()(const MemoryReserveError& val) const;
  } memoryReserve SWIFT_SYMBOL("s:13BlinkIDVerify12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmF");
  SWIFT_INLINE_THUNK bool isMemoryReserve() const;
  SWIFT_INLINE_THUNK MemoryReserveError getMemoryReserve() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC) return cases::resourceLoad;
    if (tag == _impl::$s13BlinkIDVerify12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC) return cases::memoryReserve;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify12SDKInitErrorO16errorDescriptionSSSgvp");
private:
  SWIFT_INLINE_THUNK SDKInitError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SDKInitError _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SDKInitError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SDKInitError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12SDKInitErrorOD;
  static inline constexpr $s13BlinkIDVerify12SDKInitErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SDKInitError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SDKInitError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SDKInitError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SDKInitError returnNewValue(T callable) {
    auto result = SDKInitError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::SDKInitError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12SDKInitErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::SDKInitError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::SDKInitError> = true;
template<>
struct implClassFor<BlinkIDVerify::SDKInitError> { using type = BlinkIDVerify::_impl::_impl_SDKInitError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify7SegmentV") Segment;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::Segment> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_Segment;

// Type metadata accessor for Segment
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify7SegmentVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify7SegmentV") Segment final {
public:
  SWIFT_INLINE_THUNK ~Segment() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7SegmentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Segment(const Segment &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7SegmentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Segment &operator =(const Segment &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7SegmentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Segment &operator =(Segment &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Segment(Segment &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK CheckResult getResult() const SWIFT_SYMBOL("s:13BlinkIDVerify7SegmentV6resultAA11CheckResultOvp");
  SWIFT_INLINE_THUNK swift::String getType() const SWIFT_SYMBOL("s:13BlinkIDVerify7SegmentV4typeSSvp");
  SWIFT_INLINE_THUNK Bounds getBounds() const SWIFT_SYMBOL("s:13BlinkIDVerify7SegmentV6boundsAA6BoundsVvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify7SegmentV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK Segment(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Segment _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify7SegmentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Segment(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Segment;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify7SegmentVD;
  static inline constexpr $s13BlinkIDVerify7SegmentVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Segment {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Segment &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Segment &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Segment returnNewValue(T callable) {
    auto result = Segment::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify7SegmentVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Segment> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify7SegmentVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Segment> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Segment> = true;
template<>
struct implClassFor<BlinkIDVerify::Segment> { using type = BlinkIDVerify::_impl::_impl_Segment; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_Side;

// Type metadata accessor for Side
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify4SideOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Side
extern "C" {
extern unsigned $s13BlinkIDVerify4SideO5frontyA2CmFWC;
extern unsigned $s13BlinkIDVerify4SideO4backyA2CmFWC;
extern unsigned $s13BlinkIDVerify4SideO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify4SideO") Side final {
public:
  SWIFT_INLINE_THUNK ~Side() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Side(const Side &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Side &operator =(const Side &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Side &operator =(Side &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Side(Side &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    front SWIFT_SYMBOL("s:13BlinkIDVerify4SideO5frontyA2CmF"),
    back SWIFT_SYMBOL("s:13BlinkIDVerify4SideO4backyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify4SideO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_front {  // impl struct for case front
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::front;
    }
    SWIFT_INLINE_THUNK Side operator()() const;
  } front SWIFT_SYMBOL("s:13BlinkIDVerify4SideO5frontyA2CmF");
  SWIFT_INLINE_THUNK bool isFront() const;

  inline const static struct _impl_back {  // impl struct for case back
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::back;
    }
    SWIFT_INLINE_THUNK Side operator()() const;
  } back SWIFT_SYMBOL("s:13BlinkIDVerify4SideO4backyA2CmF");
  SWIFT_INLINE_THUNK bool isBack() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK Side operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify4SideO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify4SideO5frontyA2CmFWC) return cases::front;
    if (tag == _impl::$s13BlinkIDVerify4SideO4backyA2CmFWC) return cases::back;
    if (tag == _impl::$s13BlinkIDVerify4SideO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<Side> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify4SideO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify4SideO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK Side(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Side _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Side(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Side;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify4SideOD;
  static inline constexpr $s13BlinkIDVerify4SideOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Side {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Side &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Side &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Side returnNewValue(T callable) {
    auto result = Side::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify4SideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::Side> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify4SideOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::Side> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::Side> = true;
template<>
struct implClassFor<BlinkIDVerify::Side> { using type = BlinkIDVerify::_impl::_impl_Side; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


namespace _impl {

class _impl_StringResult;

// Type metadata accessor for StringResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12StringResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV") StringResult final {
public:
  SWIFT_INLINE_THUNK ~StringResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12StringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK StringResult(const StringResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12StringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK StringResult &operator =(const StringResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12StringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK StringResult &operator =(StringResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER StringResult(StringResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ResultType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getField() const SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV5fieldSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getResults() const SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV7resultsAA0D5ArrayVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getValue() const SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV5valueSSSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify12StringResultV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK StringResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK StringResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12StringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return StringResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_StringResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12StringResultVD;
  static inline constexpr $s13BlinkIDVerify12StringResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_StringResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(StringResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const StringResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER StringResult returnNewValue(T callable) {
    auto result = StringResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12StringResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::StringResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12StringResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::StringResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::StringResult> = true;
template<>
struct implClassFor<BlinkIDVerify::StringResult> { using type = BlinkIDVerify::_impl::_impl_StringResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_SuspiciousDataCheck;

// Type metadata accessor for SuspiciousDataCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify19SuspiciousDataCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify19SuspiciousDataCheckV") SuspiciousDataCheck final {
public:
  SWIFT_INLINE_THUNK ~SuspiciousDataCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19SuspiciousDataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SuspiciousDataCheck(const SuspiciousDataCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19SuspiciousDataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SuspiciousDataCheck &operator =(const SuspiciousDataCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19SuspiciousDataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SuspiciousDataCheck &operator =(SuspiciousDataCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SuspiciousDataCheck(SuspiciousDataCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> getOverall() const SWIFT_SYMBOL("s:13BlinkIDVerify19SuspiciousDataCheckV7overallAA08DetailedE0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> getSampleStringCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify19SuspiciousDataCheckV012sampleStringE0AA08DetailedE0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> getSuspiciousNumberCheck() const SWIFT_SYMBOL("s:13BlinkIDVerify19SuspiciousDataCheckV016suspiciousNumberE0AA08DetailedE0VSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify19SuspiciousDataCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK SuspiciousDataCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SuspiciousDataCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19SuspiciousDataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SuspiciousDataCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SuspiciousDataCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify19SuspiciousDataCheckVD;
  static inline constexpr $s13BlinkIDVerify19SuspiciousDataCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SuspiciousDataCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SuspiciousDataCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SuspiciousDataCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SuspiciousDataCheck returnNewValue(T callable) {
    auto result = SuspiciousDataCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify19SuspiciousDataCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::SuspiciousDataCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify19SuspiciousDataCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::SuspiciousDataCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::SuspiciousDataCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::SuspiciousDataCheck> { using type = BlinkIDVerify::_impl::_impl_SuspiciousDataCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_TieredCheck;

// Type metadata accessor for TieredCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11TieredCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV") TieredCheck final {
public:
  SWIFT_INLINE_THUNK ~TieredCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11TieredCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK TieredCheck(const TieredCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11TieredCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK TieredCheck &operator =(const TieredCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11TieredCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK TieredCheck &operator =(TieredCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER TieredCheck(TieredCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK CheckType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getName() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV4nameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getResult() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV6resultAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getPerformedChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV15performedChecksSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> getChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV6checksAA0D5ArrayVSgvp");
  SWIFT_INLINE_THUNK MatchLevel getMatchLevel() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV10matchLevelAA05MatchF0Ovp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify11TieredCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK TieredCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK TieredCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11TieredCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return TieredCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_TieredCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11TieredCheckVD;
  static inline constexpr $s13BlinkIDVerify11TieredCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_TieredCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(TieredCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const TieredCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER TieredCheck returnNewValue(T callable) {
    auto result = TieredCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11TieredCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::TieredCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11TieredCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::TieredCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::TieredCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::TieredCheck> { using type = BlinkIDVerify::_impl::_impl_TieredCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {


namespace _impl {

class _impl_VerificationContext;

// Type metadata accessor for VerificationContext
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify19VerificationContextOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum VerificationContext
extern "C" {
extern unsigned $s13BlinkIDVerify19VerificationContextO6remoteyA2CmFWC;
extern unsigned $s13BlinkIDVerify19VerificationContextO8inPersonyA2CmFWC;
extern unsigned $s13BlinkIDVerify19VerificationContextO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO") VerificationContext final {
public:
  SWIFT_INLINE_THUNK ~VerificationContext() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VerificationContext(const VerificationContext &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VerificationContext &operator =(const VerificationContext &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VerificationContext &operator =(VerificationContext &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VerificationContext(VerificationContext &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    remote SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO6remoteyA2CmF"),
    inPerson SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO8inPersonyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_remote {  // impl struct for case remote
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::remote;
    }
    SWIFT_INLINE_THUNK VerificationContext operator()() const;
  } remote SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO6remoteyA2CmF");
  SWIFT_INLINE_THUNK bool isRemote() const;

  inline const static struct _impl_inPerson {  // impl struct for case inPerson
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::inPerson;
    }
    SWIFT_INLINE_THUNK VerificationContext operator()() const;
  } inPerson SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO8inPersonyA2CmF");
  SWIFT_INLINE_THUNK bool isInPerson() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK VerificationContext operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify19VerificationContextO6remoteyA2CmFWC) return cases::remote;
    if (tag == _impl::$s13BlinkIDVerify19VerificationContextO8inPersonyA2CmFWC) return cases::inPerson;
    if (tag == _impl::$s13BlinkIDVerify19VerificationContextO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO2idSSvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO11descriptionSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<VerificationContext> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify19VerificationContextO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK VerificationContext(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VerificationContext _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VerificationContext(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VerificationContext;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify19VerificationContextOD;
  static inline constexpr $s13BlinkIDVerify19VerificationContextOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VerificationContext {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VerificationContext &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VerificationContext &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VerificationContext returnNewValue(T callable) {
    auto result = VerificationContext::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify19VerificationContextOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VerificationContext> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify19VerificationContextOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VerificationContext> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VerificationContext> = true;
template<>
struct implClassFor<BlinkIDVerify::VerificationContext> { using type = BlinkIDVerify::_impl::_impl_VerificationContext; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_VerificationSideMode;

// Type metadata accessor for VerificationSideMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify20VerificationSideModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum VerificationSideMode
extern "C" {
extern unsigned $s13BlinkIDVerify20VerificationSideModeO05multiD0yA2CmFWC;
extern unsigned $s13BlinkIDVerify20VerificationSideModeO9frontOnlyyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO") VerificationSideMode final {
public:
  SWIFT_INLINE_THUNK ~VerificationSideMode() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VerificationSideMode(const VerificationSideMode &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VerificationSideMode &operator =(const VerificationSideMode &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VerificationSideMode &operator =(VerificationSideMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VerificationSideMode(VerificationSideMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    multiSide SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO05multiD0yA2CmF"),
    frontOnly SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO9frontOnlyyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_multiSide {  // impl struct for case multiSide
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::multiSide;
    }
    SWIFT_INLINE_THUNK VerificationSideMode operator()() const;
  } multiSide SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO05multiD0yA2CmF");
  SWIFT_INLINE_THUNK bool isMultiSide() const;

  inline const static struct _impl_frontOnly {  // impl struct for case frontOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frontOnly;
    }
    SWIFT_INLINE_THUNK VerificationSideMode operator()() const;
  } frontOnly SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO9frontOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isFrontOnly() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify20VerificationSideModeO05multiD0yA2CmFWC) return cases::multiSide;
    if (tag == _impl::$s13BlinkIDVerify20VerificationSideModeO9frontOnlyyA2CmFWC) return cases::frontOnly;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<VerificationSideMode> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify20VerificationSideModeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK VerificationSideMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VerificationSideMode _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VerificationSideMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VerificationSideMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify20VerificationSideModeOD;
  static inline constexpr $s13BlinkIDVerify20VerificationSideModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VerificationSideMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VerificationSideMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VerificationSideMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VerificationSideMode returnNewValue(T callable) {
    auto result = VerificationSideMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify20VerificationSideModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VerificationSideMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify20VerificationSideModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VerificationSideMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VerificationSideMode> = true;
template<>
struct implClassFor<BlinkIDVerify::VerificationSideMode> { using type = BlinkIDVerify::_impl::_impl_VerificationSideMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_VerifyCheck;

// Type metadata accessor for VerifyCheck
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify11VerifyCheckVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV") VerifyCheck final {
public:
  SWIFT_INLINE_THUNK ~VerifyCheck() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11VerifyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyCheck(const VerifyCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11VerifyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyCheck &operator =(const VerifyCheck &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11VerifyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VerifyCheck &operator =(VerifyCheck &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VerifyCheck(VerifyCheck &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK CheckType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getName() const SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV4nameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> getResult() const SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV6resultAA0D6ResultOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getPerformedChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV15performedChecksSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> getChecks() const SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV6checksAA0D5ArrayVSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify11VerifyCheckV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK VerifyCheck(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VerifyCheck _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify11VerifyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VerifyCheck(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VerifyCheck;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify11VerifyCheckVD;
  static inline constexpr $s13BlinkIDVerify11VerifyCheckVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VerifyCheck {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VerifyCheck &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VerifyCheck &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VerifyCheck returnNewValue(T callable) {
    auto result = VerifyCheck::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify11VerifyCheckVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VerifyCheck> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify11VerifyCheckVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VerifyCheck> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VerifyCheck> = true;
template<>
struct implClassFor<BlinkIDVerify::VerifyCheck> { using type = BlinkIDVerify::_impl::_impl_VerifyCheck; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_VerifyMessage;

// Type metadata accessor for VerifyMessage
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13VerifyMessageVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyMessageV") VerifyMessage final {
public:
  SWIFT_INLINE_THUNK ~VerifyMessage() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyMessage(const VerifyMessage &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyMessage &operator =(const VerifyMessage &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VerifyMessage &operator =(VerifyMessage &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VerifyMessage(VerifyMessage &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getCode() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyMessageV4codeSSvp");
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyMessageV7messageSSvp");
  SWIFT_INLINE_THUNK MessageStatus getStatus() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyMessageV6statusAA0D6StatusOvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyMessageV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK VerifyMessage(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VerifyMessage _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VerifyMessage(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VerifyMessage;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13VerifyMessageVD;
  static inline constexpr $s13BlinkIDVerify13VerifyMessageVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VerifyMessage {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VerifyMessage &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VerifyMessage &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VerifyMessage returnNewValue(T callable) {
    auto result = VerifyMessage::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VerifyMessage> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13VerifyMessageVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VerifyMessage> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VerifyMessage> = true;
template<>
struct implClassFor<BlinkIDVerify::VerifyMessage> { using type = BlinkIDVerify::_impl::_impl_VerifyMessage; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

class SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyResultV") VerifyResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkIDVerify::VerifyResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {
namespace _impl {

class _impl_VerifyResult;

// Type metadata accessor for VerifyResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12VerifyResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyResultV") VerifyResult final {
public:
  SWIFT_INLINE_THUNK ~VerifyResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyResult(const VerifyResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyResult &operator =(const VerifyResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VerifyResult &operator =(VerifyResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VerifyResult(VerifyResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ResultType getType() const SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyResultV4typeAA0D4TypeOvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getField() const SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyResultV5fieldSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> getDetails() const SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyResultV7detailsAA16DetailDictionaryVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> getResults() const SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyResultV7resultsAA0D5ArrayVSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyResultV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK VerifyResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VerifyResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VerifyResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VerifyResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12VerifyResultVD;
  static inline constexpr $s13BlinkIDVerify12VerifyResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VerifyResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VerifyResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VerifyResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VerifyResult returnNewValue(T callable) {
    auto result = VerifyResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VerifyResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12VerifyResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VerifyResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VerifyResult> = true;
template<>
struct implClassFor<BlinkIDVerify::VerifyResult> { using type = BlinkIDVerify::_impl::_impl_VerifyResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_VerifyRuntime;

// Type metadata accessor for VerifyRuntime
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify13VerifyRuntimeVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV") VerifyRuntime final {
public:
  SWIFT_INLINE_THUNK ~VerifyRuntime() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyRuntimeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyRuntime(const VerifyRuntime &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyRuntimeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyRuntime &operator =(const VerifyRuntime &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyRuntimeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VerifyRuntime &operator =(VerifyRuntime &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VerifyRuntime(VerifyRuntime &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<uint64_t> getElapsedMs() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV9elapsedMss6UInt64VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getServiceVersion() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV14serviceVersionSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getRunnerVersion() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV13runnerVersionSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getRunnerInstanceIndex() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV19runnerInstanceIndexSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getWrapperVersion() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV14wrapperVersionSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getExtractionRecognizerVersion() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV27extractionRecognizerVersionSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getVerificationRecognizerVersion() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV29verificationRecognizerVersionSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getClientSdkName() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV13clientSdkNameSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getClientSdkVersion() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV16clientSdkVersionSSSgvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify13VerifyRuntimeV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK VerifyRuntime(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VerifyRuntime _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyRuntimeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VerifyRuntime(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VerifyRuntime;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify13VerifyRuntimeVD;
  static inline constexpr $s13BlinkIDVerify13VerifyRuntimeVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VerifyRuntime {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VerifyRuntime &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VerifyRuntime &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VerifyRuntime returnNewValue(T callable) {
    auto result = VerifyRuntime::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify13VerifyRuntimeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VerifyRuntime> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify13VerifyRuntimeVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VerifyRuntime> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VerifyRuntime> = true;
template<>
struct implClassFor<BlinkIDVerify::VerifyRuntime> { using type = BlinkIDVerify::_impl::_impl_VerifyRuntime; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_VerifyScript;

// Type metadata accessor for VerifyScript
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify12VerifyScriptOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum VerifyScript
extern "C" {
extern unsigned $s13BlinkIDVerify12VerifyScriptO5latinyA2CmFWC;
extern unsigned $s13BlinkIDVerify12VerifyScriptO8cyrillicyA2CmFWC;
extern unsigned $s13BlinkIDVerify12VerifyScriptO6arabicyA2CmFWC;
extern unsigned $s13BlinkIDVerify12VerifyScriptO5greekyA2CmFWC;
extern unsigned $s13BlinkIDVerify12VerifyScriptO7unknownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO") VerifyScript final {
public:
  SWIFT_INLINE_THUNK ~VerifyScript() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyScript(const VerifyScript &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VerifyScript &operator =(const VerifyScript &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VerifyScript &operator =(VerifyScript &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VerifyScript(VerifyScript &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    latin SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO5latinyA2CmF"),
    cyrillic SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO8cyrillicyA2CmF"),
    arabic SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO6arabicyA2CmF"),
    greek SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO5greekyA2CmF"),
    unknown SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO7unknownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_latin {  // impl struct for case latin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::latin;
    }
    SWIFT_INLINE_THUNK VerifyScript operator()() const;
  } latin SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO5latinyA2CmF");
  SWIFT_INLINE_THUNK bool isLatin() const;

  inline const static struct _impl_cyrillic {  // impl struct for case cyrillic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cyrillic;
    }
    SWIFT_INLINE_THUNK VerifyScript operator()() const;
  } cyrillic SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO8cyrillicyA2CmF");
  SWIFT_INLINE_THUNK bool isCyrillic() const;

  inline const static struct _impl_arabic {  // impl struct for case arabic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arabic;
    }
    SWIFT_INLINE_THUNK VerifyScript operator()() const;
  } arabic SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO6arabicyA2CmF");
  SWIFT_INLINE_THUNK bool isArabic() const;

  inline const static struct _impl_greek {  // impl struct for case greek
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greek;
    }
    SWIFT_INLINE_THUNK VerifyScript operator()() const;
  } greek SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO5greekyA2CmF");
  SWIFT_INLINE_THUNK bool isGreek() const;

  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK VerifyScript operator()() const;
  } unknown SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s13BlinkIDVerify12VerifyScriptO5latinyA2CmFWC) return cases::latin;
    if (tag == _impl::$s13BlinkIDVerify12VerifyScriptO8cyrillicyA2CmFWC) return cases::cyrillic;
    if (tag == _impl::$s13BlinkIDVerify12VerifyScriptO6arabicyA2CmFWC) return cases::arabic;
    if (tag == _impl::$s13BlinkIDVerify12VerifyScriptO5greekyA2CmFWC) return cases::greek;
    if (tag == _impl::$s13BlinkIDVerify12VerifyScriptO7unknownyA2CmFWC) return cases::unknown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<VerifyScript> init(const swift::String& rawValue) SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:13BlinkIDVerify12VerifyScriptO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK VerifyScript(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VerifyScript _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VerifyScript(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VerifyScript;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify12VerifyScriptOD;
  static inline constexpr $s13BlinkIDVerify12VerifyScriptOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VerifyScript {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VerifyScript &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VerifyScript &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VerifyScript returnNewValue(T callable) {
    auto result = VerifyScript::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify12VerifyScriptOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VerifyScript> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify12VerifyScriptOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VerifyScript> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VerifyScript> = true;
template<>
struct implClassFor<BlinkIDVerify::VerifyScript> { using type = BlinkIDVerify::_impl::_impl_VerifyScript; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {

namespace _impl {

class _impl_VizResult;

// Type metadata accessor for VizResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s13BlinkIDVerify9VizResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:13BlinkIDVerify9VizResultV") VizResult final {
public:
  SWIFT_INLINE_THUNK ~VizResult() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9VizResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VizResult(const VizResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9VizResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VizResult &operator =(const VizResult &other) noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9VizResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VizResult &operator =(VizResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VizResult(VizResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ResultArray getFront() const SWIFT_SYMBOL("s:13BlinkIDVerify9VizResultV5frontAA0D5ArrayVvp");
  SWIFT_INLINE_THUNK ResultArray getBack() const SWIFT_SYMBOL("s:13BlinkIDVerify9VizResultV4backAA0D5ArrayVvp");
  SWIFT_INLINE_THUNK swift::String getDescription() const SWIFT_SYMBOL("s:13BlinkIDVerify9VizResultV11descriptionSSvp");
private:
  SWIFT_INLINE_THUNK VizResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VizResult _make() noexcept {
    auto metadata = _impl::$s13BlinkIDVerify9VizResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VizResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VizResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s13BlinkIDVerify9VizResultVD;
  static inline constexpr $s13BlinkIDVerify9VizResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VizResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VizResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VizResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VizResult returnNewValue(T callable) {
    auto result = VizResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s13BlinkIDVerify9VizResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkIDVerify::VizResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkIDVerify::_impl::$s13BlinkIDVerify9VizResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkIDVerify::VizResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkIDVerify::VizResult> = true;
template<>
struct implClassFor<BlinkIDVerify::VizResult> { using type = BlinkIDVerify::_impl::_impl_VizResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkIDVerify SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkIDVerify") {





  SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> AdditionalProcessingInfo::getFrontProcessingStatus() const {
  return swift::_impl::_impl_Optional<ProcessingStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify24AdditionalProcessingInfoV05frontD6StatusAA0dG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> AdditionalProcessingInfo::getBackProcessingStatus() const {
  return swift::_impl::_impl_Optional<ProcessingStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify24AdditionalProcessingInfoV04backD6StatusAA0dG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK RecognitionMode AdditionalProcessingInfo::getRecognitionMode() const {
  return _impl::_impl_RecognitionMode::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify24AdditionalProcessingInfoV15recognitionModeAA011RecognitionG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String AdditionalProcessingInfo::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify24AdditionalProcessingInfoV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_none::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17AnonymizationModeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isNone() const {
    return *this == AnonymizationMode::none;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_imageOnly::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17AnonymizationModeO9imageOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isImageOnly() const {
    return *this == AnonymizationMode::imageOnly;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_resultFieldsOnly::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17AnonymizationModeO16resultFieldsOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isResultFieldsOnly() const {
    return *this == AnonymizationMode::resultFieldsOnly;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_fullResult::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17AnonymizationModeO10fullResultyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isFullResult() const {
    return *this == AnonymizationMode::fullResult;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isUnknownDefault() const {
    return *this == AnonymizationMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String AnonymizationMode::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify17AnonymizationModeO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> AnonymizationMode::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<AnonymizationMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify17AnonymizationModeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String AnonymizationMode::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify17AnonymizationModeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<TieredCheck> BarcodeAnomalyCheck::getOverall() const {
  return swift::_impl::_impl_Optional<TieredCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckV7overallAA06TieredE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> BarcodeAnomalyCheck::getContentCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckV07contentE0AA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> BarcodeAnomalyCheck::getReadCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckV04readE0AA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeAnomalyCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify19BarcodeAnomalyCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<EncodedImage> BlinkIDVerifyCaptureResult::getFrontCameraFrameJpeg() const {
  return swift::_impl::_impl_Optional<EncodedImage>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB13CaptureResultV20frontCameraFrameJpegAA12EncodedImageVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<EncodedImage> BlinkIDVerifyCaptureResult::getBackCameraFrameJpeg() const {
  return swift::_impl::_impl_Optional<EncodedImage>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB13CaptureResultV19backCameraFrameJpegAA12EncodedImageVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<EncodedImage> BlinkIDVerifyCaptureResult::getBarcodeCameraFrameJpeg() const {
  return swift::_impl::_impl_Optional<EncodedImage>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB13CaptureResultV22barcodeCameraFrameJpegAA12EncodedImageVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequest BlinkIDVerifyCaptureResult::toBlinkIDVerifyRequest(const swift::Optional<BlinkIDVerifyRequestSettings>& requestSettings) const {
  return _impl::_impl_BlinkIDVerifyRequest::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB13CaptureResultV02toaB7Request15requestSettingsAA0abF0VAA0abfH0VSg_tF(result, swift::_impl::_impl_Optional<BlinkIDVerifyRequestSettings>::getOpaquePointer(requestSettings), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyEndpointResponse::getProcessingStatus() const {
  return _impl::_impl_BlinkIDVerifyProcessingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16EndpointResponseV16processingStatusAA0ab10ProcessingF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> BlinkIDVerifyEndpointResponse::getVerification() const {
  return swift::_impl::_impl_Optional<DetailedCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16EndpointResponseV12verificationAA13DetailedCheckVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> BlinkIDVerifyEndpointResponse::getChecks() const {
  return swift::_impl::_impl_Optional<CheckArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16EndpointResponseV6checksAA10CheckArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<ProcessIndicator>> BlinkIDVerifyEndpointResponse::getProcessIndicators() const {
  return swift::_impl::_impl_Optional<swift::Array<ProcessIndicator>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify0aB16EndpointResponseV17processIndicatorsSayAA16ProcessIndicatorVGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Extraction> BlinkIDVerifyEndpointResponse::getExtraction() const {
  return swift::_impl::_impl_Optional<Extraction>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16EndpointResponseV10extractionAA10ExtractionVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<VerifyMessage>> BlinkIDVerifyEndpointResponse::getMessages() const {
  return swift::_impl::_impl_Optional<swift::Array<VerifyMessage>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify0aB16EndpointResponseV8messagesSayAA13VerifyMessageVGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<VerifyRuntime> BlinkIDVerifyEndpointResponse::getRuntime() const {
  return swift::_impl::_impl_Optional<VerifyRuntime>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16EndpointResponseV7runtimeAA13VerifyRuntimeVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<ImageResult>> BlinkIDVerifyEndpointResponse::getImages() const {
  return swift::_impl::_impl_Optional<swift::Array<ImageResult>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify0aB16EndpointResponseV6imagesSayAA11ImageResultVGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingOptions> BlinkIDVerifyEndpointResponse::getOptionsUsed() const {
  return swift::_impl::_impl_Optional<BlinkIDVerifyProcessingOptions>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16EndpointResponseV11optionsUsedAA0aB17ProcessingOptionsVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingUseCase> BlinkIDVerifyEndpointResponse::getUseCaseUsed() const {
  return swift::_impl::_impl_Optional<BlinkIDVerifyProcessingUseCase>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16EndpointResponseV11useCaseUsedAA0ab13ProcessingUseF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDVerifyEndpointResponse::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify0aB16EndpointResponseV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDVerifyProcessingOptions::getReturnFullDocumentImage() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImageSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setReturnFullDocumentImage(const swift::Optional<bool>& value) {
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImageSbSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDVerifyProcessingOptions::getReturnFaceImage() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV15returnFaceImageSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setReturnFaceImage(const swift::Optional<bool>& value) {
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV15returnFaceImageSbSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDVerifyProcessingOptions::getReturnSignatureImage() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV20returnSignatureImageSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setReturnSignatureImage(const swift::Optional<bool>& value) {
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV20returnSignatureImageSbSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDVerifyProcessingOptions::getTreatExpirationAsFraud() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV22treatExpirationAsFraudSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setTreatExpirationAsFraud(const swift::Optional<bool>& value) {
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV22treatExpirationAsFraudSbSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> BlinkIDVerifyProcessingOptions::getScreenMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV16screenMatchLevelAA0fG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setScreenMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV16screenMatchLevelAA0fG0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> BlinkIDVerifyProcessingOptions::getPhotocopyMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV19photocopyMatchLevelAA0fG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setPhotocopyMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV19photocopyMatchLevelAA0fG0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> BlinkIDVerifyProcessingOptions::getVisualAnomalyMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV23visualAnomalyMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setVisualAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV23visualAnomalyMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> BlinkIDVerifyProcessingOptions::getBarcodeAnomalyMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV24barcodeAnomalyMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setBarcodeAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV24barcodeAnomalyMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> BlinkIDVerifyProcessingOptions::getPhotoForgeryMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV22photoForgeryMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setPhotoForgeryMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV22photoForgeryMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> BlinkIDVerifyProcessingOptions::getStaticSecurityFeaturesMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV32staticSecurityFeaturesMatchLevelAA0hI0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setStaticSecurityFeaturesMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV32staticSecurityFeaturesMatchLevelAA0hI0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> BlinkIDVerifyProcessingOptions::getDataMatchMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV09dataMatchF5LevelAA0fG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setDataMatchMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV09dataMatchF5LevelAA0fG0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageQualitySettings> BlinkIDVerifyProcessingOptions::getImageQualitySettings() const {
  return swift::_impl::_impl_Optional<ImageQualitySettings>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV20imageQualitySettingsAA05ImagefG0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setImageQualitySettings(const swift::Optional<ImageQualitySettings>& value) {
  alignas(alignof(swift::Optional<ImageQualitySettings>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<ImageQualitySettings>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<ImageQualitySettings>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageQualitySettings>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV20imageQualitySettingsAA05ImagefG0VSgvs(swift::_impl::_impl_Optional<ImageQualitySettings>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageFormat> BlinkIDVerifyProcessingOptions::getReturnImageFormat() const {
  return swift::_impl::_impl_Optional<ImageFormat>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV17returnImageFormatAA0fG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setReturnImageFormat(const swift::Optional<ImageFormat>& value) {
  alignas(alignof(swift::Optional<ImageFormat>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<ImageFormat>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<ImageFormat>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageFormat>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV17returnImageFormatAA0fG0OSgvs(swift::_impl::_impl_Optional<ImageFormat>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> BlinkIDVerifyProcessingOptions::getAnonymizationMode() const {
  return swift::_impl::_impl_Optional<AnonymizationMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV17anonymizationModeAA013AnonymizationF0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setAnonymizationMode(const swift::Optional<AnonymizationMode>& value) {
  alignas(alignof(swift::Optional<AnonymizationMode>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<AnonymizationMode>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<AnonymizationMode>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<AnonymizationMode>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV17anonymizationModeAA013AnonymizationF0OSgvs(swift::_impl::_impl_Optional<AnonymizationMode>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<VerificationSideMode> BlinkIDVerifyProcessingOptions::getSideMode() const {
  return swift::_impl::_impl_Optional<VerificationSideMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV8sideModeAA016VerificationSideF0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingOptions::setSideMode(const swift::Optional<VerificationSideMode>& value) {
  alignas(alignof(swift::Optional<VerificationSideMode>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<VerificationSideMode>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<VerificationSideMode>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<VerificationSideMode>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV8sideModeAA016VerificationSideF0OSgvs(swift::_impl::_impl_Optional<VerificationSideMode>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingOptions BlinkIDVerifyProcessingOptions::init(const swift::Optional<bool>& returnFullDocumentImage, const swift::Optional<bool>& returnFaceImage, const swift::Optional<bool>& returnSignatureImage, const swift::Optional<bool>& treatExpirationAsFraud, const swift::Optional<MatchLevel>& screenMatchLevel, const swift::Optional<MatchLevel>& photocopyMatchLevel, const swift::Optional<MatchLevel>& visualAnomalyMatchLevel, const swift::Optional<MatchLevel>& barcodeAnomalyMatchLevel, const swift::Optional<MatchLevel>& photoForgeryMatchLevel, const swift::Optional<MatchLevel>& staticSecurityFeaturesMatchLevel, const swift::Optional<MatchLevel>& dataMatchMatchLevel, const swift::Optional<ImageQualitySettings>& imageQualitySettings, const swift::Optional<ImageFormat>& returnImageFormat, const swift::Optional<AnonymizationMode>& anonymizationMode, const swift::Optional<VerificationSideMode>& sideMode) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_screenMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_screenMatchLevel = *(new(copyBuffer_consumedParamCopy_screenMatchLevel) swift::Optional<MatchLevel>(screenMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_screenMatchLevel(consumedParamCopy_screenMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_photocopyMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_photocopyMatchLevel = *(new(copyBuffer_consumedParamCopy_photocopyMatchLevel) swift::Optional<MatchLevel>(photocopyMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_photocopyMatchLevel(consumedParamCopy_photocopyMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_visualAnomalyMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_visualAnomalyMatchLevel = *(new(copyBuffer_consumedParamCopy_visualAnomalyMatchLevel) swift::Optional<MatchLevel>(visualAnomalyMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_visualAnomalyMatchLevel(consumedParamCopy_visualAnomalyMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_barcodeAnomalyMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_barcodeAnomalyMatchLevel = *(new(copyBuffer_consumedParamCopy_barcodeAnomalyMatchLevel) swift::Optional<MatchLevel>(barcodeAnomalyMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_barcodeAnomalyMatchLevel(consumedParamCopy_barcodeAnomalyMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_photoForgeryMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_photoForgeryMatchLevel = *(new(copyBuffer_consumedParamCopy_photoForgeryMatchLevel) swift::Optional<MatchLevel>(photoForgeryMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_photoForgeryMatchLevel(consumedParamCopy_photoForgeryMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_staticSecurityFeaturesMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_staticSecurityFeaturesMatchLevel = *(new(copyBuffer_consumedParamCopy_staticSecurityFeaturesMatchLevel) swift::Optional<MatchLevel>(staticSecurityFeaturesMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_staticSecurityFeaturesMatchLevel(consumedParamCopy_staticSecurityFeaturesMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_dataMatchMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_dataMatchMatchLevel = *(new(copyBuffer_consumedParamCopy_dataMatchMatchLevel) swift::Optional<MatchLevel>(dataMatchMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_dataMatchMatchLevel(consumedParamCopy_dataMatchMatchLevel);
  alignas(alignof(swift::Optional<ImageQualitySettings>)) char copyBuffer_consumedParamCopy_imageQualitySettings[sizeof(swift::Optional<ImageQualitySettings>)];
  auto &consumedParamCopy_imageQualitySettings = *(new(copyBuffer_consumedParamCopy_imageQualitySettings) swift::Optional<ImageQualitySettings>(imageQualitySettings));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageQualitySettings>> storageGuard_consumedParamCopy_imageQualitySettings(consumedParamCopy_imageQualitySettings);
  alignas(alignof(swift::Optional<ImageFormat>)) char copyBuffer_consumedParamCopy_returnImageFormat[sizeof(swift::Optional<ImageFormat>)];
  auto &consumedParamCopy_returnImageFormat = *(new(copyBuffer_consumedParamCopy_returnImageFormat) swift::Optional<ImageFormat>(returnImageFormat));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageFormat>> storageGuard_consumedParamCopy_returnImageFormat(consumedParamCopy_returnImageFormat);
  alignas(alignof(swift::Optional<AnonymizationMode>)) char copyBuffer_consumedParamCopy_anonymizationMode[sizeof(swift::Optional<AnonymizationMode>)];
  auto &consumedParamCopy_anonymizationMode = *(new(copyBuffer_consumedParamCopy_anonymizationMode) swift::Optional<AnonymizationMode>(anonymizationMode));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<AnonymizationMode>> storageGuard_consumedParamCopy_anonymizationMode(consumedParamCopy_anonymizationMode);
  alignas(alignof(swift::Optional<VerificationSideMode>)) char copyBuffer_consumedParamCopy_sideMode[sizeof(swift::Optional<VerificationSideMode>)];
  auto &consumedParamCopy_sideMode = *(new(copyBuffer_consumedParamCopy_sideMode) swift::Optional<VerificationSideMode>(sideMode));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<VerificationSideMode>> storageGuard_consumedParamCopy_sideMode(consumedParamCopy_sideMode);
  return _impl::_impl_BlinkIDVerifyProcessingOptions::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV23returnFullDocumentImage0e4FaceH00e9SignatureH022treatExpirationAsFraud16screenMatchLevel09photocopypQ0013visualAnomalypQ007barcodetpQ0012photoForgerypQ0022staticSecurityFeaturespQ004datappQ020imageQualitySettings0eH6Format17anonymizationMode8sideModeACSbSg_A3sA0pQ0OSgA6vA0H15QualitySettingsVSgAA0H6FormatOSgAA17AnonymizationModeOSgAA20VerificationSideModeOSgtcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(returnFullDocumentImage)), _impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(returnFaceImage)), _impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(returnSignatureImage)), _impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(treatExpirationAsFraud)), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_screenMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_photocopyMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_visualAnomalyMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_barcodeAnomalyMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_photoForgeryMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_staticSecurityFeaturesMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_dataMatchMatchLevel), swift::_impl::_impl_Optional<ImageQualitySettings>::getOpaquePointer(consumedParamCopy_imageQualitySettings), swift::_impl::_impl_Optional<ImageFormat>::getOpaquePointer(consumedParamCopy_returnImageFormat), swift::_impl::_impl_Optional<AnonymizationMode>::getOpaquePointer(consumedParamCopy_anonymizationMode), swift::_impl::_impl_Optional<VerificationSideMode>::getOpaquePointer(consumedParamCopy_sideMode));
  });
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDVerifyProcessingOptions::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify0aB17ProcessingOptionsV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_notAvailable::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isNotAvailable() const {
    return *this == BlinkIDVerifyProcessingStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_extractionFailed::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO16extractionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isExtractionFailed() const {
    return *this == BlinkIDVerifyProcessingStatus::extractionFailed;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_completed::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO9completedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isCompleted() const {
    return *this == BlinkIDVerifyProcessingStatus::completed;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_partiallyCompleted::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO18partiallyCompletedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isPartiallyCompleted() const {
    return *this == BlinkIDVerifyProcessingStatus::partiallyCompleted;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_completedAfterFront::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO19completedAfterFrontyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isCompletedAfterFront() const {
    return *this == BlinkIDVerifyProcessingStatus::completedAfterFront;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_serverModelError::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO16serverModelErroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isServerModelError() const {
    return *this == BlinkIDVerifyProcessingStatus::serverModelError;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_fullyCroppedDocument::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO20fullyCroppedDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isFullyCroppedDocument() const {
    return *this == BlinkIDVerifyProcessingStatus::fullyCroppedDocument;
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus BlinkIDVerifyProcessingStatus::_impl_unknown::operator()() const {
    auto result = BlinkIDVerifyProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify0aB16ProcessingStatusO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isUnknown() const {
    return *this == BlinkIDVerifyProcessingStatus::unknown;
  }
  SWIFT_INLINE_THUNK  bool BlinkIDVerifyProcessingStatus::isUnknownDefault() const {
    return *this == BlinkIDVerifyProcessingStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingStatus> BlinkIDVerifyProcessingStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<BlinkIDVerifyProcessingStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB16ProcessingStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDVerifyProcessingStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify0aB16ProcessingStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentVerificationPolicy> BlinkIDVerifyProcessingUseCase::getDocumentVerificationPolicy() const {
  return swift::_impl::_impl_Optional<DocumentVerificationPolicy>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicyAA08DocumentgH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingUseCase::setDocumentVerificationPolicy(const swift::Optional<DocumentVerificationPolicy>& value) {
  alignas(alignof(swift::Optional<DocumentVerificationPolicy>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DocumentVerificationPolicy>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DocumentVerificationPolicy>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentVerificationPolicy>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicyAA08DocumentgH0OSgvs(swift::_impl::_impl_Optional<DocumentVerificationPolicy>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<VerificationContext> BlinkIDVerifyProcessingUseCase::getVerificationContext() const {
  return swift::_impl::_impl_Optional<VerificationContext>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV19verificationContextAA012VerificationG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingUseCase::setVerificationContext(const swift::Optional<VerificationContext>& value) {
  alignas(alignof(swift::Optional<VerificationContext>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<VerificationContext>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<VerificationContext>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<VerificationContext>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV19verificationContextAA012VerificationG0OSgvs(swift::_impl::_impl_Optional<VerificationContext>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<ReviewStrategy> BlinkIDVerifyProcessingUseCase::getManualReviewStrategy() const {
  return swift::_impl::_impl_Optional<ReviewStrategy>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV20manualReviewStrategyAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingUseCase::setManualReviewStrategy(const swift::Optional<ReviewStrategy>& value) {
  alignas(alignof(swift::Optional<ReviewStrategy>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<ReviewStrategy>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<ReviewStrategy>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ReviewStrategy>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV20manualReviewStrategyAA0gH0OSgvs(swift::_impl::_impl_Optional<ReviewStrategy>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<ReviewSensitivity> BlinkIDVerifyProcessingUseCase::getManualReviewSensitivity() const {
  return swift::_impl::_impl_Optional<ReviewSensitivity>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV23manualReviewSensitivityAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyProcessingUseCase::setManualReviewSensitivity(const swift::Optional<ReviewSensitivity>& value) {
  alignas(alignof(swift::Optional<ReviewSensitivity>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<ReviewSensitivity>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<ReviewSensitivity>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ReviewSensitivity>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV23manualReviewSensitivityAA0gH0OSgvs(swift::_impl::_impl_Optional<ReviewSensitivity>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingUseCase BlinkIDVerifyProcessingUseCase::init(const swift::Optional<DocumentVerificationPolicy>& documentVerificationPolicy, const swift::Optional<VerificationContext>& verificationContext, const swift::Optional<ReviewStrategy>& manualReviewStrategy, const swift::Optional<ReviewSensitivity>& manualReviewSensitivity) {
  alignas(alignof(swift::Optional<DocumentVerificationPolicy>)) char copyBuffer_consumedParamCopy_documentVerificationPolicy[sizeof(swift::Optional<DocumentVerificationPolicy>)];
  auto &consumedParamCopy_documentVerificationPolicy = *(new(copyBuffer_consumedParamCopy_documentVerificationPolicy) swift::Optional<DocumentVerificationPolicy>(documentVerificationPolicy));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentVerificationPolicy>> storageGuard_consumedParamCopy_documentVerificationPolicy(consumedParamCopy_documentVerificationPolicy);
  alignas(alignof(swift::Optional<VerificationContext>)) char copyBuffer_consumedParamCopy_verificationContext[sizeof(swift::Optional<VerificationContext>)];
  auto &consumedParamCopy_verificationContext = *(new(copyBuffer_consumedParamCopy_verificationContext) swift::Optional<VerificationContext>(verificationContext));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<VerificationContext>> storageGuard_consumedParamCopy_verificationContext(consumedParamCopy_verificationContext);
  alignas(alignof(swift::Optional<ReviewStrategy>)) char copyBuffer_consumedParamCopy_manualReviewStrategy[sizeof(swift::Optional<ReviewStrategy>)];
  auto &consumedParamCopy_manualReviewStrategy = *(new(copyBuffer_consumedParamCopy_manualReviewStrategy) swift::Optional<ReviewStrategy>(manualReviewStrategy));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ReviewStrategy>> storageGuard_consumedParamCopy_manualReviewStrategy(consumedParamCopy_manualReviewStrategy);
  alignas(alignof(swift::Optional<ReviewSensitivity>)) char copyBuffer_consumedParamCopy_manualReviewSensitivity[sizeof(swift::Optional<ReviewSensitivity>)];
  auto &consumedParamCopy_manualReviewSensitivity = *(new(copyBuffer_consumedParamCopy_manualReviewSensitivity) swift::Optional<ReviewSensitivity>(manualReviewSensitivity));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ReviewSensitivity>> storageGuard_consumedParamCopy_manualReviewSensitivity(consumedParamCopy_manualReviewSensitivity);
  return _impl::_impl_BlinkIDVerifyProcessingUseCase::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV26documentVerificationPolicy19verificationContext20manualReviewStrategy0kL11SensitivityAcA08DocumentgH0OSg_AA0gJ0OSgAA0lM0OSgAA0lN0OSgtcfC(result, swift::_impl::_impl_Optional<DocumentVerificationPolicy>::getOpaquePointer(consumedParamCopy_documentVerificationPolicy), swift::_impl::_impl_Optional<VerificationContext>::getOpaquePointer(consumedParamCopy_verificationContext), swift::_impl::_impl_Optional<ReviewStrategy>::getOpaquePointer(consumedParamCopy_manualReviewStrategy), swift::_impl::_impl_Optional<ReviewSensitivity>::getOpaquePointer(consumedParamCopy_manualReviewSensitivity));
  });
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDVerifyProcessingUseCase::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify0aB17ProcessingUseCaseV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingOptions> BlinkIDVerifyRequest::getOptions() const {
  return swift::_impl::_impl_Optional<BlinkIDVerifyProcessingOptions>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB7RequestV7optionsAA0aB17ProcessingOptionsVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequest::setOptions(const swift::Optional<BlinkIDVerifyProcessingOptions>& value) {
  alignas(alignof(swift::Optional<BlinkIDVerifyProcessingOptions>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<BlinkIDVerifyProcessingOptions>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<BlinkIDVerifyProcessingOptions>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<BlinkIDVerifyProcessingOptions>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB7RequestV7optionsAA0aB17ProcessingOptionsVSgvs(swift::_impl::_impl_Optional<BlinkIDVerifyProcessingOptions>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingUseCase> BlinkIDVerifyRequest::getUseCase() const {
  return swift::_impl::_impl_Optional<BlinkIDVerifyProcessingUseCase>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB7RequestV7useCaseAA0ab13ProcessingUseE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequest::setUseCase(const swift::Optional<BlinkIDVerifyProcessingUseCase>& value) {
  alignas(alignof(swift::Optional<BlinkIDVerifyProcessingUseCase>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<BlinkIDVerifyProcessingUseCase>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<BlinkIDVerifyProcessingUseCase>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<BlinkIDVerifyProcessingUseCase>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB7RequestV7useCaseAA0ab13ProcessingUseE0VSgvs(swift::_impl::_impl_Optional<BlinkIDVerifyProcessingUseCase>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> BlinkIDVerifyRequest::getTraceId() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify0aB7RequestV7traceIdSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequest::setTraceId(const swift::Optional<swift::String>& value) {
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::String>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB7RequestV7traceIdSSSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> BlinkIDVerifyRequest::getSessionID() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify0aB7RequestV9sessionIDSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequest::setSessionID(const swift::Optional<swift::String>& value) {
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::String>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB7RequestV9sessionIDSSSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDVerifyRequestSettings::getReturnFullDocumentImage() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImageSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequestSettings::setReturnFullDocumentImage(const swift::Optional<bool>& value) {
  _impl::$s13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImageSbSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDVerifyRequestSettings::getReturnFaceImage() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify0aB15RequestSettingsV15returnFaceImageSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequestSettings::setReturnFaceImage(const swift::Optional<bool>& value) {
  _impl::$s13BlinkIDVerify0aB15RequestSettingsV15returnFaceImageSbSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDVerifyRequestSettings::getReturnSignatureImage() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify0aB15RequestSettingsV20returnSignatureImageSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequestSettings::setReturnSignatureImage(const swift::Optional<bool>& value) {
  _impl::$s13BlinkIDVerify0aB15RequestSettingsV20returnSignatureImageSbSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageFormat> BlinkIDVerifyRequestSettings::getReturnImageFormat() const {
  return swift::_impl::_impl_Optional<ImageFormat>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB15RequestSettingsV17returnImageFormatAA0fG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequestSettings::setReturnImageFormat(const swift::Optional<ImageFormat>& value) {
  alignas(alignof(swift::Optional<ImageFormat>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<ImageFormat>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<ImageFormat>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageFormat>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB15RequestSettingsV17returnImageFormatAA0fG0OSgvs(swift::_impl::_impl_Optional<ImageFormat>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> BlinkIDVerifyRequestSettings::getAnonymizationMode() const {
  return swift::_impl::_impl_Optional<AnonymizationMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB15RequestSettingsV17anonymizationModeAA013AnonymizationF0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequestSettings::setAnonymizationMode(const swift::Optional<AnonymizationMode>& value) {
  alignas(alignof(swift::Optional<AnonymizationMode>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<AnonymizationMode>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<AnonymizationMode>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<AnonymizationMode>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB15RequestSettingsV17anonymizationModeAA013AnonymizationF0OSgvs(swift::_impl::_impl_Optional<AnonymizationMode>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> BlinkIDVerifyRequestSettings::getTraceId() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify0aB15RequestSettingsV7traceIdSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifyRequestSettings::setTraceId(const swift::Optional<swift::String>& value) {
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::String>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB15RequestSettingsV7traceIdSSSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyRequestSettings BlinkIDVerifyRequestSettings::init(const swift::Optional<bool>& returnFullDocumentImage, const swift::Optional<bool>& returnFaceImage, const swift::Optional<bool>& returnSignatureImage, const swift::Optional<ImageFormat>& returnImageFormat, const swift::Optional<AnonymizationMode>& anonymizationMode, const swift::Optional<swift::String>& traceId) {
  alignas(alignof(swift::Optional<ImageFormat>)) char copyBuffer_consumedParamCopy_returnImageFormat[sizeof(swift::Optional<ImageFormat>)];
  auto &consumedParamCopy_returnImageFormat = *(new(copyBuffer_consumedParamCopy_returnImageFormat) swift::Optional<ImageFormat>(returnImageFormat));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageFormat>> storageGuard_consumedParamCopy_returnImageFormat(consumedParamCopy_returnImageFormat);
  alignas(alignof(swift::Optional<AnonymizationMode>)) char copyBuffer_consumedParamCopy_anonymizationMode[sizeof(swift::Optional<AnonymizationMode>)];
  auto &consumedParamCopy_anonymizationMode = *(new(copyBuffer_consumedParamCopy_anonymizationMode) swift::Optional<AnonymizationMode>(anonymizationMode));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<AnonymizationMode>> storageGuard_consumedParamCopy_anonymizationMode(consumedParamCopy_anonymizationMode);
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_traceId[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_traceId = *(new(copyBuffer_consumedParamCopy_traceId) swift::Optional<swift::String>(traceId));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_traceId(consumedParamCopy_traceId);
  return _impl::_impl_BlinkIDVerifyRequestSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB15RequestSettingsV23returnFullDocumentImage0e4FaceH00e9SignatureH00eH6Format17anonymizationMode7traceIdACSbSg_A2jA0hK0OSgAA013AnonymizationM0OSgSSSgtcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(returnFullDocumentImage)), _impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(returnFaceImage)), _impl::swift_interop_passDirect_BlinkIDVerify_uint8_t_0_1(swift::_impl::_impl_Optional<bool>::getOpaquePointer(returnSignatureImage)), swift::_impl::_impl_Optional<ImageFormat>::getOpaquePointer(consumedParamCopy_returnImageFormat), swift::_impl::_impl_Optional<AnonymizationMode>::getOpaquePointer(consumedParamCopy_anonymizationMode), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_traceId)));
  });
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDVerifySdkSettings::getLicenseKey() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify0aB11SdkSettingsV10licenseKeySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifySdkSettings::setLicenseKey(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB11SdkSettingsV10licenseKeySSvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> BlinkIDVerifySdkSettings::getLicensee() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify0aB11SdkSettingsV8licenseeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifySdkSettings::setLicensee(const swift::Optional<swift::String>& value) {
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::String>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB11SdkSettingsV8licenseeSSSgvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool BlinkIDVerifySdkSettings::getHelloLogEnabled() const {
  return _impl::$s13BlinkIDVerify0aB11SdkSettingsV15helloLogEnabledSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifySdkSettings::setHelloLogEnabled(bool value) {
  _impl::$s13BlinkIDVerify0aB11SdkSettingsV15helloLogEnabledSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool BlinkIDVerifySdkSettings::getDownloadResources() const {
  return _impl::$s13BlinkIDVerify0aB11SdkSettingsV17downloadResourcesSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifySdkSettings::setDownloadResources(bool value) {
  _impl::$s13BlinkIDVerify0aB11SdkSettingsV17downloadResourcesSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDVerifySdkSettings::getResourceDownloadUrl() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify0aB11SdkSettingsV19resourceDownloadUrlSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifySdkSettings::setResourceDownloadUrl(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB11SdkSettingsV19resourceDownloadUrlSSvs(_impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDVerifySdkSettings::getResourceLocalFolder() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify0aB11SdkSettingsV19resourceLocalFolderSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK RequestTimeout BlinkIDVerifySdkSettings::getResourceRequestTimeout() const {
  return _impl::_impl_RequestTimeout::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB11SdkSettingsV22resourceRequestTimeoutAA0fG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDVerifySdkSettings::setResourceRequestTimeout(const RequestTimeout& value) {
  alignas(alignof(RequestTimeout)) char copyBuffer_consumedParamCopy_value[sizeof(RequestTimeout)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) RequestTimeout(value));
  swift::_impl::ConsumedValueStorageDestroyer<RequestTimeout> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify0aB11SdkSettingsV22resourceRequestTimeoutAA0fG0Vvs(_impl::_impl_RequestTimeout::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyService BlinkIDVerifyService::init(const BlinkIDVerifyServiceSettings& settings) {
  alignas(alignof(BlinkIDVerifyServiceSettings)) char copyBuffer_consumedParamCopy_settings[sizeof(BlinkIDVerifyServiceSettings)];
  auto &consumedParamCopy_settings = *(new(copyBuffer_consumedParamCopy_settings) BlinkIDVerifyServiceSettings(settings));
  swift::_impl::ConsumedValueStorageDestroyer<BlinkIDVerifyServiceSettings> storageGuard_consumedParamCopy_settings(consumedParamCopy_settings);
  return _impl::_impl_BlinkIDVerifyService::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB7ServiceV8settingsAcA0abC8SettingsV_tcfC(result, _impl::_impl_BlinkIDVerifyServiceSettings::getOpaquePointer(consumedParamCopy_settings));
  });
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings BlinkIDVerifyServiceSettings::init(const swift::String& verificationServiceBaseUrl, const swift::Optional<swift::String>& mbClientSdkName, const swift::Optional<swift::String>& mbClientSdkVersion, const swift::Optional<swift::String>& mbRunnerVersion) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_verificationServiceBaseUrl[sizeof(swift::String)];
  auto &consumedParamCopy_verificationServiceBaseUrl = *(new(copyBuffer_consumedParamCopy_verificationServiceBaseUrl) swift::String(verificationServiceBaseUrl));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_verificationServiceBaseUrl(consumedParamCopy_verificationServiceBaseUrl);
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_mbClientSdkName[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_mbClientSdkName = *(new(copyBuffer_consumedParamCopy_mbClientSdkName) swift::Optional<swift::String>(mbClientSdkName));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_mbClientSdkName(consumedParamCopy_mbClientSdkName);
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_mbClientSdkVersion[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_mbClientSdkVersion = *(new(copyBuffer_consumedParamCopy_mbClientSdkVersion) swift::Optional<swift::String>(mbClientSdkVersion));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_mbClientSdkVersion(consumedParamCopy_mbClientSdkVersion);
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_mbRunnerVersion[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_mbRunnerVersion = *(new(copyBuffer_consumedParamCopy_mbRunnerVersion) swift::Optional<swift::String>(mbRunnerVersion));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_mbRunnerVersion(consumedParamCopy_mbRunnerVersion);
  return _impl::_impl_BlinkIDVerifyServiceSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB15ServiceSettingsV012verificationC7BaseUrl15mbClientSdkName0hiJ7Version0h6RunnerL0ACSS_SSSgA2HtcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_verificationServiceBaseUrl)), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_mbClientSdkName)), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_mbClientSdkVersion)), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_mbRunnerVersion)));
  });
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyServiceSettings BlinkIDVerifyServiceSettings::init(const swift::String& verificationServiceBaseUrl, const swift::String& token, const swift::Optional<swift::String>& mbClientSdkName, const swift::Optional<swift::String>& mbClientSdkVersion, const swift::Optional<swift::String>& mbRunnerVersion) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_verificationServiceBaseUrl[sizeof(swift::String)];
  auto &consumedParamCopy_verificationServiceBaseUrl = *(new(copyBuffer_consumedParamCopy_verificationServiceBaseUrl) swift::String(verificationServiceBaseUrl));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_verificationServiceBaseUrl(consumedParamCopy_verificationServiceBaseUrl);
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_token[sizeof(swift::String)];
  auto &consumedParamCopy_token = *(new(copyBuffer_consumedParamCopy_token) swift::String(token));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_token(consumedParamCopy_token);
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_mbClientSdkName[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_mbClientSdkName = *(new(copyBuffer_consumedParamCopy_mbClientSdkName) swift::Optional<swift::String>(mbClientSdkName));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_mbClientSdkName(consumedParamCopy_mbClientSdkName);
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_mbClientSdkVersion[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_mbClientSdkVersion = *(new(copyBuffer_consumedParamCopy_mbClientSdkVersion) swift::Optional<swift::String>(mbClientSdkVersion));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_mbClientSdkVersion(consumedParamCopy_mbClientSdkVersion);
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_mbRunnerVersion[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_mbRunnerVersion = *(new(copyBuffer_consumedParamCopy_mbRunnerVersion) swift::Optional<swift::String>(mbRunnerVersion));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_mbRunnerVersion(consumedParamCopy_mbRunnerVersion);
  return _impl::_impl_BlinkIDVerifyServiceSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify0aB15ServiceSettingsV012verificationC7BaseUrl5token15mbClientSdkName0ijK7Version0i6RunnerM0ACSS_S2SSgA2ItcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_verificationServiceBaseUrl)), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_token)), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_mbClientSdkName)), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_mbClientSdkVersion)), _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_mbRunnerVersion)));
  });
  }
  SWIFT_INLINE_THUNK double Bounds::getX() const {
  return _impl::$s13BlinkIDVerify6BoundsV1xSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double Bounds::getY() const {
  return _impl::$s13BlinkIDVerify6BoundsV1ySdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double Bounds::getWidth() const {
  return _impl::$s13BlinkIDVerify6BoundsV5widthSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double Bounds::getHeight() const {
  return _impl::$s13BlinkIDVerify6BoundsV6heightSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String Bounds::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify6BoundsV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK MBSampleBufferWrapper *_Nonnull CameraFrame::getBuffer() const {
return (__bridge_transfer MBSampleBufferWrapper *)(__bridge void *)_impl::$s13BlinkIDVerify11CameraFrameV6bufferSo21MBSampleBufferWrapperCvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RegionOfInterest CameraFrame::getRoi() const {
  return _impl::_impl_RegionOfInterest::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11CameraFrameV3roiAA16RegionOfInterestVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrame::getOrientation() const {
  return _impl::_impl_CameraFrameVideoOrientation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11CameraFrameV11orientationAA0cD16VideoOrientationOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CameraFrame CameraFrame::init(MBSampleBufferWrapper *_Nonnull buffer, const RegionOfInterest& roi, const CameraFrameVideoOrientation& orientation) {
  alignas(alignof(MBSampleBufferWrapper *_Nonnull)) char copyBuffer_consumedParamCopy_buffer[sizeof(MBSampleBufferWrapper *_Nonnull)];
  auto &consumedParamCopy_buffer = *(new(copyBuffer_consumedParamCopy_buffer) MBSampleBufferWrapper *_Nonnull(buffer));
  swift::_impl::ConsumedValueStorageDestroyer<MBSampleBufferWrapper *_Nonnull> storageGuard_consumedParamCopy_buffer(consumedParamCopy_buffer);
  alignas(alignof(RegionOfInterest)) char copyBuffer_consumedParamCopy_roi[sizeof(RegionOfInterest)];
  auto &consumedParamCopy_roi = *(new(copyBuffer_consumedParamCopy_roi) RegionOfInterest(roi));
  swift::_impl::ConsumedValueStorageDestroyer<RegionOfInterest> storageGuard_consumedParamCopy_roi(consumedParamCopy_roi);
  alignas(alignof(CameraFrameVideoOrientation)) char copyBuffer_consumedParamCopy_orientation[sizeof(CameraFrameVideoOrientation)];
  auto &consumedParamCopy_orientation = *(new(copyBuffer_consumedParamCopy_orientation) CameraFrameVideoOrientation(orientation));
  swift::_impl::ConsumedValueStorageDestroyer<CameraFrameVideoOrientation> storageGuard_consumedParamCopy_orientation(consumedParamCopy_orientation);
  return _impl::_impl_CameraFrame::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfC(result, consumedParamCopy_buffer, _impl::_impl_RegionOfInterest::getOpaquePointer(consumedParamCopy_roi), _impl::_impl_CameraFrameVideoOrientation::getOpaquePointer(consumedParamCopy_orientation));
  });
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrame::getWidth() const {
  return _impl::$s13BlinkIDVerify11CameraFrameV5widthSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrame::getHeight() const {
  return _impl::$s13BlinkIDVerify11CameraFrameV6heightSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_portrait::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO8portraityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isPortrait() const {
    return *this == CameraFrameVideoOrientation::portrait;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_portraitUpsideDown::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isPortraitUpsideDown() const {
    return *this == CameraFrameVideoOrientation::portraitUpsideDown;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_landscapeRight::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isLandscapeRight() const {
    return *this == CameraFrameVideoOrientation::landscapeRight;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_landscapeLeft::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isLandscapeLeft() const {
    return *this == CameraFrameVideoOrientation::landscapeLeft;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isUnknownDefault() const {
    return *this == CameraFrameVideoOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrameVideoOrientation::getHashValue() const {
  return _impl::$s13BlinkIDVerify27CameraFrameVideoOrientationO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CapturePolicy CapturePolicy::_impl_video::operator()() const {
    auto result = CapturePolicy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13CapturePolicyO5videoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CapturePolicy::isVideo() const {
    return *this == CapturePolicy::video;
  }
  SWIFT_INLINE_THUNK CapturePolicy CapturePolicy::_impl_photo::operator()() const {
    auto result = CapturePolicy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13CapturePolicyO5photoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CapturePolicy::isPhoto() const {
    return *this == CapturePolicy::photo;
  }
  SWIFT_INLINE_THUNK  bool CapturePolicy::isUnknownDefault() const {
    return *this == CapturePolicy::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CapturePolicy::getHashValue() const {
  return _impl::$s13BlinkIDVerify13CapturePolicyO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CaptureSession::cancelActiveProcessing() {
  _impl::$s13BlinkIDVerify14CaptureSessionC22cancelActiveProcessingyyF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void CaptureSession::restart() {
  _impl::$s13BlinkIDVerify14CaptureSessionC7restartyyF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK CapturePolicy CaptureSessionSettings::getCapturePolicy() const {
  return _impl::_impl_CapturePolicy::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV13capturePolicyAA0cG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setCapturePolicy(const CapturePolicy& value) {
  alignas(alignof(CapturePolicy)) char copyBuffer_consumedParamCopy_value[sizeof(CapturePolicy)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) CapturePolicy(value));
  swift::_impl::ConsumedValueStorageDestroyer<CapturePolicy> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV13capturePolicyAA0cG0Ovs(_impl::_impl_CapturePolicy::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CaptureSessionSettings::getTreatExpirationAsFraud() const {
  return _impl::$s13BlinkIDVerify22CaptureSessionSettingsV22treatExpirationAsFraudSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setTreatExpirationAsFraud(bool value) {
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV22treatExpirationAsFraudSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> CaptureSessionSettings::getScreenAnalysisMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV24screenAnalysisMatchLevelAA0hI0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setScreenAnalysisMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV24screenAnalysisMatchLevelAA0hI0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> CaptureSessionSettings::getPhotocopyAnalysisMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV27photocopyAnalysisMatchLevelAA0hI0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setPhotocopyAnalysisMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV27photocopyAnalysisMatchLevelAA0hI0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> CaptureSessionSettings::getVisualAnomalyMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV23visualAnomalyMatchLevelAA0hI0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setVisualAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV23visualAnomalyMatchLevelAA0hI0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> CaptureSessionSettings::getPhotoForgeryMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV22photoForgeryMatchLevelAA0hI0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setPhotoForgeryMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV22photoForgeryMatchLevelAA0hI0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> CaptureSessionSettings::getStaticSecurityFeaturesMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV32staticSecurityFeaturesMatchLevelAA0iJ0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setStaticSecurityFeaturesMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV32staticSecurityFeaturesMatchLevelAA0iJ0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> CaptureSessionSettings::getBarcodeAnomalyMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV24barcodeAnomalyMatchLevelAA0hI0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setBarcodeAnomalyMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV24barcodeAnomalyMatchLevelAA0hI0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> CaptureSessionSettings::getDataMatchMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV09dataMatchG5LevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setDataMatchMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV09dataMatchG5LevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageQualitySettings> CaptureSessionSettings::getImageQualitySettings() const {
  return swift::_impl::_impl_Optional<ImageQualitySettings>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV012imageQualityE0AA05ImagegE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setImageQualitySettings(const swift::Optional<ImageQualitySettings>& value) {
  alignas(alignof(swift::Optional<ImageQualitySettings>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<ImageQualitySettings>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<ImageQualitySettings>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageQualitySettings>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV012imageQualityE0AA05ImagegE0VSgvs(swift::_impl::_impl_Optional<ImageQualitySettings>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<BlinkIDVerifyProcessingUseCase> CaptureSessionSettings::getUseCase() const {
  return swift::_impl::_impl_Optional<BlinkIDVerifyProcessingUseCase>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV7useCaseAA0ab13ProcessingUseG0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setUseCase(const swift::Optional<BlinkIDVerifyProcessingUseCase>& value) {
  alignas(alignof(swift::Optional<BlinkIDVerifyProcessingUseCase>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<BlinkIDVerifyProcessingUseCase>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<BlinkIDVerifyProcessingUseCase>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<BlinkIDVerifyProcessingUseCase>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV7useCaseAA0ab13ProcessingUseG0VSgvs(swift::_impl::_impl_Optional<BlinkIDVerifyProcessingUseCase>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double CaptureSessionSettings::getStepTimeoutDuration() const {
  return _impl::$s13BlinkIDVerify22CaptureSessionSettingsV19stepTimeoutDurationSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CaptureSessionSettings::setStepTimeoutDuration(double value) {
  _impl::$s13BlinkIDVerify22CaptureSessionSettingsV19stepTimeoutDurationSdvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CaptureSessionSettings CaptureSessionSettings::init(const CapturePolicy& capturePolicy, bool treatExpirationAsFraud, const swift::Optional<MatchLevel>& screenAnalysisMatchLevel, const swift::Optional<MatchLevel>& photocopyAnalysisMatchLevel, const swift::Optional<MatchLevel>& visualAnomalyMatchLevel, const swift::Optional<MatchLevel>& photoForgeryMatchLevel, const swift::Optional<MatchLevel>& staticSecurityFeaturesMatchLevel, const swift::Optional<MatchLevel>& barcodeAnomalyMatchLevel, const swift::Optional<MatchLevel>& dataMatchMatchLevel, const swift::Optional<ImageQualitySettings>& imageQualitySettings, const swift::Optional<BlinkIDVerifyProcessingUseCase>& useCase, double stepTimeoutDuration) {
  alignas(alignof(CapturePolicy)) char copyBuffer_consumedParamCopy_capturePolicy[sizeof(CapturePolicy)];
  auto &consumedParamCopy_capturePolicy = *(new(copyBuffer_consumedParamCopy_capturePolicy) CapturePolicy(capturePolicy));
  swift::_impl::ConsumedValueStorageDestroyer<CapturePolicy> storageGuard_consumedParamCopy_capturePolicy(consumedParamCopy_capturePolicy);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_screenAnalysisMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_screenAnalysisMatchLevel = *(new(copyBuffer_consumedParamCopy_screenAnalysisMatchLevel) swift::Optional<MatchLevel>(screenAnalysisMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_screenAnalysisMatchLevel(consumedParamCopy_screenAnalysisMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_photocopyAnalysisMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_photocopyAnalysisMatchLevel = *(new(copyBuffer_consumedParamCopy_photocopyAnalysisMatchLevel) swift::Optional<MatchLevel>(photocopyAnalysisMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_photocopyAnalysisMatchLevel(consumedParamCopy_photocopyAnalysisMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_visualAnomalyMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_visualAnomalyMatchLevel = *(new(copyBuffer_consumedParamCopy_visualAnomalyMatchLevel) swift::Optional<MatchLevel>(visualAnomalyMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_visualAnomalyMatchLevel(consumedParamCopy_visualAnomalyMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_photoForgeryMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_photoForgeryMatchLevel = *(new(copyBuffer_consumedParamCopy_photoForgeryMatchLevel) swift::Optional<MatchLevel>(photoForgeryMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_photoForgeryMatchLevel(consumedParamCopy_photoForgeryMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_staticSecurityFeaturesMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_staticSecurityFeaturesMatchLevel = *(new(copyBuffer_consumedParamCopy_staticSecurityFeaturesMatchLevel) swift::Optional<MatchLevel>(staticSecurityFeaturesMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_staticSecurityFeaturesMatchLevel(consumedParamCopy_staticSecurityFeaturesMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_barcodeAnomalyMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_barcodeAnomalyMatchLevel = *(new(copyBuffer_consumedParamCopy_barcodeAnomalyMatchLevel) swift::Optional<MatchLevel>(barcodeAnomalyMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_barcodeAnomalyMatchLevel(consumedParamCopy_barcodeAnomalyMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_dataMatchMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_dataMatchMatchLevel = *(new(copyBuffer_consumedParamCopy_dataMatchMatchLevel) swift::Optional<MatchLevel>(dataMatchMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_dataMatchMatchLevel(consumedParamCopy_dataMatchMatchLevel);
  alignas(alignof(swift::Optional<ImageQualitySettings>)) char copyBuffer_consumedParamCopy_imageQualitySettings[sizeof(swift::Optional<ImageQualitySettings>)];
  auto &consumedParamCopy_imageQualitySettings = *(new(copyBuffer_consumedParamCopy_imageQualitySettings) swift::Optional<ImageQualitySettings>(imageQualitySettings));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageQualitySettings>> storageGuard_consumedParamCopy_imageQualitySettings(consumedParamCopy_imageQualitySettings);
  alignas(alignof(swift::Optional<BlinkIDVerifyProcessingUseCase>)) char copyBuffer_consumedParamCopy_useCase[sizeof(swift::Optional<BlinkIDVerifyProcessingUseCase>)];
  auto &consumedParamCopy_useCase = *(new(copyBuffer_consumedParamCopy_useCase) swift::Optional<BlinkIDVerifyProcessingUseCase>(useCase));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<BlinkIDVerifyProcessingUseCase>> storageGuard_consumedParamCopy_useCase(consumedParamCopy_useCase);
  return _impl::_impl_CaptureSessionSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify22CaptureSessionSettingsV13capturePolicy22treatExpirationAsFraud24screenAnalysisMatchLevel09photocopymnO0013visualAnomalynO0012photoForgerynO0022staticSecurityFeaturesnO007barcodernO004datannO0012imageQualityE07useCase19stepTimeoutDurationAcA0cG0O_SbAA0nO0OSgA6tA012ImageQualityE0VSgAA0aB17ProcessingUseCaseVSgSdtcfC(result, _impl::_impl_CapturePolicy::getOpaquePointer(consumedParamCopy_capturePolicy), treatExpirationAsFraud, swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_screenAnalysisMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_photocopyAnalysisMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_visualAnomalyMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_photoForgeryMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_staticSecurityFeaturesMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_barcodeAnomalyMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_dataMatchMatchLevel), swift::_impl::_impl_Optional<ImageQualitySettings>::getOpaquePointer(consumedParamCopy_imageQualitySettings), swift::_impl::_impl_Optional<BlinkIDVerifyProcessingUseCase>::getOpaquePointer(consumedParamCopy_useCase), stepTimeoutDuration);
  });
  }
  SWIFT_INLINE_THUNK CardOrientation CardOrientation::_impl_horizontal::operator()() const {
    auto result = CardOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15CardOrientationO10horizontalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CardOrientation::isHorizontal() const {
    return *this == CardOrientation::horizontal;
  }
  SWIFT_INLINE_THUNK CardOrientation CardOrientation::_impl_vertical::operator()() const {
    auto result = CardOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15CardOrientationO8verticalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CardOrientation::isVertical() const {
    return *this == CardOrientation::vertical;
  }
  SWIFT_INLINE_THUNK CardOrientation CardOrientation::_impl_notAvailable::operator()() const {
    auto result = CardOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15CardOrientationO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CardOrientation::isNotAvailable() const {
    return *this == CardOrientation::notAvailable;
  }
  SWIFT_INLINE_THUNK  bool CardOrientation::isUnknownDefault() const {
    return *this == CardOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<CardOrientation> CardOrientation::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<CardOrientation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify15CardOrientationO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int CardOrientation::getRawValue() const {
  return _impl::$s13BlinkIDVerify15CardOrientationO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CardRotation CardRotation::_impl_zero::operator()() const {
    auto result = CardRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12CardRotationO4zeroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CardRotation::isZero() const {
    return *this == CardRotation::zero;
  }
  SWIFT_INLINE_THUNK CardRotation CardRotation::_impl_clockwise90::operator()() const {
    auto result = CardRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12CardRotationO11clockwise90yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CardRotation::isClockwise90() const {
    return *this == CardRotation::clockwise90;
  }
  SWIFT_INLINE_THUNK CardRotation CardRotation::_impl_counterClockwise90::operator()() const {
    auto result = CardRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12CardRotationO18counterClockwise90yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CardRotation::isCounterClockwise90() const {
    return *this == CardRotation::counterClockwise90;
  }
  SWIFT_INLINE_THUNK CardRotation CardRotation::_impl_upsideDown::operator()() const {
    auto result = CardRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12CardRotationO10upsideDownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CardRotation::isUpsideDown() const {
    return *this == CardRotation::upsideDown;
  }
  SWIFT_INLINE_THUNK  bool CardRotation::isUnknownDefault() const {
    return *this == CardRotation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<CardRotation> CardRotation::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<CardRotation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12CardRotationO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int CardRotation::getRawValue() const {
  return _impl::$s13BlinkIDVerify12CardRotationO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CertaintyLevel CertaintyLevel::_impl_notPerformed::operator()() const {
    auto result = CertaintyLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14CertaintyLevelO12notPerformedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CertaintyLevel::isNotPerformed() const {
    return *this == CertaintyLevel::notPerformed;
  }
  SWIFT_INLINE_THUNK CertaintyLevel CertaintyLevel::_impl_high::operator()() const {
    auto result = CertaintyLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14CertaintyLevelO4highyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CertaintyLevel::isHigh() const {
    return *this == CertaintyLevel::high;
  }
  SWIFT_INLINE_THUNK CertaintyLevel CertaintyLevel::_impl_medium::operator()() const {
    auto result = CertaintyLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14CertaintyLevelO6mediumyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CertaintyLevel::isMedium() const {
    return *this == CertaintyLevel::medium;
  }
  SWIFT_INLINE_THUNK CertaintyLevel CertaintyLevel::_impl_low::operator()() const {
    auto result = CertaintyLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14CertaintyLevelO3lowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CertaintyLevel::isLow() const {
    return *this == CertaintyLevel::low;
  }
  SWIFT_INLINE_THUNK CertaintyLevel CertaintyLevel::_impl_unknown::operator()() const {
    auto result = CertaintyLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14CertaintyLevelO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CertaintyLevel::isUnknown() const {
    return *this == CertaintyLevel::unknown;
  }
  SWIFT_INLINE_THUNK  bool CertaintyLevel::isUnknownDefault() const {
    return *this == CertaintyLevel::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<CertaintyLevel> CertaintyLevel::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<CertaintyLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14CertaintyLevelO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CertaintyLevel::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify14CertaintyLevelO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String CheckArray::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10CheckArrayV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckResult CheckResult::_impl_notPerformed::operator()() const {
    auto result = CheckResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11CheckResultO12notPerformedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckResult::isNotPerformed() const {
    return *this == CheckResult::notPerformed;
  }
  SWIFT_INLINE_THUNK CheckResult CheckResult::_impl_pass::operator()() const {
    auto result = CheckResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11CheckResultO4passyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckResult::isPass() const {
    return *this == CheckResult::pass;
  }
  SWIFT_INLINE_THUNK CheckResult CheckResult::_impl_fail::operator()() const {
    auto result = CheckResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11CheckResultO4failyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckResult::isFail() const {
    return *this == CheckResult::fail;
  }
  SWIFT_INLINE_THUNK CheckResult CheckResult::_impl_unknown::operator()() const {
    auto result = CheckResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11CheckResultO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckResult::isUnknown() const {
    return *this == CheckResult::unknown;
  }
  SWIFT_INLINE_THUNK  bool CheckResult::isUnknownDefault() const {
    return *this == CheckResult::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> CheckResult::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11CheckResultO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CheckResult::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11CheckResultO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckType CheckType::_impl_check::operator()() const {
    auto result = CheckType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9CheckTypeO5checkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckType::isCheck() const {
    return *this == CheckType::check;
  }
  SWIFT_INLINE_THUNK CheckType CheckType::_impl_detailedCheck::operator()() const {
    auto result = CheckType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9CheckTypeO08detailedC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckType::isDetailedCheck() const {
    return *this == CheckType::detailedCheck;
  }
  SWIFT_INLINE_THUNK CheckType CheckType::_impl_fieldCheck::operator()() const {
    auto result = CheckType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9CheckTypeO05fieldC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckType::isFieldCheck() const {
    return *this == CheckType::fieldCheck;
  }
  SWIFT_INLINE_THUNK CheckType CheckType::_impl_tieredCheck::operator()() const {
    auto result = CheckType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9CheckTypeO06tieredC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckType::isTieredCheck() const {
    return *this == CheckType::tieredCheck;
  }
  SWIFT_INLINE_THUNK  bool CheckType::isUnknownDefault() const {
    return *this == CheckType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckType> CheckType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<CheckType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9CheckTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String CheckType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify9CheckTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckValue CheckValue::_impl_check::operator()(const VerifyCheck& val) const {
    auto result = CheckValue::_make();
    alignas(VerifyCheck) unsigned char buffer[sizeof(VerifyCheck)];
    auto *valCopy = new(buffer) VerifyCheck(val);
    swift::_impl::implClassFor<VerifyCheck>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<VerifyCheck>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10CheckValueO5checkyAcA06VerifyC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckValue::isCheck() const {
    return *this == CheckValue::check;
  }
  SWIFT_INLINE_THUNK VerifyCheck CheckValue::getCheck() const {
    if (!isCheck()) abort();
    alignas(CheckValue) unsigned char buffer[sizeof(CheckValue)];
    auto *thisCopy = new(buffer) CheckValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<VerifyCheck>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<VerifyCheck>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK CheckValue CheckValue::_impl_detailedCheck::operator()(const DetailedCheck& val) const {
    auto result = CheckValue::_make();
    alignas(DetailedCheck) unsigned char buffer[sizeof(DetailedCheck)];
    auto *valCopy = new(buffer) DetailedCheck(val);
    swift::_impl::implClassFor<DetailedCheck>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<DetailedCheck>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10CheckValueO08detailedC0yAcA08DetailedC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckValue::isDetailedCheck() const {
    return *this == CheckValue::detailedCheck;
  }
  SWIFT_INLINE_THUNK DetailedCheck CheckValue::getDetailedCheck() const {
    if (!isDetailedCheck()) abort();
    alignas(CheckValue) unsigned char buffer[sizeof(CheckValue)];
    auto *thisCopy = new(buffer) CheckValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<DetailedCheck>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<DetailedCheck>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK CheckValue CheckValue::_impl_fieldCheck::operator()(const FieldCheck& val) const {
    auto result = CheckValue::_make();
    alignas(FieldCheck) unsigned char buffer[sizeof(FieldCheck)];
    auto *valCopy = new(buffer) FieldCheck(val);
    swift::_impl::implClassFor<FieldCheck>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<FieldCheck>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10CheckValueO05fieldC0yAcA05FieldC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckValue::isFieldCheck() const {
    return *this == CheckValue::fieldCheck;
  }
  SWIFT_INLINE_THUNK FieldCheck CheckValue::getFieldCheck() const {
    if (!isFieldCheck()) abort();
    alignas(CheckValue) unsigned char buffer[sizeof(CheckValue)];
    auto *thisCopy = new(buffer) CheckValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<FieldCheck>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<FieldCheck>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK CheckValue CheckValue::_impl_tieredCheck::operator()(const TieredCheck& val) const {
    auto result = CheckValue::_make();
    alignas(TieredCheck) unsigned char buffer[sizeof(TieredCheck)];
    auto *valCopy = new(buffer) TieredCheck(val);
    swift::_impl::implClassFor<TieredCheck>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<TieredCheck>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10CheckValueO06tieredC0yAcA06TieredC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CheckValue::isTieredCheck() const {
    return *this == CheckValue::tieredCheck;
  }
  SWIFT_INLINE_THUNK TieredCheck CheckValue::getTieredCheck() const {
    if (!isTieredCheck()) abort();
    alignas(CheckValue) unsigned char buffer[sizeof(CheckValue)];
    auto *thisCopy = new(buffer) CheckValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<TieredCheck>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<TieredCheck>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool CheckValue::isUnknownDefault() const {
    return *this == CheckValue::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String CheckValue::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10CheckValueO11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Country ClassInfo::getCountry() const {
  return _impl::_impl_Country::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9ClassInfoV7countryAA7CountryOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Region ClassInfo::getRegion() const {
  return _impl::_impl_Region::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9ClassInfoV6regionAA6RegionOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentType ClassInfo::getType() const {
  return _impl::_impl_DocumentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9ClassInfoV4typeAA12DocumentTypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ClassInfo::getIsoAlpha3CountryCode() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify9ClassInfoV20isoAlpha3CountryCodeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ClassInfo::getIsoAlpha2CountryCode() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify9ClassInfoV20isoAlpha2CountryCodeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ClassInfo::getIsoNumericCountryCode() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify9ClassInfoV21isoNumericCountryCodeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ClassInfo::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify9ClassInfoV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Country Country::_impl_none::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNone() const {
    return *this == Country::none;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_albania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7albaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlbania() const {
    return *this == Country::albania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_algeria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7algeriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlgeria() const {
    return *this == Country::algeria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_argentina::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9argentinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isArgentina() const {
    return *this == Country::argentina;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_australia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9australiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAustralia() const {
    return *this == Country::australia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_austria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7austriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAustria() const {
    return *this == Country::austria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_azerbaijan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10azerbaijanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAzerbaijan() const {
    return *this == Country::azerbaijan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bahrain::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7bahrainyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBahrain() const {
    return *this == Country::bahrain;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bangladesh::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10bangladeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBangladesh() const {
    return *this == Country::bangladesh;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belgium::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7belgiumyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelgium() const {
    return *this == Country::belgium;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bosniaAndHerzegovina::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO20bosniaAndHerzegovinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBosniaAndHerzegovina() const {
    return *this == Country::bosniaAndHerzegovina;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_brunei::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6bruneiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBrunei() const {
    return *this == Country::brunei;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bulgaria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8bulgariayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBulgaria() const {
    return *this == Country::bulgaria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cambodia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8cambodiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCambodia() const {
    return *this == Country::cambodia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_canada::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6canadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCanada() const {
    return *this == Country::canada;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_chile::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5chileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChile() const {
    return *this == Country::chile;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_colombia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8colombiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isColombia() const {
    return *this == Country::colombia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_costaRica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9costaRicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCostaRica() const {
    return *this == Country::costaRica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_croatia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7croatiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCroatia() const {
    return *this == Country::croatia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cyprus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6cyprusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCyprus() const {
    return *this == Country::cyprus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_czechia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7czechiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCzechia() const {
    return *this == Country::czechia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_denmark::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7denmarkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDenmark() const {
    return *this == Country::denmark;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_dominicanRepublic::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO17dominicanRepublicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDominicanRepublic() const {
    return *this == Country::dominicanRepublic;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_egypt::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5egyptyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEgypt() const {
    return *this == Country::egypt;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_estonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7estoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEstonia() const {
    return *this == Country::estonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_finland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7finlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFinland() const {
    return *this == Country::finland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_france::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6franceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrance() const {
    return *this == Country::france;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_georgia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7georgiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGeorgia() const {
    return *this == Country::georgia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_germany::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7germanyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGermany() const {
    return *this == Country::germany;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ghana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5ghanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGhana() const {
    return *this == Country::ghana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_greece::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6greeceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGreece() const {
    return *this == Country::greece;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guatemala::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9guatemalayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuatemala() const {
    return *this == Country::guatemala;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_hongKong::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8hongKongyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHongKong() const {
    return *this == Country::hongKong;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_hungary::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7hungaryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHungary() const {
    return *this == Country::hungary;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_india::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5indiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIndia() const {
    return *this == Country::india;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_indonesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9indonesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIndonesia() const {
    return *this == Country::indonesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ireland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7irelandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIreland() const {
    return *this == Country::ireland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_israel::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6israelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIsrael() const {
    return *this == Country::israel;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_italy::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5italyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isItaly() const {
    return *this == Country::italy;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_jordan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6jordanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJordan() const {
    return *this == Country::jordan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kazakhstan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10kazakhstanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKazakhstan() const {
    return *this == Country::kazakhstan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kenya::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5kenyayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKenya() const {
    return *this == Country::kenya;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kosovo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6kosovoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKosovo() const {
    return *this == Country::kosovo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kuwait::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6kuwaityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKuwait() const {
    return *this == Country::kuwait;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_latvia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6latviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLatvia() const {
    return *this == Country::latvia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lithuania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9lithuaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLithuania() const {
    return *this == Country::lithuania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malaysia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8malaysiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalaysia() const {
    return *this == Country::malaysia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_maldives::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8maldivesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMaldives() const {
    return *this == Country::maldives;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malta::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5maltayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalta() const {
    return *this == Country::malta;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mauritius::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9mauritiusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMauritius() const {
    return *this == Country::mauritius;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mexico::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6mexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMexico() const {
    return *this == Country::mexico;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_morocco::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7moroccoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMorocco() const {
    return *this == Country::morocco;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_netherlands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11netherlandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNetherlands() const {
    return *this == Country::netherlands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_newZealand::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10newZealandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNewZealand() const {
    return *this == Country::newZealand;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nigeria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7nigeriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNigeria() const {
    return *this == Country::nigeria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_pakistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8pakistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPakistan() const {
    return *this == Country::pakistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_panama::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6panamayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPanama() const {
    return *this == Country::panama;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_paraguay::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8paraguayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isParaguay() const {
    return *this == Country::paraguay;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_philippines::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11philippinesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPhilippines() const {
    return *this == Country::philippines;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_poland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6polandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPoland() const {
    return *this == Country::poland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_portugal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8portugalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPortugal() const {
    return *this == Country::portugal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_puertoRico::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10puertoRicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPuertoRico() const {
    return *this == Country::puertoRico;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_qatar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5qataryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isQatar() const {
    return *this == Country::qatar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_romania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7romaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRomania() const {
    return *this == Country::romania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_russia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6russiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRussia() const {
    return *this == Country::russia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saudiArabia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11saudiArabiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaudiArabia() const {
    return *this == Country::saudiArabia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_serbia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6serbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSerbia() const {
    return *this == Country::serbia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_singapore::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9singaporeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSingapore() const {
    return *this == Country::singapore;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_slovakia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8slovakiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSlovakia() const {
    return *this == Country::slovakia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_slovenia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8sloveniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSlovenia() const {
    return *this == Country::slovenia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southAfrica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11southAfricayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthAfrica() const {
    return *this == Country::southAfrica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_spain::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5spainyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSpain() const {
    return *this == Country::spain;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sweden::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6swedenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSweden() const {
    return *this == Country::sweden;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_switzerland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11switzerlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSwitzerland() const {
    return *this == Country::switzerland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_taiwan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6taiwanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTaiwan() const {
    return *this == Country::taiwan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_thailand::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8thailandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isThailand() const {
    return *this == Country::thailand;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tunisia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7tunisiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTunisia() const {
    return *this == Country::tunisia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turkey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6turkeyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurkey() const {
    return *this == Country::turkey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uae::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO3uaeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUae() const {
    return *this == Country::uae;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uganda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6ugandayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUganda() const {
    return *this == Country::uganda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uk::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO2ukyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUk() const {
    return *this == Country::uk;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ukraine::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7ukraineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUkraine() const {
    return *this == Country::ukraine;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_usa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO3usayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUsa() const {
    return *this == Country::usa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vietnam::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7vietnamyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVietnam() const {
    return *this == Country::vietnam;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_brazil::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6brazilyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBrazil() const {
    return *this == Country::brazil;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_norway::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6norwayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorway() const {
    return *this == Country::norway;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_oman::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4omanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isOman() const {
    return *this == Country::oman;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ecuador::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7ecuadoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEcuador() const {
    return *this == Country::ecuador;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_elSalvador::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10elSalvadoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isElSalvador() const {
    return *this == Country::elSalvador;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sriLanka::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8sriLankayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSriLanka() const {
    return *this == Country::sriLanka;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_peru::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4peruyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPeru() const {
    return *this == Country::peru;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uruguay::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7uruguayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUruguay() const {
    return *this == Country::uruguay;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bahamas::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7bahamasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBahamas() const {
    return *this == Country::bahamas;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bermuda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7bermudayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBermuda() const {
    return *this == Country::bermuda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bolivia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7boliviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBolivia() const {
    return *this == Country::bolivia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_china::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5chinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChina() const {
    return *this == Country::china;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_europeanUnion::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO13europeanUnionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEuropeanUnion() const {
    return *this == Country::europeanUnion;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_haiti::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5haitiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHaiti() const {
    return *this == Country::haiti;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_honduras::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8hondurasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHonduras() const {
    return *this == Country::honduras;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iceland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7icelandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIceland() const {
    return *this == Country::iceland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_japan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5japanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJapan() const {
    return *this == Country::japan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_luxembourg::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10luxembourgyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLuxembourg() const {
    return *this == Country::luxembourg;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_montenegro::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10montenegroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMontenegro() const {
    return *this == Country::montenegro;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nicaragua::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9nicaraguayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNicaragua() const {
    return *this == Country::nicaragua;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southKorea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10southKoreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthKorea() const {
    return *this == Country::southKorea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_venezuela::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9venezuelayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVenezuela() const {
    return *this == Country::venezuela;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_afghanistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11afghanistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAfghanistan() const {
    return *this == Country::afghanistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_alandIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12alandIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlandIslands() const {
    return *this == Country::alandIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_americanSamoa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO13americanSamoayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAmericanSamoa() const {
    return *this == Country::americanSamoa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_andorra::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7andorrayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAndorra() const {
    return *this == Country::andorra;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_angola::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6angolayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAngola() const {
    return *this == Country::angola;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_anguilla::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8anguillayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAnguilla() const {
    return *this == Country::anguilla;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_antarctica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10antarcticayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAntarctica() const {
    return *this == Country::antarctica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_antiguaAndBarbuda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO17antiguaAndBarbudayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAntiguaAndBarbuda() const {
    return *this == Country::antiguaAndBarbuda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_armenia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7armeniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isArmenia() const {
    return *this == Country::armenia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_aruba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5arubayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAruba() const {
    return *this == Country::aruba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bailiwickOfGuernsey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO19bailiwickOfGuernseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBailiwickOfGuernsey() const {
    return *this == Country::bailiwickOfGuernsey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bailiwickOfJersey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO17bailiwickOfJerseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBailiwickOfJersey() const {
    return *this == Country::bailiwickOfJersey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_barbados::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8barbadosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBarbados() const {
    return *this == Country::barbados;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belarus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7belarusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelarus() const {
    return *this == Country::belarus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belize::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6belizeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelize() const {
    return *this == Country::belize;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_benin::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5beninyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBenin() const {
    return *this == Country::benin;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bhutan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6bhutanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBhutan() const {
    return *this == Country::bhutan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bonaireSaintEustatiusAndSaba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBonaireSaintEustatiusAndSaba() const {
    return *this == Country::bonaireSaintEustatiusAndSaba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_botswana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8botswanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBotswana() const {
    return *this == Country::botswana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bouvetIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12bouvetIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBouvetIsland() const {
    return *this == Country::bouvetIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_britishIndianOceanTerritory::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO27britishIndianOceanTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBritishIndianOceanTerritory() const {
    return *this == Country::britishIndianOceanTerritory;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_burkinaFaso::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11burkinaFasoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBurkinaFaso() const {
    return *this == Country::burkinaFaso;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_burundi::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7burundiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBurundi() const {
    return *this == Country::burundi;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cameroon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8cameroonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCameroon() const {
    return *this == Country::cameroon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_capeVerde::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9capeVerdeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCapeVerde() const {
    return *this == Country::capeVerde;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_caribbeanNetherlands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO20caribbeanNetherlandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCaribbeanNetherlands() const {
    return *this == Country::caribbeanNetherlands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_caymanIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO13caymanIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCaymanIslands() const {
    return *this == Country::caymanIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_centralAfricanRepublic::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO22centralAfricanRepublicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCentralAfricanRepublic() const {
    return *this == Country::centralAfricanRepublic;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_chad::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4chadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChad() const {
    return *this == Country::chad;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_christmasIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO15christmasIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChristmasIsland() const {
    return *this == Country::christmasIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cocosIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12cocosIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCocosIslands() const {
    return *this == Country::cocosIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_comoros::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7comorosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isComoros() const {
    return *this == Country::comoros;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_congo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5congoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCongo() const {
    return *this == Country::congo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cookIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11cookIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCookIslands() const {
    return *this == Country::cookIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cuba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4cubayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCuba() const {
    return *this == Country::cuba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_curacao::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7curacaoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCuracao() const {
    return *this == Country::curacao;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_democraticRepublicOfTheCongo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO28democraticRepublicOfTheCongoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDemocraticRepublicOfTheCongo() const {
    return *this == Country::democraticRepublicOfTheCongo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_djibouti::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8djiboutiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDjibouti() const {
    return *this == Country::djibouti;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_dominica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8dominicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDominica() const {
    return *this == Country::dominica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eastTimor::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9eastTimoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEastTimor() const {
    return *this == Country::eastTimor;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_equatorialGuinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO16equatorialGuineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEquatorialGuinea() const {
    return *this == Country::equatorialGuinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eritrea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7eritreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEritrea() const {
    return *this == Country::eritrea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ethiopia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8ethiopiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEthiopia() const {
    return *this == Country::ethiopia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_falklandIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO15falklandIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFalklandIslands() const {
    return *this == Country::falklandIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_faroeIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12faroeIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFaroeIslands() const {
    return *this == Country::faroeIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_federatedStatesOfMicronesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO27federatedStatesOfMicronesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFederatedStatesOfMicronesia() const {
    return *this == Country::federatedStatesOfMicronesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_fiji::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4fijiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFiji() const {
    return *this == Country::fiji;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchGuiana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12frenchGuianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchGuiana() const {
    return *this == Country::frenchGuiana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchPolynesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO15frenchPolynesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchPolynesia() const {
    return *this == Country::frenchPolynesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchSouthernTerritories::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO25frenchSouthernTerritoriesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchSouthernTerritories() const {
    return *this == Country::frenchSouthernTerritories;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gabon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5gabonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGabon() const {
    return *this == Country::gabon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gambia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6gambiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGambia() const {
    return *this == Country::gambia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gibraltar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9gibraltaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGibraltar() const {
    return *this == Country::gibraltar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_greenland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9greenlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGreenland() const {
    return *this == Country::greenland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_grenada::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7grenadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGrenada() const {
    return *this == Country::grenada;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guadeloupe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10guadeloupeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuadeloupe() const {
    return *this == Country::guadeloupe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guam::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4guamyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuam() const {
    return *this == Country::guam;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6guineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuinea() const {
    return *this == Country::guinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guineaBissau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12guineaBissauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuineaBissau() const {
    return *this == Country::guineaBissau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guyana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6guyanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuyana() const {
    return *this == Country::guyana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_heardIslandAndMcdonaldIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHeardIslandAndMcdonaldIslands() const {
    return *this == Country::heardIslandAndMcdonaldIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iran::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4iranyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIran() const {
    return *this == Country::iran;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iraq::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4iraqyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIraq() const {
    return *this == Country::iraq;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_isleOfMan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9isleOfManyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIsleOfMan() const {
    return *this == Country::isleOfMan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ivoryCoast::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10ivoryCoastyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIvoryCoast() const {
    return *this == Country::ivoryCoast;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_jamaica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7jamaicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJamaica() const {
    return *this == Country::jamaica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kiribati::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8kiribatiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKiribati() const {
    return *this == Country::kiribati;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kyrgyzstan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10kyrgyzstanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKyrgyzstan() const {
    return *this == Country::kyrgyzstan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_laos::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4laosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLaos() const {
    return *this == Country::laos;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lebanon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7lebanonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLebanon() const {
    return *this == Country::lebanon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lesotho::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7lesothoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLesotho() const {
    return *this == Country::lesotho;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_liberia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7liberiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLiberia() const {
    return *this == Country::liberia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_libya::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5libyayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLibya() const {
    return *this == Country::libya;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_liechtenstein::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO13liechtensteinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLiechtenstein() const {
    return *this == Country::liechtenstein;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_macau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5macauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMacau() const {
    return *this == Country::macau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_madagascar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10madagascaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMadagascar() const {
    return *this == Country::madagascar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malawi::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6malawiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalawi() const {
    return *this == Country::malawi;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mali::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4maliyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMali() const {
    return *this == Country::mali;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_marshallIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO15marshallIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMarshallIslands() const {
    return *this == Country::marshallIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_martinique::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10martiniqueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMartinique() const {
    return *this == Country::martinique;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mauritania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10mauritaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMauritania() const {
    return *this == Country::mauritania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mayotte::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7mayotteyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMayotte() const {
    return *this == Country::mayotte;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_moldova::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7moldovayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMoldova() const {
    return *this == Country::moldova;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_monaco::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6monacoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMonaco() const {
    return *this == Country::monaco;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mongolia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8mongoliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMongolia() const {
    return *this == Country::mongolia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_montserrat::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10montserratyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMontserrat() const {
    return *this == Country::montserrat;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mozambique::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10mozambiqueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMozambique() const {
    return *this == Country::mozambique;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_myanmar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7myanmaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMyanmar() const {
    return *this == Country::myanmar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_namibia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7namibiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNamibia() const {
    return *this == Country::namibia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nauru::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5nauruyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNauru() const {
    return *this == Country::nauru;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nepal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5nepalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNepal() const {
    return *this == Country::nepal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_newCaledonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12newCaledoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNewCaledonia() const {
    return *this == Country::newCaledonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_niger::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5nigeryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNiger() const {
    return *this == Country::niger;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_niue::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4niueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNiue() const {
    return *this == Country::niue;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_norfolkIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO13norfolkIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorfolkIsland() const {
    return *this == Country::norfolkIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northernCyprus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO14northernCyprusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthernCyprus() const {
    return *this == Country::northernCyprus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northernMarianaIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO22northernMarianaIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthernMarianaIslands() const {
    return *this == Country::northernMarianaIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northKorea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10northKoreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthKorea() const {
    return *this == Country::northKorea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northMacedonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO14northMacedoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthMacedonia() const {
    return *this == Country::northMacedonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_palau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5palauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPalau() const {
    return *this == Country::palau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_palestine::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9palestineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPalestine() const {
    return *this == Country::palestine;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_papuaNewGuinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO14papuaNewGuineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPapuaNewGuinea() const {
    return *this == Country::papuaNewGuinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_pitcairn::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8pitcairnyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPitcairn() const {
    return *this == Country::pitcairn;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_reunion::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7reunionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isReunion() const {
    return *this == Country::reunion;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_rwanda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6rwandayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRwanda() const {
    return *this == Country::rwanda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintBarthelemy::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO15saintBarthelemyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintBarthelemy() const {
    return *this == Country::saintBarthelemy;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintHelenaAscensionAndTristianDaCunha::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintHelenaAscensionAndTristianDaCunha() const {
    return *this == Country::saintHelenaAscensionAndTristianDaCunha;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintKittsAndNevis::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO18saintKittsAndNevisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintKittsAndNevis() const {
    return *this == Country::saintKittsAndNevis;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintLucia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10saintLuciayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintLucia() const {
    return *this == Country::saintLucia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintMartin::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11saintMartinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintMartin() const {
    return *this == Country::saintMartin;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintPierreAndMiquelon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO22saintPierreAndMiquelonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintPierreAndMiquelon() const {
    return *this == Country::saintPierreAndMiquelon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintVincentAndTheGrenadines::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO28saintVincentAndTheGrenadinesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintVincentAndTheGrenadines() const {
    return *this == Country::saintVincentAndTheGrenadines;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_samoa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5samoayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSamoa() const {
    return *this == Country::samoa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sanMarino::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO9sanMarinoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSanMarino() const {
    return *this == Country::sanMarino;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saoTomeAndPrincipe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO18saoTomeAndPrincipeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaoTomeAndPrincipe() const {
    return *this == Country::saoTomeAndPrincipe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_senegal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7senegalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSenegal() const {
    return *this == Country::senegal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_seychelles::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10seychellesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSeychelles() const {
    return *this == Country::seychelles;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sierraLeone::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11sierraLeoneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSierraLeone() const {
    return *this == Country::sierraLeone;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sintMaarten::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11sintMaartenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSintMaarten() const {
    return *this == Country::sintMaarten;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_solomonIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO14solomonIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSolomonIslands() const {
    return *this == Country::solomonIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_somalia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7somaliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSomalia() const {
    return *this == Country::somalia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southGeorgiaAndTheSouthSandwichIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthGeorgiaAndTheSouthSandwichIslands() const {
    return *this == Country::southGeorgiaAndTheSouthSandwichIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southSudan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10southSudanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthSudan() const {
    return *this == Country::southSudan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sudan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5sudanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSudan() const {
    return *this == Country::sudan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_suriname::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8surinameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSuriname() const {
    return *this == Country::suriname;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_svalbardAndJanMayen::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO19svalbardAndJanMayenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSvalbardAndJanMayen() const {
    return *this == Country::svalbardAndJanMayen;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eswatini::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8eswatiniyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEswatini() const {
    return *this == Country::eswatini;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_syria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5syriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSyria() const {
    return *this == Country::syria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tajikistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10tajikistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTajikistan() const {
    return *this == Country::tajikistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tanzania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8tanzaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTanzania() const {
    return *this == Country::tanzania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_togo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO4togoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTogo() const {
    return *this == Country::togo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tokelau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7tokelauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTokelau() const {
    return *this == Country::tokelau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tonga::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5tongayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTonga() const {
    return *this == Country::tonga;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_trinidadAndTobago::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO17trinidadAndTobagoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTrinidadAndTobago() const {
    return *this == Country::trinidadAndTobago;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turkmenistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO12turkmenistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurkmenistan() const {
    return *this == Country::turkmenistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turksAndCaicosIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO21turksAndCaicosIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurksAndCaicosIslands() const {
    return *this == Country::turksAndCaicosIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tuvalu::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6tuvaluyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTuvalu() const {
    return *this == Country::tuvalu;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_unitedStatesMinorOutlyingIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUnitedStatesMinorOutlyingIslands() const {
    return *this == Country::unitedStatesMinorOutlyingIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uzbekistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10uzbekistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUzbekistan() const {
    return *this == Country::uzbekistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vanuatu::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO7vanuatuyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVanuatu() const {
    return *this == Country::vanuatu;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vaticanCity::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO11vaticanCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVaticanCity() const {
    return *this == Country::vaticanCity;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_virginIslandsBritish::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO20virginIslandsBritishyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVirginIslandsBritish() const {
    return *this == Country::virginIslandsBritish;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_virginIslandsUs::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO15virginIslandsUsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVirginIslandsUs() const {
    return *this == Country::virginIslandsUs;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_wallisAndFutuna::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO15wallisAndFutunayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isWallisAndFutuna() const {
    return *this == Country::wallisAndFutuna;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_westernSahara::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO13westernSaharayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isWesternSahara() const {
    return *this == Country::westernSahara;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_yemen::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO5yemenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isYemen() const {
    return *this == Country::yemen;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_yugoslavia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO10yugoslaviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isYugoslavia() const {
    return *this == Country::yugoslavia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_zambia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO6zambiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isZambia() const {
    return *this == Country::zambia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_zimbabwe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO8zimbabweyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isZimbabwe() const {
    return *this == Country::zimbabwe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_schengen_area::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify7CountryO13schengen_areayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSchengen_area() const {
    return *this == Country::schengen_area;
  }
  SWIFT_INLINE_THUNK  bool Country::isUnknownDefault() const {
    return *this == Country::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<Country> Country::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<Country>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify7CountryO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String Country::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify7CountryO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> DataCheck::getOverall() const {
  return swift::_impl::_impl_Optional<DetailedCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV7overallAA08DetailedD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchCheck> DataCheck::getMatchCheck() const {
  return swift::_impl::_impl_Optional<MatchCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV05matchD0AA05MatchD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<LogicCheck> DataCheck::getLogicCheck() const {
  return swift::_impl::_impl_Optional<LogicCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV05logicD0AA05LogicD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FormatCheck> DataCheck::getFormatCheck() const {
  return swift::_impl::_impl_Optional<FormatCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV06formatD0AA06FormatD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<BarcodeAnomalyCheck> DataCheck::getBarcodeAnomalyCheck() const {
  return swift::_impl::_impl_Optional<BarcodeAnomalyCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV014barcodeAnomalyD0AA07BarcodefD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<MrzCheck> DataCheck::getMrzCheck() const {
  return swift::_impl::_impl_Optional<MrzCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV03mrzD0AA03MrzD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<SuspiciousDataCheck> DataCheck::getSuspiciousDataCheck() const {
  return swift::_impl::_impl_Optional<SuspiciousDataCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV010suspiciouscD0AA010SuspiciouscD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DataCheck::getDataIntegrityCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9DataCheckV013dataIntegrityD0AA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String DataCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify9DataCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DateLogicCheck::getOverall() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14DateLogicCheckV7overallAA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DateLogicCheck::getDateOfBirthBeforeDateOfIssueCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14DateLogicCheckV017dateOfBirthBeforecg5IssueE0AA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DateLogicCheck::getDateOfBirthBeforeDateOfExpiryCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14DateLogicCheckV017dateOfBirthBeforecg6ExpiryE0AA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DateLogicCheck::getDateOfIssueBeforeDateOfExpiryCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14DateLogicCheckV017dateOfIssueBeforecg6ExpiryE0AA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DateLogicCheck::getDateOfBirthInPastCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14DateLogicCheckV017dateOfBirthInPastE0AA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DateLogicCheck::getDateOfIssueInPastCheck() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14DateLogicCheckV017dateOfIssueInPastE0AA0E6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String DateLogicCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify14DateLogicCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int DateResult::getDay() const {
  return _impl::$s13BlinkIDVerify10DateResultV3daySivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DateResult::getMonth() const {
  return _impl::$s13BlinkIDVerify10DateResultV5monthSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DateResult::getYear() const {
  return _impl::$s13BlinkIDVerify10DateResultV4yearSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ResultType DateResult::getType() const {
  return _impl::_impl_ResultType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10DateResultV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DateResult::getField() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify10DateResultV5fieldSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> DateResult::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10DateResultV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> DateResult::getResults() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10DateResultV7resultsAA0D5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DateResult::getOriginalResult() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify10DateResultV08originalD0SSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool DateResult::getSuccessfullyParsed() const {
  return _impl::$s13BlinkIDVerify10DateResultV18successfullyParsedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool DateResult::getFilledByDomainKnowledge() const {
  return _impl::$s13BlinkIDVerify10DateResultV23filledByDomainKnowledgeSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DateResult::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10DateResultV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int DateResultSimple::getDay() const {
  return _impl::$s13BlinkIDVerify16DateResultSimpleV3daySivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DateResultSimple::getMonth() const {
  return _impl::$s13BlinkIDVerify16DateResultSimpleV5monthSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DateResultSimple::getYear() const {
  return _impl::$s13BlinkIDVerify16DateResultSimpleV4yearSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DateResultSimple::getOriginalString() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify16DateResultSimpleV14originalStringSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool DateResultSimple::getSuccessfullyParsed() const {
  return _impl::$s13BlinkIDVerify16DateResultSimpleV18successfullyParsedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool DateResultSimple::getFilledByDomainKnowledge() const {
  return _impl::$s13BlinkIDVerify16DateResultSimpleV23filledByDomainKnowledgeSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DetailDictionary::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify16DetailDictionaryV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckType DetailedCheck::getType() const {
  return _impl::_impl_CheckType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13DetailedCheckV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DetailedCheck::getName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13DetailedCheckV4nameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> DetailedCheck::getResult() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13DetailedCheckV6resultAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> DetailedCheck::getPerformedChecks() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13BlinkIDVerify13DetailedCheckV15performedChecksSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> DetailedCheck::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13DetailedCheckV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> DetailedCheck::getChecks() const {
  return swift::_impl::_impl_Optional<CheckArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13DetailedCheckV6checksAA0D5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DetailedCheck::getRecommendedOutcome() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13DetailedCheckV18recommendedOutcomeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CertaintyLevel DetailedCheck::getCertaintyLevel() const {
  return _impl::_impl_CertaintyLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13DetailedCheckV14certaintyLevelAA09CertaintyF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String DetailedCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13DetailedCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int DetailedDateResult::getDay() const {
  return _impl::$s13BlinkIDVerify18DetailedDateResultV3daySivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DetailedDateResult::getMonth() const {
  return _impl::$s13BlinkIDVerify18DetailedDateResultV5monthSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DetailedDateResult::getYear() const {
  return _impl::$s13BlinkIDVerify18DetailedDateResultV4yearSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ResultType DetailedDateResult::getType() const {
  return _impl::_impl_ResultType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify18DetailedDateResultV4typeAA0E4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DetailedDateResult::getField() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify18DetailedDateResultV5fieldSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> DetailedDateResult::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify18DetailedDateResultV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> DetailedDateResult::getResults() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify18DetailedDateResultV7resultsAA0E5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DetailedStringResult>> DetailedDateResult::getOriginalResult() const {
  return swift::_impl::_impl_Optional<swift::Array<DetailedStringResult>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify18DetailedDateResultV08originalE0SayAA0c6StringE0VGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool DetailedDateResult::getSuccessfullyParsed() const {
  return _impl::$s13BlinkIDVerify18DetailedDateResultV18successfullyParsedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool DetailedDateResult::getFilledByDomainKnowledge() const {
  return _impl::$s13BlinkIDVerify18DetailedDateResultV23filledByDomainKnowledgeSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String DetailedDateResult::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify18DetailedDateResultV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ResultType DetailedStringResult::getType() const {
  return _impl::_impl_ResultType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20DetailedStringResultV4typeAA0E4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DetailedStringResult::getField() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify20DetailedStringResultV5fieldSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> DetailedStringResult::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20DetailedStringResultV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> DetailedStringResult::getResults() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20DetailedStringResultV7resultsAA0E5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> DetailedStringResult::getValue() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify20DetailedStringResultV5valueSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<LocationInfo> DetailedStringResult::getLocation() const {
  return swift::_impl::_impl_Optional<LocationInfo>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20DetailedStringResultV8locationAA12LocationInfoVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Side DetailedStringResult::getSide() const {
  return _impl::_impl_Side::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20DetailedStringResultV4sideAA4SideOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK VerifyScript DetailedStringResult::getScript() const {
  return _impl::_impl_VerifyScript::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20DetailedStringResultV6scriptAA12VerifyScriptOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String DetailedStringResult::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify20DetailedStringResultV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_failed::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO6failedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isFailed() const {
    return *this == DetectionStatus::failed;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_success::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isSuccess() const {
    return *this == DetectionStatus::success;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraTooFar::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO12cameraTooFaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraTooFar() const {
    return *this == DetectionStatus::cameraTooFar;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraTooClose::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO14cameraTooCloseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraTooClose() const {
    return *this == DetectionStatus::cameraTooClose;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraAngleTooSteep::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO19cameraAngleTooSteepyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraAngleTooSteep() const {
    return *this == DetectionStatus::cameraAngleTooSteep;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_documentTooCloseToCameraEdge::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isDocumentTooCloseToCameraEdge() const {
    return *this == DetectionStatus::documentTooCloseToCameraEdge;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_documentPartiallyVisible::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO24documentPartiallyVisibleyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isDocumentPartiallyVisible() const {
    return *this == DetectionStatus::documentPartiallyVisible;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_fallbackSuccess::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15DetectionStatusO15fallbackSuccessyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isFallbackSuccess() const {
    return *this == DetectionStatus::fallbackSuccess;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isUnknownDefault() const {
    return *this == DetectionStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DetectionStatus> DetectionStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<DetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify15DetectionStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DetectionStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify15DetectionStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<float> Dimensions::getWidth() const {
  return swift::_impl::_impl_Optional<float>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify10DimensionsV5widthSfSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<float> Dimensions::getHeight() const {
  return swift::_impl::_impl_Optional<float>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify10DimensionsV6heightSfSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String Dimensions::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10DimensionsV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_notAvailable::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify24DocumentImageColorStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isNotAvailable() const {
    return *this == DocumentImageColorStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_blackAndWhite::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isBlackAndWhite() const {
    return *this == DocumentImageColorStatus::blackAndWhite;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_color::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify24DocumentImageColorStatusO5coloryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isColor() const {
    return *this == DocumentImageColorStatus::color;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isUnknownDefault() const {
    return *this == DocumentImageColorStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> DocumentImageColorStatus::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<DocumentImageColorStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify24DocumentImageColorStatusO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int DocumentImageColorStatus::getRawValue() const {
  return _impl::$s13BlinkIDVerify24DocumentImageColorStatusO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus DocumentLocalizationStatus::_impl_success::operator()() const {
    auto result = DocumentLocalizationStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentLocalizationStatusO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentLocalizationStatus::isSuccess() const {
    return *this == DocumentLocalizationStatus::success;
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus DocumentLocalizationStatus::_impl_canceled::operator()() const {
    auto result = DocumentLocalizationStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentLocalizationStatusO8canceledyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentLocalizationStatus::isCanceled() const {
    return *this == DocumentLocalizationStatus::canceled;
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus DocumentLocalizationStatus::_impl_detectionFailed::operator()() const {
    auto result = DocumentLocalizationStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentLocalizationStatusO15detectionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentLocalizationStatus::isDetectionFailed() const {
    return *this == DocumentLocalizationStatus::detectionFailed;
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus DocumentLocalizationStatus::_impl_dewarpFailed::operator()() const {
    auto result = DocumentLocalizationStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentLocalizationStatusO12dewarpFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentLocalizationStatus::isDewarpFailed() const {
    return *this == DocumentLocalizationStatus::dewarpFailed;
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus DocumentLocalizationStatus::_impl_blurredFrameSkipped::operator()() const {
    auto result = DocumentLocalizationStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentLocalizationStatusO19blurredFrameSkippedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentLocalizationStatus::isBlurredFrameSkipped() const {
    return *this == DocumentLocalizationStatus::blurredFrameSkipped;
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus DocumentLocalizationStatus::_impl_frameWithGlareSkipped::operator()() const {
    auto result = DocumentLocalizationStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentLocalizationStatusO21frameWithGlareSkippedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentLocalizationStatus::isFrameWithGlareSkipped() const {
    return *this == DocumentLocalizationStatus::frameWithGlareSkipped;
  }
  SWIFT_INLINE_THUNK  bool DocumentLocalizationStatus::isUnknownDefault() const {
    return *this == DocumentLocalizationStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DocumentLocalizationStatus::getHashValue() const {
  return _impl::$s13BlinkIDVerify26DocumentLocalizationStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK Quadrilateral DocumentLocation::getLocation() const {
  return _impl::_impl_Quadrilateral::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify16DocumentLocationV8locationAA13QuadrilateralVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CardOrientation DocumentLocation::getOrientation() const {
  return _impl::_impl_CardOrientation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify16DocumentLocationV11orientationAA15CardOrientationOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_none::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNone() const {
    return *this == DocumentType::none;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO10consularIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularId() const {
    return *this == DocumentType::consularId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_dl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO2dlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDl() const {
    return *this == DocumentType::dl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_dlPublicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO20dlPublicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDlPublicServicesCard() const {
    return *this == DocumentType::dlPublicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_employmentPass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO14employmentPassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isEmploymentPass() const {
    return *this == DocumentType::employmentPass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_finCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO7finCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isFinCard() const {
    return *this == DocumentType::finCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_id::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO2idyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isId() const {
    return *this == DocumentType::id;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_multipurposeId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO14multipurposeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMultipurposeId() const {
    return *this == DocumentType::multipurposeId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKad::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO5myKadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKad() const {
    return *this == DocumentType::myKad;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKid::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO5myKidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKid() const {
    return *this == DocumentType::myKid;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myPR::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO4myPRyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyPR() const {
    return *this == DocumentType::myPR;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myTentera::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO9myTenterayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyTentera() const {
    return *this == DocumentType::myTentera;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_panCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO7panCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPanCard() const {
    return *this == DocumentType::panCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_professionalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO14professionalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProfessionalId() const {
    return *this == DocumentType::professionalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_publicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO18publicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPublicServicesCard() const {
    return *this == DocumentType::publicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_residencePermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO15residencePermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isResidencePermit() const {
    return *this == DocumentType::residencePermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_residentId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO10residentIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isResidentId() const {
    return *this == DocumentType::residentId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_temporaryResidencePermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO24temporaryResidencePermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTemporaryResidencePermit() const {
    return *this == DocumentType::temporaryResidencePermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_voterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO7voterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVoterId() const {
    return *this == DocumentType::voterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_workPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO10workPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isWorkPermit() const {
    return *this == DocumentType::workPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_iKad::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO4iKadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isIKad() const {
    return *this == DocumentType::iKad;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_militaryId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO10militaryIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMilitaryId() const {
    return *this == DocumentType::militaryId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKas::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO5myKasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKas() const {
    return *this == DocumentType::myKas;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_socialSecurityCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO18socialSecurityCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSocialSecurityCard() const {
    return *this == DocumentType::socialSecurityCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_healthInsuranceCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO19healthInsuranceCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isHealthInsuranceCard() const {
    return *this == DocumentType::healthInsuranceCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_passport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO8passportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPassport() const {
    return *this == DocumentType::passport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_sPass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO5sPassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSPass() const {
    return *this == DocumentType::sPass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_addressCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO11addressCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAddressCard() const {
    return *this == DocumentType::addressCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_alienId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO7alienIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAlienId() const {
    return *this == DocumentType::alienId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_alienPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO13alienPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAlienPassport() const {
    return *this == DocumentType::alienPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_greenCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO9greenCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isGreenCard() const {
    return *this == DocumentType::greenCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO8minorsIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsId() const {
    return *this == DocumentType::minorsId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_postalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO8postalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPostalId() const {
    return *this == DocumentType::postalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_professionalDl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO14professionalDlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProfessionalDl() const {
    return *this == DocumentType::professionalDl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_taxId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO5taxIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTaxId() const {
    return *this == DocumentType::taxId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_weaponPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO12weaponPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isWeaponPermit() const {
    return *this == DocumentType::weaponPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_visa::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO4visayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVisa() const {
    return *this == DocumentType::visa;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_borderCrossingCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO18borderCrossingCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isBorderCrossingCard() const {
    return *this == DocumentType::borderCrossingCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_driverCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO10driverCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDriverCard() const {
    return *this == DocumentType::driverCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_globalEntryCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO15globalEntryCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isGlobalEntryCard() const {
    return *this == DocumentType::globalEntryCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_mypolis::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO7mypolisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMypolis() const {
    return *this == DocumentType::mypolis;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nexusCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO9nexusCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNexusCard() const {
    return *this == DocumentType::nexusCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_passportCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO12passportCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPassportCard() const {
    return *this == DocumentType::passportCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_proofOfAgeCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO14proofOfAgeCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProofOfAgeCard() const {
    return *this == DocumentType::proofOfAgeCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_refugeeId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO9refugeeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRefugeeId() const {
    return *this == DocumentType::refugeeId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_tribalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO8tribalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTribalId() const {
    return *this == DocumentType::tribalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_veteranId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO9veteranIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVeteranId() const {
    return *this == DocumentType::veteranId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_citizenshipCertificate::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO22citizenshipCertificateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isCitizenshipCertificate() const {
    return *this == DocumentType::citizenshipCertificate;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myNumberCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO12myNumberCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyNumberCard() const {
    return *this == DocumentType::myNumberCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO16consularPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularPassport() const {
    return *this == DocumentType::consularPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO14minorsPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsPassport() const {
    return *this == DocumentType::minorsPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsPublicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO24minorsPublicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsPublicServicesCard() const {
    return *this == DocumentType::minorsPublicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_drivingPrivilegeCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO20drivingPrivilegeCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDrivingPrivilegeCard() const {
    return *this == DocumentType::drivingPrivilegeCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_asylumRequest::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO13asylumRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAsylumRequest() const {
    return *this == DocumentType::asylumRequest;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_driverQualificationCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO23driverQualificationCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDriverQualificationCard() const {
    return *this == DocumentType::driverQualificationCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_provisionalDl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO13provisionalDlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProvisionalDl() const {
    return *this == DocumentType::provisionalDl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_refugeePassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO15refugeePassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRefugeePassport() const {
    return *this == DocumentType::refugeePassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_specialId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO9specialIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSpecialId() const {
    return *this == DocumentType::specialId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_uniformedServicesId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO19uniformedServicesIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isUniformedServicesId() const {
    return *this == DocumentType::uniformedServicesId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_immigrantVisa::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO13immigrantVisayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isImmigrantVisa() const {
    return *this == DocumentType::immigrantVisa;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularVoterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO15consularVoterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularVoterId() const {
    return *this == DocumentType::consularVoterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_twicCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO8twicCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTwicCard() const {
    return *this == DocumentType::twicCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_exitEntryPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO15exitEntryPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isExitEntryPermit() const {
    return *this == DocumentType::exitEntryPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_mainlandTravelPermitTaiwan::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMainlandTravelPermitTaiwan() const {
    return *this == DocumentType::mainlandTravelPermitTaiwan;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nbiClearance::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO12nbiClearanceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNbiClearance() const {
    return *this == DocumentType::nbiClearance;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_proofOfRegistration::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO19proofOfRegistrationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProofOfRegistration() const {
    return *this == DocumentType::proofOfRegistration;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_temporaryProtectionPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12DocumentTypeO25temporaryProtectionPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTemporaryProtectionPermit() const {
    return *this == DocumentType::temporaryProtectionPermit;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isUnknownDefault() const {
    return *this == DocumentType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentType> DocumentType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<DocumentType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12DocumentTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DocumentType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify12DocumentTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy DocumentVerificationPolicy::_impl_permissive::operator()() const {
    auto result = DocumentVerificationPolicy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentVerificationPolicyO10permissiveyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentVerificationPolicy::isPermissive() const {
    return *this == DocumentVerificationPolicy::permissive;
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy DocumentVerificationPolicy::_impl_standard::operator()() const {
    auto result = DocumentVerificationPolicy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentVerificationPolicyO8standardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentVerificationPolicy::isStandard() const {
    return *this == DocumentVerificationPolicy::standard;
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy DocumentVerificationPolicy::_impl_strict::operator()() const {
    auto result = DocumentVerificationPolicy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentVerificationPolicyO6strictyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentVerificationPolicy::isStrict() const {
    return *this == DocumentVerificationPolicy::strict;
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy DocumentVerificationPolicy::_impl_veryStrict::operator()() const {
    auto result = DocumentVerificationPolicy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentVerificationPolicyO10veryStrictyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentVerificationPolicy::isVeryStrict() const {
    return *this == DocumentVerificationPolicy::veryStrict;
  }
  SWIFT_INLINE_THUNK DocumentVerificationPolicy DocumentVerificationPolicy::_impl_unknown::operator()() const {
    auto result = DocumentVerificationPolicy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26DocumentVerificationPolicyO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentVerificationPolicy::isUnknown() const {
    return *this == DocumentVerificationPolicy::unknown;
  }
  SWIFT_INLINE_THUNK  bool DocumentVerificationPolicy::isUnknownDefault() const {
    return *this == DocumentVerificationPolicy::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String DocumentVerificationPolicy::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String DocumentVerificationPolicy::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentVerificationPolicy> DocumentVerificationPolicy::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<DocumentVerificationPolicy>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DocumentVerificationPolicy::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify26DocumentVerificationPolicyO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ImageOrientation EncodedImage::getOrientation() const {
  return _impl::_impl_ImageOrientation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12EncodedImageV11orientationAA0D11OrientationOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable EncodedImage::getUiImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s13BlinkIDVerify12EncodedImageV02uiD0So7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ProcessingStatus Extraction::getProcessingStatus() const {
  return _impl::_impl_ProcessingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV16processingStatusAA010ProcessingE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ResultState Extraction::getRecognitionStatus() const {
  return _impl::_impl_ResultState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV17recognitionStatusAA11ResultStateOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> Extraction::getOverall() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV7overallAA11ResultArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<VizResult> Extraction::getViz() const {
  return swift::_impl::_impl_Optional<VizResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV3vizAA9VizResultVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> Extraction::getMrz() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV3mrzAA11ResultArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> Extraction::getBarcode() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV7barcodeAA11ResultArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ClassInfo> Extraction::getClassInfo() const {
  return swift::_impl::_impl_Optional<ClassInfo>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV9classInfoAA05ClassE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AdditionalProcessingInfo> Extraction::getAdditionalInfo() const {
  return swift::_impl::_impl_Optional<AdditionalProcessingInfo>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ExtractionV14additionalInfoAA020AdditionalProcessingE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String Extraction::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10ExtractionV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckType FieldCheck::getType() const {
  return _impl::_impl_CheckType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10FieldCheckV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> FieldCheck::getName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify10FieldCheckV4nameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> FieldCheck::getResult() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10FieldCheckV6resultAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> FieldCheck::getPerformedChecks() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13BlinkIDVerify10FieldCheckV15performedChecksSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> FieldCheck::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10FieldCheckV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> FieldCheck::getChecks() const {
  return swift::_impl::_impl_Optional<CheckArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10FieldCheckV6checksAA0D5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK FieldType FieldCheck::getField() const {
  return _impl::_impl_FieldType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10FieldCheckV5fieldAA0C4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String FieldCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10FieldCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalAddressInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO28additionalAddressInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalAddressInformation() const {
    return *this == FieldType::additionalAddressInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalNameInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO25additionalNameInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalNameInformation() const {
    return *this == FieldType::additionalNameInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalOptionalAddressInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalOptionalAddressInformation() const {
    return *this == FieldType::additionalOptionalAddressInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalPersonalIdNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO26additionalPersonalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalPersonalIdNumber() const {
    return *this == FieldType::additionalPersonalIdNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_address::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO7addressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAddress() const {
    return *this == FieldType::address;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_classEffectiveDate::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO18classEffectiveDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isClassEffectiveDate() const {
    return *this == FieldType::classEffectiveDate;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_classExpiryDate::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO15classExpiryDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isClassExpiryDate() const {
    return *this == FieldType::classExpiryDate;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_conditions::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO10conditionsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isConditions() const {
    return *this == FieldType::conditions;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO11dateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfBirth() const {
    return *this == FieldType::dateOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfExpiry::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO12dateOfExpiryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfExpiry() const {
    return *this == FieldType::dateOfExpiry;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfIssue::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO11dateOfIssueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfIssue() const {
    return *this == FieldType::dateOfIssue;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentAdditionalNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO24documentAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentAdditionalNumber() const {
    return *this == FieldType::documentAdditionalNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentOptionalAdditionalNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentOptionalAdditionalNumber() const {
    return *this == FieldType::documentOptionalAdditionalNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO14documentNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentNumber() const {
    return *this == FieldType::documentNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_employer::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO8employeryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEmployer() const {
    return *this == FieldType::employer;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_endorsements::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO12endorsementsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEndorsements() const {
    return *this == FieldType::endorsements;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_fathersName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO11fathersNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFathersName() const {
    return *this == FieldType::fathersName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_firstName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO9firstNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFirstName() const {
    return *this == FieldType::firstName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_fullName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO8fullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFullName() const {
    return *this == FieldType::fullName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_issuingAuthority::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO16issuingAuthorityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isIssuingAuthority() const {
    return *this == FieldType::issuingAuthority;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_lastName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO8lastNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLastName() const {
    return *this == FieldType::lastName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_licenceType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO07licenceD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLicenceType() const {
    return *this == FieldType::licenceType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_localizedName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO13localizedNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLocalizedName() const {
    return *this == FieldType::localizedName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_maritalStatus::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO13maritalStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMaritalStatus() const {
    return *this == FieldType::maritalStatus;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_mothersName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO11mothersNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMothersName() const {
    return *this == FieldType::mothersName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_mrz::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO3mrzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMrz() const {
    return *this == FieldType::mrz;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_nationality::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO11nationalityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isNationality() const {
    return *this == FieldType::nationality;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_personalIdNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO16personalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isPersonalIdNumber() const {
    return *this == FieldType::personalIdNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_placeOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO12placeOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isPlaceOfBirth() const {
    return *this == FieldType::placeOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_profession::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO10professionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isProfession() const {
    return *this == FieldType::profession;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_race::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO4raceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRace() const {
    return *this == FieldType::race;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_religion::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO8religionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isReligion() const {
    return *this == FieldType::religion;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_residentialStatus::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO17residentialStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isResidentialStatus() const {
    return *this == FieldType::residentialStatus;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_restrictions::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO12restrictionsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRestrictions() const {
    return *this == FieldType::restrictions;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_sex::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO3sexyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSex() const {
    return *this == FieldType::sex;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_vehicleClass::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO12vehicleClassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVehicleClass() const {
    return *this == FieldType::vehicleClass;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_bloodType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO05bloodD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isBloodType() const {
    return *this == FieldType::bloodType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_sponsor::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO7sponsoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSponsor() const {
    return *this == FieldType::sponsor;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_visaType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO04visaD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVisaType() const {
    return *this == FieldType::visaType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_numberOfEntries::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO15numberOfEntriesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isNumberOfEntries() const {
    return *this == FieldType::numberOfEntries;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_durationOfStay::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO14durationOfStayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDurationOfStay() const {
    return *this == FieldType::durationOfStay;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_unknown::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify9FieldTypeO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isUnknown() const {
    return *this == FieldType::unknown;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isUnknownDefault() const {
    return *this == FieldType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldType> FieldType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9FieldTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String FieldType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify9FieldTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> FormatCheck::getOverall() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV7overallAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getDateOfBirthCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV011dateOfBirthD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getDateOfExpiryCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV012dateOfExpiryD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getDateOfIssueCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV011dateOfIssueD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getDocumentNumberCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV014documentNumberD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getDocumentAdditionalNumberCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV024documentAdditionalNumberD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getDocumentOptionalAdditionalNumberCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV032documentOptionalAdditionalNumberD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getPersonalIdNumberCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV016personalIdNumberD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getAdditionalPersonalIdNumberCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV026additionalPersonalIdNumberD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getGenderCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV06genderD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getNationalityCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV011nationalityD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getIssuingAuthorityCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV016issuingAuthorityD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getMaritalStatusCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV013maritalStatusD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getReligionCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV08religionD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getClassEffectiveDateCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV018classEffectiveDateD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> FormatCheck::getClassExpiryDateCheck() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11FormatCheckV015classExpiryDateD0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String FormatCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11FormatCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK BlinkIDVerifyProcessingStatus FrameAnalysisResult::getVerificationProcessingStatus() const {
  return _impl::_impl_BlinkIDVerifyProcessingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19FrameAnalysisResultV28verificationProcessingStatusAA0abgH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ProcessingStatus FrameAnalysisResult::getProcessingStatus() const {
  return _impl::_impl_ProcessingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19FrameAnalysisResultV16processingStatusAA010ProcessingG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentLocation> FrameAnalysisResult::getDocumentLocation() const {
  return swift::_impl::_impl_Optional<DocumentLocation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19FrameAnalysisResultV16documentLocationAA08DocumentG0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentLocalizationStatus FrameAnalysisResult::getDocumentLocalizationStatus() const {
  return _impl::_impl_DocumentLocalizationStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19FrameAnalysisResultV26documentLocalizationStatusAA08DocumentgH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK bool FrameAnalysisResult::getBlurDetected() const {
  return _impl::$s13BlinkIDVerify19FrameAnalysisResultV12blurDetectedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool FrameAnalysisResult::getGlareDetected() const {
  return _impl::$s13BlinkIDVerify19FrameAnalysisResultV13glareDetectedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool FrameAnalysisResult::getOcclusionDetected() const {
  return _impl::$s13BlinkIDVerify19FrameAnalysisResultV17occlusionDetectedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool FrameAnalysisResult::getTiltDetected() const {
  return _impl::$s13BlinkIDVerify19FrameAnalysisResultV12tiltDetectedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus FrameAnalysisResult::getMoire() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19FrameAnalysisResultV5moireAA05ImageD15DetectionStatusOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus FrameAnalysisResult::getMonochrome() const {
  return _impl::_impl_DocumentImageColorStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19FrameAnalysisResultV10monochromeAA24DocumentImageColorStatusOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DetectionStatus FrameAnalysisResult::getDetectionStatus() const {
  return _impl::_impl_DetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19FrameAnalysisResultV15detectionStatusAA09DetectionG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK bool FrameAnalysisResult::hasBarcodeReadingIssue() const {
  return _impl::$s13BlinkIDVerify19FrameAnalysisResultV22hasBarcodeReadingIssueSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_notAvailable::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isNotAvailable() const {
    return *this == ImageAnalysisDetectionStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_notDetected::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isNotDetected() const {
    return *this == ImageAnalysisDetectionStatus::notDetected;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_detected::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO8detectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isDetected() const {
    return *this == ImageAnalysisDetectionStatus::detected;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isUnknownDefault() const {
    return *this == ImageAnalysisDetectionStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisDetectionStatus::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int ImageAnalysisDetectionStatus::getRawValue() const {
  return _impl::$s13BlinkIDVerify28ImageAnalysisDetectionStatusO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> ImageAnalysisResult::getBlurred() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint8_t_0_1(result, _impl::$s13BlinkIDVerify19ImageAnalysisResultV7blurredSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> ImageAnalysisResult::getDocumentImageColorStatus() const {
  return swift::_impl::_impl_Optional<DocumentImageColorStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV08documentC11ColorStatusAA08DocumentcgH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisResult::getDocumentImageMoireStatus() const {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV08documentC11MoireStatusAA0cd9DetectionH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisResult::getFaceDetectionStatus() const {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV19faceDetectionStatusAA0cdgH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisResult::getMrzDetectionStatus() const {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV18mrzDetectionStatusAA0cdgH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisResult::getBarcodeDetectionStatus() const {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV22barcodeDetectionStatusAA0cdgH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CardOrientation> ImageAnalysisResult::getCardOrientation() const {
  return swift::_impl::_impl_Optional<CardOrientation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV15cardOrientationAA04CardG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CardRotation> ImageAnalysisResult::getCardRotation() const {
  return swift::_impl::_impl_Optional<CardRotation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV12cardRotationAA04CardG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisResult::getRealIDDetectionStatus() const {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19ImageAnalysisResultV21realIDDetectionStatusAA0cd9DetectionH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageFormat ImageFormat::_impl_jpg::operator()() const {
    auto result = ImageFormat::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ImageFormatO3jpgyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageFormat::isJpg() const {
    return *this == ImageFormat::jpg;
  }
  SWIFT_INLINE_THUNK ImageFormat ImageFormat::_impl_png::operator()() const {
    auto result = ImageFormat::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ImageFormatO3pngyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageFormat::isPng() const {
    return *this == ImageFormat::png;
  }
  SWIFT_INLINE_THUNK  bool ImageFormat::isUnknownDefault() const {
    return *this == ImageFormat::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String ImageFormat::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11ImageFormatO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageFormat> ImageFormat::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ImageFormat>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11ImageFormatO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ImageFormat::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11ImageFormatO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_up::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO2upyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUp() const {
    return *this == ImageOrientation::up;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_down::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO4downyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isDown() const {
    return *this == ImageOrientation::down;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_left::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO4leftyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isLeft() const {
    return *this == ImageOrientation::left;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_right::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO5rightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isRight() const {
    return *this == ImageOrientation::right;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_upMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO10upMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUpMirrored() const {
    return *this == ImageOrientation::upMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_downMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO12downMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isDownMirrored() const {
    return *this == ImageOrientation::downMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_leftMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO12leftMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isLeftMirrored() const {
    return *this == ImageOrientation::leftMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_rightMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ImageOrientationO13rightMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isRightMirrored() const {
    return *this == ImageOrientation::rightMirrored;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUnknownDefault() const {
    return *this == ImageOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ImageOrientation::getHashValue() const {
  return _impl::$s13BlinkIDVerify16ImageOrientationO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation ImageQualityInterpretation::_impl_ignore::operator()() const {
    auto result = ImageQualityInterpretation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26ImageQualityInterpretationO6ignoreyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageQualityInterpretation::isIgnore() const {
    return *this == ImageQualityInterpretation::ignore;
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation ImageQualityInterpretation::_impl_conservative::operator()() const {
    auto result = ImageQualityInterpretation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26ImageQualityInterpretationO12conservativeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageQualityInterpretation::isConservative() const {
    return *this == ImageQualityInterpretation::conservative;
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation ImageQualityInterpretation::_impl_highAssurance::operator()() const {
    auto result = ImageQualityInterpretation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26ImageQualityInterpretationO13highAssuranceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageQualityInterpretation::isHighAssurance() const {
    return *this == ImageQualityInterpretation::highAssurance;
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation ImageQualityInterpretation::_impl_highConversion::operator()() const {
    auto result = ImageQualityInterpretation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26ImageQualityInterpretationO14highConversionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageQualityInterpretation::isHighConversion() const {
    return *this == ImageQualityInterpretation::highConversion;
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation ImageQualityInterpretation::_impl_veryHighConversion::operator()() const {
    auto result = ImageQualityInterpretation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26ImageQualityInterpretationO18veryHighConversionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageQualityInterpretation::isVeryHighConversion() const {
    return *this == ImageQualityInterpretation::veryHighConversion;
  }
  SWIFT_INLINE_THUNK ImageQualityInterpretation ImageQualityInterpretation::_impl_unknown::operator()() const {
    auto result = ImageQualityInterpretation::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify26ImageQualityInterpretationO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageQualityInterpretation::isUnknown() const {
    return *this == ImageQualityInterpretation::unknown;
  }
  SWIFT_INLINE_THUNK  bool ImageQualityInterpretation::isUnknownDefault() const {
    return *this == ImageQualityInterpretation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String ImageQualityInterpretation::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify26ImageQualityInterpretationO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageQualityInterpretation> ImageQualityInterpretation::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ImageQualityInterpretation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify26ImageQualityInterpretationO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ImageQualityInterpretation::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify26ImageQualityInterpretationO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> ImageQualitySettings::getBlurMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setBlurMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> ImageQualitySettings::getGlareMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV15glareMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setGlareMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV15glareMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> ImageQualitySettings::getLightingMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV18lightingMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setLightingMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV18lightingMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> ImageQualitySettings::getSharpnessMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV19sharpnessMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setSharpnessMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV19sharpnessMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> ImageQualitySettings::getHandOcclusionMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV23handOcclusionMatchLevelAA0hI0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setHandOcclusionMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV23handOcclusionMatchLevelAA0hI0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> ImageQualitySettings::getDpiMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV13dpiMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setDpiMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV13dpiMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> ImageQualitySettings::getTiltMatchLevel() const {
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV14tiltMatchLevelAA0gH0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setTiltMatchLevel(const swift::Optional<MatchLevel>& value) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MatchLevel>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV14tiltMatchLevelAA0gH0OSgvs(swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageQualityInterpretation> ImageQualitySettings::getImageQualityInterpretation() const {
  return swift::_impl::_impl_Optional<ImageQualityInterpretation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV05imageD14InterpretationAA0cdG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ImageQualitySettings::setImageQualityInterpretation(const swift::Optional<ImageQualityInterpretation>& value) {
  alignas(alignof(swift::Optional<ImageQualityInterpretation>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<ImageQualityInterpretation>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<ImageQualityInterpretation>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageQualityInterpretation>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s13BlinkIDVerify20ImageQualitySettingsV05imageD14InterpretationAA0cdG0OSgvs(swift::_impl::_impl_Optional<ImageQualityInterpretation>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageQualitySettings ImageQualitySettings::init(const swift::Optional<MatchLevel>& blurMatchLevel, const swift::Optional<MatchLevel>& glareMatchLevel, const swift::Optional<MatchLevel>& lightingMatchLevel, const swift::Optional<MatchLevel>& sharpnessMatchLevel, const swift::Optional<MatchLevel>& handOcclusionMatchLevel, const swift::Optional<MatchLevel>& dpiMatchLevel, const swift::Optional<MatchLevel>& tiltMatchLevel, const swift::Optional<ImageQualityInterpretation>& imageQualityInterpretation) {
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_blurMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_blurMatchLevel = *(new(copyBuffer_consumedParamCopy_blurMatchLevel) swift::Optional<MatchLevel>(blurMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_blurMatchLevel(consumedParamCopy_blurMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_glareMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_glareMatchLevel = *(new(copyBuffer_consumedParamCopy_glareMatchLevel) swift::Optional<MatchLevel>(glareMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_glareMatchLevel(consumedParamCopy_glareMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_lightingMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_lightingMatchLevel = *(new(copyBuffer_consumedParamCopy_lightingMatchLevel) swift::Optional<MatchLevel>(lightingMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_lightingMatchLevel(consumedParamCopy_lightingMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_sharpnessMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_sharpnessMatchLevel = *(new(copyBuffer_consumedParamCopy_sharpnessMatchLevel) swift::Optional<MatchLevel>(sharpnessMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_sharpnessMatchLevel(consumedParamCopy_sharpnessMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_handOcclusionMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_handOcclusionMatchLevel = *(new(copyBuffer_consumedParamCopy_handOcclusionMatchLevel) swift::Optional<MatchLevel>(handOcclusionMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_handOcclusionMatchLevel(consumedParamCopy_handOcclusionMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_dpiMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_dpiMatchLevel = *(new(copyBuffer_consumedParamCopy_dpiMatchLevel) swift::Optional<MatchLevel>(dpiMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_dpiMatchLevel(consumedParamCopy_dpiMatchLevel);
  alignas(alignof(swift::Optional<MatchLevel>)) char copyBuffer_consumedParamCopy_tiltMatchLevel[sizeof(swift::Optional<MatchLevel>)];
  auto &consumedParamCopy_tiltMatchLevel = *(new(copyBuffer_consumedParamCopy_tiltMatchLevel) swift::Optional<MatchLevel>(tiltMatchLevel));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MatchLevel>> storageGuard_consumedParamCopy_tiltMatchLevel(consumedParamCopy_tiltMatchLevel);
  alignas(alignof(swift::Optional<ImageQualityInterpretation>)) char copyBuffer_consumedParamCopy_imageQualityInterpretation[sizeof(swift::Optional<ImageQualityInterpretation>)];
  auto &consumedParamCopy_imageQualityInterpretation = *(new(copyBuffer_consumedParamCopy_imageQualityInterpretation) swift::Optional<ImageQualityInterpretation>(imageQualityInterpretation));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<ImageQualityInterpretation>> storageGuard_consumedParamCopy_imageQualityInterpretation(consumedParamCopy_imageQualityInterpretation);
  return _impl::_impl_ImageQualitySettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20ImageQualitySettingsV14blurMatchLevel05glaregH008lightinggH009sharpnessgH0013handOcclusiongH003dpigH004tiltgH005imageD14InterpretationAcA0gH0OSg_A6nA0cdQ0OSgtcfC(result, swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_blurMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_glareMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_lightingMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_sharpnessMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_handOcclusionMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_dpiMatchLevel), swift::_impl::_impl_Optional<MatchLevel>::getOpaquePointer(consumedParamCopy_tiltMatchLevel), swift::_impl::_impl_Optional<ImageQualityInterpretation>::getOpaquePointer(consumedParamCopy_imageQualityInterpretation));
  });
  }
  SWIFT_INLINE_THUNK swift::String ImageQualitySettings::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify20ImageQualitySettingsV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ImageResult::getName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11ImageResultV4nameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable ImageResult::getImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s13BlinkIDVerify11ImageResultV5imageSo7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String ImageResult::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11ImageResultV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK IndicatorResult IndicatorResult::_impl_notPerformed::operator()() const {
    auto result = IndicatorResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15IndicatorResultO12notPerformedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool IndicatorResult::isNotPerformed() const {
    return *this == IndicatorResult::notPerformed;
  }
  SWIFT_INLINE_THUNK IndicatorResult IndicatorResult::_impl_pass::operator()() const {
    auto result = IndicatorResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15IndicatorResultO4passyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool IndicatorResult::isPass() const {
    return *this == IndicatorResult::pass;
  }
  SWIFT_INLINE_THUNK IndicatorResult IndicatorResult::_impl_fail::operator()() const {
    auto result = IndicatorResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15IndicatorResultO4failyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool IndicatorResult::isFail() const {
    return *this == IndicatorResult::fail;
  }
  SWIFT_INLINE_THUNK IndicatorResult IndicatorResult::_impl_unknown::operator()() const {
    auto result = IndicatorResult::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15IndicatorResultO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool IndicatorResult::isUnknown() const {
    return *this == IndicatorResult::unknown;
  }
  SWIFT_INLINE_THUNK  bool IndicatorResult::isUnknownDefault() const {
    return *this == IndicatorResult::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<IndicatorResult> IndicatorResult::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<IndicatorResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify15IndicatorResultO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String IndicatorResult::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify15IndicatorResultO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK IndicatorType IndicatorType::_impl_imageQuality::operator()() const {
    auto result = IndicatorType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13IndicatorTypeO12imageQualityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool IndicatorType::isImageQuality() const {
    return *this == IndicatorType::imageQuality;
  }
  SWIFT_INLINE_THUNK IndicatorType IndicatorType::_impl_scanProcess::operator()() const {
    auto result = IndicatorType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13IndicatorTypeO11scanProcessyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool IndicatorType::isScanProcess() const {
    return *this == IndicatorType::scanProcess;
  }
  SWIFT_INLINE_THUNK IndicatorType IndicatorType::_impl_unknown::operator()() const {
    auto result = IndicatorType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13IndicatorTypeO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool IndicatorType::isUnknown() const {
    return *this == IndicatorType::unknown;
  }
  SWIFT_INLINE_THUNK  bool IndicatorType::isUnknownDefault() const {
    return *this == IndicatorType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<IndicatorType> IndicatorType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<IndicatorType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13IndicatorTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String IndicatorType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13IndicatorTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK InputImage InputImage::init(UIImage *_Nonnull uiImage, const RegionOfInterest& regionOfInterest) {
  alignas(alignof(UIImage *_Nonnull)) char copyBuffer_consumedParamCopy_uiImage[sizeof(UIImage *_Nonnull)];
  auto &consumedParamCopy_uiImage = *(new(copyBuffer_consumedParamCopy_uiImage) UIImage *_Nonnull(uiImage));
  swift::_impl::ConsumedValueStorageDestroyer<UIImage *_Nonnull> storageGuard_consumedParamCopy_uiImage(consumedParamCopy_uiImage);
  alignas(alignof(RegionOfInterest)) char copyBuffer_consumedParamCopy_regionOfInterest[sizeof(RegionOfInterest)];
  auto &consumedParamCopy_regionOfInterest = *(new(copyBuffer_consumedParamCopy_regionOfInterest) RegionOfInterest(regionOfInterest));
  swift::_impl::ConsumedValueStorageDestroyer<RegionOfInterest> storageGuard_consumedParamCopy_regionOfInterest(consumedParamCopy_regionOfInterest);
  return _impl::_impl_InputImage::makeRetained(_impl::$s13BlinkIDVerify10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0VtcfC(consumedParamCopy_uiImage, _impl::_impl_RegionOfInterest::getOpaquePointer(consumedParamCopy_regionOfInterest), swift::TypeMetadataTrait<InputImage>::getTypeMetadata()));
  }
  SWIFT_INLINE_THUNK InputImage InputImage::init(const CameraFrame& cameraFrame) {
  alignas(alignof(CameraFrame)) char copyBuffer_consumedParamCopy_cameraFrame[sizeof(CameraFrame)];
  auto &consumedParamCopy_cameraFrame = *(new(copyBuffer_consumedParamCopy_cameraFrame) CameraFrame(cameraFrame));
  swift::_impl::ConsumedValueStorageDestroyer<CameraFrame> storageGuard_consumedParamCopy_cameraFrame(consumedParamCopy_cameraFrame);
  return _impl::_impl_InputImage::makeRetained(_impl::$s13BlinkIDVerify10InputImageC11cameraFrameAcA06CameraF0V_tcfC(_impl::_impl_CameraFrame::getOpaquePointer(consumedParamCopy_cameraFrame), swift::TypeMetadataTrait<InputImage>::getTypeMetadata()));
  }
  SWIFT_INLINE_THUNK swift::String InvalidLicenseKeyError::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify22InvalidLicenseKeyErrorV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Point2df> LocationInfo::getTopLeftCorner() const {
  return swift::_impl::_impl_Optional<Point2df>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12LocationInfoV13topLeftCornerAA8Point2dfVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Dimensions> LocationInfo::getDimensions() const {
  return swift::_impl::_impl_Optional<Dimensions>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12LocationInfoV10dimensionsAA10DimensionsVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Side> LocationInfo::getSide() const {
  return swift::_impl::_impl_Optional<Side>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12LocationInfoV4sideAA4SideOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String LocationInfo::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify12LocationInfoV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> LogicCheck::getOverall() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10LogicCheckV7overallAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DateLogicCheck> LogicCheck::getDateLogicCheck() const {
  return swift::_impl::_impl_Optional<DateLogicCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10LogicCheckV04datecD0AA04DatecD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> LogicCheck::getDocumentNumberLogic() const {
  return swift::_impl::_impl_Optional<NumberLogic>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10LogicCheckV014documentNumberC0AA0fC0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> LogicCheck::getPersonalIdNumberLogic() const {
  return swift::_impl::_impl_Optional<NumberLogic>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10LogicCheckV016personalIdNumberC0AA0gC0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> LogicCheck::getInventoryControlNumberLogic() const {
  return swift::_impl::_impl_Optional<NumberLogic>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10LogicCheckV022inventoryControlNumberC0AA0gC0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> LogicCheck::getDocumentDiscriminatorLogic() const {
  return swift::_impl::_impl_Optional<NumberLogic>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10LogicCheckV021documentDiscriminatorC0AA06NumberC0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<NumberLogic> LogicCheck::getCustomerIdNumberLogic() const {
  return swift::_impl::_impl_Optional<NumberLogic>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10LogicCheckV016customerIdNumberC0AA0gC0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String LogicCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10LogicCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<TieredCheck> MatchCheck::getOverall() const {
  return swift::_impl::_impl_Optional<TieredCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV7overallAA06TieredD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getFirstNameMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV09firstNameC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getLastNameMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV08lastNameC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getFullNameMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV08fullNameC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getAddressMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV07addressC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getPlaceOfBirthMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV012placeOfBirthC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getRaceMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV04raceC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getReligionMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV08religionC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getProfessionMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV010professionC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getMaritalStatusMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV013maritalStatusC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getResidentialStatusMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV017residentialStatusC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getEmployerMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV08employerC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getDateOfBirthMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV011dateOfBirthC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getDateOfIssueMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV011dateOfIssueC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getDateOfExpiryMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV012dateOfExpiryC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getDocumentNumberMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV014documentNumberC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getPersonalIdNumberMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV016personalIdNumberC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getDocumentAdditionalNumberMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV024documentAdditionalNumberC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldCheck> MatchCheck::getDocumentOptionalAdditionalNumberMatch() const {
  return swift::_impl::_impl_Optional<FieldCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchCheckV032documentOptionalAdditionalNumberC0AA05FieldD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String MatchCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10MatchCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_disabled::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO8disabledyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isDisabled() const {
    return *this == MatchLevel::disabled;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level1::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level1yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel1() const {
    return *this == MatchLevel::level1;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level2::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level2yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel2() const {
    return *this == MatchLevel::level2;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level3::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level3yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel3() const {
    return *this == MatchLevel::level3;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level4::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level4yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel4() const {
    return *this == MatchLevel::level4;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level5::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level5yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel5() const {
    return *this == MatchLevel::level5;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level6::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level6yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel6() const {
    return *this == MatchLevel::level6;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level7::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level7yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel7() const {
    return *this == MatchLevel::level7;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level8::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level8yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel8() const {
    return *this == MatchLevel::level8;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level9::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO6level9yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel9() const {
    return *this == MatchLevel::level9;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_level10::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO7level10yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isLevel10() const {
    return *this == MatchLevel::level10;
  }
  SWIFT_INLINE_THUNK MatchLevel MatchLevel::_impl_unknown::operator()() const {
    auto result = MatchLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10MatchLevelO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isUnknown() const {
    return *this == MatchLevel::unknown;
  }
  SWIFT_INLINE_THUNK  bool MatchLevel::isUnknownDefault() const {
    return *this == MatchLevel::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String MatchLevel::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10MatchLevelO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<MatchLevel> MatchLevel::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<MatchLevel>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10MatchLevelO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String MatchLevel::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10MatchLevelO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int MemoryReserveError::getMinRequiredMemory() const {
  return _impl::$s13BlinkIDVerify18MemoryReserveErrorV011minRequiredC0Sivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK MemoryReserveError MemoryReserveError::init(swift::Int minRequiredMemory) {
  return _impl::_impl_MemoryReserveError::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify18MemoryReserveErrorV011minRequiredC0ACSi_tcfC(result, minRequiredMemory);
  });
  }
  SWIFT_INLINE_THUNK MessageStatus MessageStatus::_impl_info::operator()() const {
    auto result = MessageStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13MessageStatusO4infoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MessageStatus::isInfo() const {
    return *this == MessageStatus::info;
  }
  SWIFT_INLINE_THUNK MessageStatus MessageStatus::_impl_warning::operator()() const {
    auto result = MessageStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13MessageStatusO7warningyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MessageStatus::isWarning() const {
    return *this == MessageStatus::warning;
  }
  SWIFT_INLINE_THUNK MessageStatus MessageStatus::_impl_error::operator()() const {
    auto result = MessageStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify13MessageStatusO5erroryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MessageStatus::isError() const {
    return *this == MessageStatus::error;
  }
  SWIFT_INLINE_THUNK  bool MessageStatus::isUnknownDefault() const {
    return *this == MessageStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<MessageStatus> MessageStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<MessageStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13MessageStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String MessageStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13MessageStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MissingBundle::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13MissingBundleV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_missingFile::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ModelLoadErrorO11missingFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isMissingFile() const {
    return *this == ModelLoadError::missingFile;
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_invalidFile::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ModelLoadErrorO11invalidFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isInvalidFile() const {
    return *this == ModelLoadError::invalidFile;
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_invalidLicense::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ModelLoadErrorO14invalidLicenseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isInvalidLicense() const {
    return *this == ModelLoadError::invalidLicense;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isUnknownDefault() const {
    return *this == ModelLoadError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ModelLoadError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify14ModelLoadErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int ModelLoadError::getHashValue() const {
  return _impl::$s13BlinkIDVerify14ModelLoadErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> MrzCheck::getOverall() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify8MrzCheckV7overallAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> MrzCheck::getParsed() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify8MrzCheckV6parsedAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> MrzCheck::getCheckDigits() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify8MrzCheckV11checkDigitsAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String MrzCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify8MrzCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> NumberLogic::getOverall() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11NumberLogicV7overallAA11CheckResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String NumberLogic::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11NumberLogicV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK int32_t Point::getX() const {
  return _impl::$s13BlinkIDVerify5PointV1xs5Int32Vvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK int32_t Point::getY() const {
  return _impl::$s13BlinkIDVerify5PointV1ys5Int32Vvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<float> Point2df::getX() const {
  return swift::_impl::_impl_Optional<float>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify8Point2dfV1xSfSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<float> Point2df::getY() const {
  return swift::_impl::_impl_Optional<float>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8(result, _impl::$s13BlinkIDVerify8Point2dfV1ySfSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String Point2df::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify8Point2dfV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ProcessIndicator::getName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify16ProcessIndicatorV4nameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK IndicatorType ProcessIndicator::getType() const {
  return _impl::_impl_IndicatorType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify16ProcessIndicatorV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK IndicatorResult ProcessIndicator::getResult() const {
  return _impl::_impl_IndicatorResult::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify16ProcessIndicatorV6resultAA0D6ResultOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String ProcessIndicator::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify16ProcessIndicatorV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK FrameAnalysisResult ProcessResult::getFrameAnalysisResult() const {
  return _impl::_impl_FrameAnalysisResult::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13ProcessResultV013frameAnalysisD0AA05FramefD0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ResultCompleteness ProcessResult::getResultCompleteness() const {
  return _impl::_impl_ResultCompleteness::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13ProcessResultV18resultCompletenessAA0dF0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_success::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isSuccess() const {
    return *this == ProcessingStatus::success;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_detectionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO15detectionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isDetectionFailed() const {
    return *this == ProcessingStatus::detectionFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_imagePreprocessingFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isImagePreprocessingFailed() const {
    return *this == ProcessingStatus::imagePreprocessingFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_stabilityTestFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO19stabilityTestFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isStabilityTestFailed() const {
    return *this == ProcessingStatus::stabilityTestFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_scanningWrongSide::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO17scanningWrongSideyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isScanningWrongSide() const {
    return *this == ProcessingStatus::scanningWrongSide;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_fieldIdentificationFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isFieldIdentificationFailed() const {
    return *this == ProcessingStatus::fieldIdentificationFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_mandatoryFieldMissing::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isMandatoryFieldMissing() const {
    return *this == ProcessingStatus::mandatoryFieldMissing;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_invalidCharactersFound::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO22invalidCharactersFoundyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isInvalidCharactersFound() const {
    return *this == ProcessingStatus::invalidCharactersFound;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_imageReturnFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO17imageReturnFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isImageReturnFailed() const {
    return *this == ProcessingStatus::imageReturnFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_barcodeRecognitionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isBarcodeRecognitionFailed() const {
    return *this == ProcessingStatus::barcodeRecognitionFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_mrzParsingFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO16mrzParsingFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isMrzParsingFailed() const {
    return *this == ProcessingStatus::mrzParsingFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_classFiltered::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO13classFilteredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isClassFiltered() const {
    return *this == ProcessingStatus::classFiltered;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_unsupportedClass::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO16unsupportedClassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnsupportedClass() const {
    return *this == ProcessingStatus::unsupportedClass;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_unsupportedByLicense::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO20unsupportedByLicenseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnsupportedByLicense() const {
    return *this == ProcessingStatus::unsupportedByLicense;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_awaitingOtherSide::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO17awaitingOtherSideyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isAwaitingOtherSide() const {
    return *this == ProcessingStatus::awaitingOtherSide;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_notScanned::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO10notScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isNotScanned() const {
    return *this == ProcessingStatus::notScanned;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_barcodeDetectionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isBarcodeDetectionFailed() const {
    return *this == ProcessingStatus::barcodeDetectionFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_unknown::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify16ProcessingStatusO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnknown() const {
    return *this == ProcessingStatus::unknown;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnknownDefault() const {
    return *this == ProcessingStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> ProcessingStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ProcessingStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify16ProcessingStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ProcessingStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify16ProcessingStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getUpperLeft() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13QuadrilateralV9upperLeftAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getUpperRight() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13QuadrilateralV10upperRightAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getLowerRight() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13QuadrilateralV10lowerRightAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getLowerLeft() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13QuadrilateralV9lowerLeftAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_none::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15RecognitionModeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isNone() const {
    return *this == RecognitionMode::none;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15RecognitionModeO5mrzIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzId() const {
    return *this == RecognitionMode::mrzId;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzVisa::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15RecognitionModeO7mrzVisayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzVisa() const {
    return *this == RecognitionMode::mrzVisa;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzPassport::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15RecognitionModeO11mrzPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzPassport() const {
    return *this == RecognitionMode::mrzPassport;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_photoId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15RecognitionModeO7photoIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isPhotoId() const {
    return *this == RecognitionMode::photoId;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_fullRecognition::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15RecognitionModeO04fullC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isFullRecognition() const {
    return *this == RecognitionMode::fullRecognition;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_barcodeId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify15RecognitionModeO9barcodeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isBarcodeId() const {
    return *this == RecognitionMode::barcodeId;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isUnknownDefault() const {
    return *this == RecognitionMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<RecognitionMode> RecognitionMode::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<RecognitionMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify15RecognitionModeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String RecognitionMode::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify15RecognitionModeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Region Region::_impl_none::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNone() const {
    return *this == Region::none;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alabama::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7alabamayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlabama() const {
    return *this == Region::alabama;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alaska::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6alaskayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlaska() const {
    return *this == Region::alaska;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alberta::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7albertayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlberta() const {
    return *this == Region::alberta;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_arizona::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7arizonayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isArizona() const {
    return *this == Region::arizona;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_arkansas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8arkansasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isArkansas() const {
    return *this == Region::arkansas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_australianCapitalTerritory::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO26australianCapitalTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAustralianCapitalTerritory() const {
    return *this == Region::australianCapitalTerritory;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_britishColumbia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO15britishColumbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBritishColumbia() const {
    return *this == Region::britishColumbia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_california::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10californiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCalifornia() const {
    return *this == Region::california;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_colorado::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8coloradoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isColorado() const {
    return *this == Region::colorado;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_connecticut::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11connecticutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isConnecticut() const {
    return *this == Region::connecticut;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_delaware::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8delawareyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDelaware() const {
    return *this == Region::delaware;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_districtOfColumbia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO18districtOfColumbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDistrictOfColumbia() const {
    return *this == Region::districtOfColumbia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_florida::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7floridayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isFlorida() const {
    return *this == Region::florida;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_georgia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7georgiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGeorgia() const {
    return *this == Region::georgia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_hawaii::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6hawaiiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHawaii() const {
    return *this == Region::hawaii;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_idaho::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO5idahoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIdaho() const {
    return *this == Region::idaho;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_illinois::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8illinoisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIllinois() const {
    return *this == Region::illinois;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_indiana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7indianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIndiana() const {
    return *this == Region::indiana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_iowa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO4iowayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIowa() const {
    return *this == Region::iowa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kansas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6kansasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKansas() const {
    return *this == Region::kansas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kentucky::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8kentuckyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKentucky() const {
    return *this == Region::kentucky;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_louisiana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9louisianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isLouisiana() const {
    return *this == Region::louisiana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maine::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO5maineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaine() const {
    return *this == Region::maine;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_manitoba::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8manitobayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isManitoba() const {
    return *this == Region::manitoba;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maryland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8marylandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaryland() const {
    return *this == Region::maryland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_massachusetts::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13massachusettsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMassachusetts() const {
    return *this == Region::massachusetts;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_michigan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8michiganyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMichigan() const {
    return *this == Region::michigan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_minnesota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9minnesotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMinnesota() const {
    return *this == Region::minnesota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_mississippi::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11mississippiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMississippi() const {
    return *this == Region::mississippi;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_missouri::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8missouriyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMissouri() const {
    return *this == Region::missouri;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_montana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7montanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMontana() const {
    return *this == Region::montana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nebraska::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8nebraskayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNebraska() const {
    return *this == Region::nebraska;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nevada::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6nevadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNevada() const {
    return *this == Region::nevada;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newBrunswick::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO12newBrunswickyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewBrunswick() const {
    return *this == Region::newBrunswick;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newHampshire::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO12newHampshireyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewHampshire() const {
    return *this == Region::newHampshire;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newJersey::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9newJerseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewJersey() const {
    return *this == Region::newJersey;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newMexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9newMexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewMexico() const {
    return *this == Region::newMexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newSouthWales::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13newSouthWalesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewSouthWales() const {
    return *this == Region::newSouthWales;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newYork::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7newYorkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewYork() const {
    return *this == Region::newYork;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northernTerritory::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO17northernTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthernTerritory() const {
    return *this == Region::northernTerritory;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northCarolina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13northCarolinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthCarolina() const {
    return *this == Region::northCarolina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northDakota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11northDakotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthDakota() const {
    return *this == Region::northDakota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_novaScotia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10novaScotiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNovaScotia() const {
    return *this == Region::novaScotia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ohio::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO4ohioyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOhio() const {
    return *this == Region::ohio;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oklahoma::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8oklahomayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOklahoma() const {
    return *this == Region::oklahoma;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ontario::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7ontarioyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOntario() const {
    return *this == Region::ontario;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oregon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6oregonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOregon() const {
    return *this == Region::oregon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_pennsylvania::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO12pennsylvaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPennsylvania() const {
    return *this == Region::pennsylvania;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quebec::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6quebecyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuebec() const {
    return *this == Region::quebec;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_queensland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10queenslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQueensland() const {
    return *this == Region::queensland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rhodeIsland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11rhodeIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRhodeIsland() const {
    return *this == Region::rhodeIsland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_saskatchewan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO12saskatchewanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSaskatchewan() const {
    return *this == Region::saskatchewan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southAustralia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO14southAustraliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthAustralia() const {
    return *this == Region::southAustralia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southCarolina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13southCarolinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthCarolina() const {
    return *this == Region::southCarolina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southDakota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11southDakotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthDakota() const {
    return *this == Region::southDakota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tasmania::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8tasmaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTasmania() const {
    return *this == Region::tasmania;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tennessee::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9tennesseeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTennessee() const {
    return *this == Region::tennessee;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_texas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO5texasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTexas() const {
    return *this == Region::texas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_utah::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO4utahyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isUtah() const {
    return *this == Region::utah;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_vermont::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7vermontyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVermont() const {
    return *this == Region::vermont;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_victoria::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8victoriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVictoria() const {
    return *this == Region::victoria;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_virginia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8virginiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVirginia() const {
    return *this == Region::virginia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_washington::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10washingtonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWashington() const {
    return *this == Region::washington;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_westernAustralia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO16westernAustraliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWesternAustralia() const {
    return *this == Region::westernAustralia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_westVirginia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO12westVirginiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWestVirginia() const {
    return *this == Region::westVirginia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_wisconsin::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9wisconsinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWisconsin() const {
    return *this == Region::wisconsin;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_wyoming::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7wyomingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWyoming() const {
    return *this == Region::wyoming;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_yukon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO5yukonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isYukon() const {
    return *this == Region::yukon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ciudadDeMexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO14ciudadDeMexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCiudadDeMexico() const {
    return *this == Region::ciudadDeMexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_jalisco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7jaliscoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isJalisco() const {
    return *this == Region::jalisco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newfoundlandAndLabrador::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO23newfoundlandAndLabradoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewfoundlandAndLabrador() const {
    return *this == Region::newfoundlandAndLabrador;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nuevoLeon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9nuevoLeonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNuevoLeon() const {
    return *this == Region::nuevoLeon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bajaCalifornia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO14bajaCaliforniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBajaCalifornia() const {
    return *this == Region::bajaCalifornia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_chihuahua::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9chihuahuayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isChihuahua() const {
    return *this == Region::chihuahua;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guanajuato::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10guanajuatoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuanajuato() const {
    return *this == Region::guanajuato;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerrero::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8guerreroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerrero() const {
    return *this == Region::guerrero;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_mexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6mexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMexico() const {
    return *this == Region::mexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_michoacan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9michoacanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMichoacan() const {
    return *this == Region::michoacan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newYorkCity::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11newYorkCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewYorkCity() const {
    return *this == Region::newYorkCity;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tamaulipas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10tamaulipasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTamaulipas() const {
    return *this == Region::tamaulipas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_veracruz::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8veracruzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVeracruz() const {
    return *this == Region::veracruz;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_chiapas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7chiapasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isChiapas() const {
    return *this == Region::chiapas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_coahuila::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8coahuilayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCoahuila() const {
    return *this == Region::coahuila;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_durango::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7durangoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDurango() const {
    return *this == Region::durango;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroCocula::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO14guerreroCoculayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroCocula() const {
    return *this == Region::guerreroCocula;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroJuchitan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO16guerreroJuchitanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroJuchitan() const {
    return *this == Region::guerreroJuchitan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroTepecoacuilco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO21guerreroTepecoacuilcoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroTepecoacuilco() const {
    return *this == Region::guerreroTepecoacuilco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroTlacoapa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO16guerreroTlacoapayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroTlacoapa() const {
    return *this == Region::guerreroTlacoapa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_gujarat::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7gujaratyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGujarat() const {
    return *this == Region::gujarat;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_hidalgo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7hidalgoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHidalgo() const {
    return *this == Region::hidalgo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_karnataka::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9karnatakayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKarnataka() const {
    return *this == Region::karnataka;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kerala::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6keralayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKerala() const {
    return *this == Region::kerala;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_khyberPakhtunkhwa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO17khyberPakhtunkhwayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKhyberPakhtunkhwa() const {
    return *this == Region::khyberPakhtunkhwa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_madhyaPradesh::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13madhyaPradeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMadhyaPradesh() const {
    return *this == Region::madhyaPradesh;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maharashtra::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11maharashtrayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaharashtra() const {
    return *this == Region::maharashtra;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_morelos::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7morelosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMorelos() const {
    return *this == Region::morelos;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nayarit::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7nayarityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNayarit() const {
    return *this == Region::nayarit;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oaxaca::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6oaxacayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOaxaca() const {
    return *this == Region::oaxaca;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_puebla::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6pueblayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPuebla() const {
    return *this == Region::puebla;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_punjab::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6punjabyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPunjab() const {
    return *this == Region::punjab;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_queretaro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9queretaroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQueretaro() const {
    return *this == Region::queretaro;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sanLuisPotosi::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13sanLuisPotosiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSanLuisPotosi() const {
    return *this == Region::sanLuisPotosi;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sinaloa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7sinaloayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSinaloa() const {
    return *this == Region::sinaloa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sonora::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6sonorayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSonora() const {
    return *this == Region::sonora;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tabasco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7tabascoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTabasco() const {
    return *this == Region::tabasco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tamilNadu::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9tamilNaduyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTamilNadu() const {
    return *this == Region::tamilNadu;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_yucatan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7yucatanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isYucatan() const {
    return *this == Region::yucatan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_zacatecas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO9zacatecasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isZacatecas() const {
    return *this == Region::zacatecas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_aguascalientes::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO14aguascalientesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAguascalientes() const {
    return *this == Region::aguascalientes;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bajaCaliforniaSur::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO17bajaCaliforniaSuryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBajaCaliforniaSur() const {
    return *this == Region::bajaCaliforniaSur;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_campeche::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8campecheyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCampeche() const {
    return *this == Region::campeche;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_colima::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6colimayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isColima() const {
    return *this == Region::colima;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooBenitoJuarez::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO23quintanaRooBenitoJuarezyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooBenitoJuarez() const {
    return *this == Region::quintanaRooBenitoJuarez;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRoo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11quintanaRooyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRoo() const {
    return *this == Region::quintanaRoo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooSolidaridad::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO22quintanaRooSolidaridadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooSolidaridad() const {
    return *this == Region::quintanaRooSolidaridad;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tlaxcala::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8tlaxcalayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTlaxcala() const {
    return *this == Region::tlaxcala;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooCozumel::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO18quintanaRooCozumelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooCozumel() const {
    return *this == Region::quintanaRooCozumel;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_saoPaolo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8saoPaoloyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSaoPaolo() const {
    return *this == Region::saoPaolo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rioDeJaneiro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO12rioDeJaneiroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRioDeJaneiro() const {
    return *this == Region::rioDeJaneiro;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rioGrandeDoSul::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO14rioGrandeDoSulyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRioGrandeDoSul() const {
    return *this == Region::rioGrandeDoSul;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northwestTerritories::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO20northwestTerritoriesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthwestTerritories() const {
    return *this == Region::northwestTerritories;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nunavut::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7nunavutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNunavut() const {
    return *this == Region::nunavut;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_princeEdwardIsland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO18princeEdwardIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPrinceEdwardIsland() const {
    return *this == Region::princeEdwardIsland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_distritoFederal::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO15distritoFederalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDistritoFederal() const {
    return *this == Region::distritoFederal;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maranhao::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO8maranhaoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaranhao() const {
    return *this == Region::maranhao;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_matoGrosso::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10matoGrossoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMatoGrosso() const {
    return *this == Region::matoGrosso;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_minasGerais::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO11minasGeraisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMinasGerais() const {
    return *this == Region::minasGerais;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_para::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO4parayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPara() const {
    return *this == Region::para;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_parana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO6paranayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isParana() const {
    return *this == Region::parana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_pernambuco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO10pernambucoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPernambuco() const {
    return *this == Region::pernambuco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_santaCatarina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13santaCatarinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSantaCatarina() const {
    return *this == Region::santaCatarina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_andhraPradesh::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO13andhraPradeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAndhraPradesh() const {
    return *this == Region::andhraPradesh;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ceara::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO5cearayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCeara() const {
    return *this == Region::ceara;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_goias::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO5goiasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGoias() const {
    return *this == Region::goias;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroAcapulcoDeJuarez::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroAcapulcoDeJuarez() const {
    return *this == Region::guerreroAcapulcoDeJuarez;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_haryana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7haryanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHaryana() const {
    return *this == Region::haryana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sergipe::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify6RegionO7sergipeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSergipe() const {
    return *this == Region::sergipe;
  }
  SWIFT_INLINE_THUNK  bool Region::isUnknownDefault() const {
    return *this == Region::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<Region> Region::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<Region>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify6RegionO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String Region::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify6RegionO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getX() const {
  return _impl::$s13BlinkIDVerify16RegionOfInterestV1xSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getY() const {
  return _impl::$s13BlinkIDVerify16RegionOfInterestV1ySfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getWidth() const {
  return _impl::$s13BlinkIDVerify16RegionOfInterestV5widthSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getHeight() const {
  return _impl::$s13BlinkIDVerify16RegionOfInterestV6heightSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RegionOfInterest RegionOfInterest::init(float x, float y, float width, float height) {
  return _impl::_impl_RegionOfInterest::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify16RegionOfInterestV1x1y5width6heightACSf_S3ftcfC(result, x, y, width, height);
  });
  }
  SWIFT_INLINE_THUNK RequestError RequestError::_impl_unauthorized::operator()() const {
    auto result = RequestError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12RequestErrorO12unauthorizedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RequestError::isUnauthorized() const {
    return *this == RequestError::unauthorized;
  }
  SWIFT_INLINE_THUNK RequestError RequestError::_impl_serverError::operator()() const {
    auto result = RequestError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12RequestErrorO06serverD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RequestError::isServerError() const {
    return *this == RequestError::serverError;
  }
  SWIFT_INLINE_THUNK RequestError RequestError::_impl_serverIncompatibility::operator()() const {
    auto result = RequestError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12RequestErrorO21serverIncompatibilityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RequestError::isServerIncompatibility() const {
    return *this == RequestError::serverIncompatibility;
  }
  SWIFT_INLINE_THUNK RequestError RequestError::_impl_unknownHost::operator()() const {
    auto result = RequestError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12RequestErrorO11unknownHostyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RequestError::isUnknownHost() const {
    return *this == RequestError::unknownHost;
  }
  SWIFT_INLINE_THUNK RequestError RequestError::_impl_invalidURL::operator()() const {
    auto result = RequestError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12RequestErrorO10invalidURLyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RequestError::isInvalidURL() const {
    return *this == RequestError::invalidURL;
  }
  SWIFT_INLINE_THUNK RequestError RequestError::_impl_unknown::operator()() const {
    auto result = RequestError::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12RequestErrorO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RequestError::isUnknown() const {
    return *this == RequestError::unknown;
  }
  SWIFT_INLINE_THUNK  bool RequestError::isUnknownDefault() const {
    return *this == RequestError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<RequestError> RequestError::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<RequestError>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12RequestErrorO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int RequestError::getRawValue() const {
  return _impl::$s13BlinkIDVerify12RequestErrorO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String ResourceLoadError::getName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify17ResourceLoadErrorV4nameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelLoadError ResourceLoadError::getError() const {
  return _impl::_impl_ModelLoadError::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify17ResourceLoadErrorV5errorAA05ModeldE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_corruptedAssets::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ResourcesErrorO15corruptedAssetsyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isCorruptedAssets() const {
    return *this == ResourcesError::corruptedAssets;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getCorruptedAssets() const {
    if (!isCorruptedAssets()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_resourceDownload::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ResourcesErrorO16resourceDownloadyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isResourceDownload() const {
    return *this == ResourcesError::resourceDownload;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getResourceDownload() const {
    if (!isResourceDownload()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_invalidBundle::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ResourcesErrorO13invalidBundleyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isInvalidBundle() const {
    return *this == ResourcesError::invalidBundle;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getInvalidBundle() const {
    if (!isInvalidBundle()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isUnknownDefault() const {
    return *this == ResourcesError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ResourcesError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify14ResourcesErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ResultArray::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11ResultArrayV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool ResultCompleteness::getFrontSideFinished() const {
  return _impl::$s13BlinkIDVerify18ResultCompletenessV17frontSideFinishedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ResultCompleteness::getBackSideFinished() const {
  return _impl::$s13BlinkIDVerify18ResultCompletenessV16backSideFinishedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ResultCompleteness::getBarcodeFrameCaptured() const {
  return _impl::$s13BlinkIDVerify18ResultCompletenessV20barcodeFrameCapturedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ResultCompleteness::getOverallFlowFinished() const {
  return _impl::$s13BlinkIDVerify18ResultCompletenessV19overallFlowFinishedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ResultState ResultState::_impl_empty::operator()() const {
    auto result = ResultState::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultStateO5emptyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultState::isEmpty() const {
    return *this == ResultState::empty;
  }
  SWIFT_INLINE_THUNK ResultState ResultState::_impl_uncertain::operator()() const {
    auto result = ResultState::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultStateO9uncertainyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultState::isUncertain() const {
    return *this == ResultState::uncertain;
  }
  SWIFT_INLINE_THUNK ResultState ResultState::_impl_valid::operator()() const {
    auto result = ResultState::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultStateO5validyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultState::isValid() const {
    return *this == ResultState::valid;
  }
  SWIFT_INLINE_THUNK ResultState ResultState::_impl_stageValid::operator()() const {
    auto result = ResultState::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultStateO10stageValidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultState::isStageValid() const {
    return *this == ResultState::stageValid;
  }
  SWIFT_INLINE_THUNK ResultState ResultState::_impl_unknown::operator()() const {
    auto result = ResultState::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultStateO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultState::isUnknown() const {
    return *this == ResultState::unknown;
  }
  SWIFT_INLINE_THUNK  bool ResultState::isUnknownDefault() const {
    return *this == ResultState::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultState> ResultState::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ResultState>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11ResultStateO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ResultState::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11ResultStateO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ResultType ResultType::_impl_stringResult::operator()() const {
    auto result = ResultType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10ResultTypeO06stringC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultType::isStringResult() const {
    return *this == ResultType::stringResult;
  }
  SWIFT_INLINE_THUNK ResultType ResultType::_impl_dateResult::operator()() const {
    auto result = ResultType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10ResultTypeO04dateC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultType::isDateResult() const {
    return *this == ResultType::dateResult;
  }
  SWIFT_INLINE_THUNK ResultType ResultType::_impl_detailedStringResult::operator()() const {
    auto result = ResultType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10ResultTypeO014detailedStringC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultType::isDetailedStringResult() const {
    return *this == ResultType::detailedStringResult;
  }
  SWIFT_INLINE_THUNK ResultType ResultType::_impl_detailedDateResult::operator()() const {
    auto result = ResultType::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify10ResultTypeO012detailedDateC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultType::isDetailedDateResult() const {
    return *this == ResultType::detailedDateResult;
  }
  SWIFT_INLINE_THUNK  bool ResultType::isUnknownDefault() const {
    return *this == ResultType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultType> ResultType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ResultType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify10ResultTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ResultType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify10ResultTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ResultValue ResultValue::_impl_stringResult::operator()(const StringResult& val) const {
    auto result = ResultValue::_make();
    alignas(StringResult) unsigned char buffer[sizeof(StringResult)];
    auto *valCopy = new(buffer) StringResult(val);
    swift::_impl::implClassFor<StringResult>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<StringResult>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultValueO06stringC0yAcA06StringC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultValue::isStringResult() const {
    return *this == ResultValue::stringResult;
  }
  SWIFT_INLINE_THUNK StringResult ResultValue::getStringResult() const {
    if (!isStringResult()) abort();
    alignas(ResultValue) unsigned char buffer[sizeof(ResultValue)];
    auto *thisCopy = new(buffer) ResultValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<StringResult>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<StringResult>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResultValue ResultValue::_impl_detailedStringResult::operator()(const DetailedStringResult& val) const {
    auto result = ResultValue::_make();
    alignas(DetailedStringResult) unsigned char buffer[sizeof(DetailedStringResult)];
    auto *valCopy = new(buffer) DetailedStringResult(val);
    swift::_impl::implClassFor<DetailedStringResult>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<DetailedStringResult>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultValueO014detailedStringC0yAcA08DetailedfC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultValue::isDetailedStringResult() const {
    return *this == ResultValue::detailedStringResult;
  }
  SWIFT_INLINE_THUNK DetailedStringResult ResultValue::getDetailedStringResult() const {
    if (!isDetailedStringResult()) abort();
    alignas(ResultValue) unsigned char buffer[sizeof(ResultValue)];
    auto *thisCopy = new(buffer) ResultValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<DetailedStringResult>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<DetailedStringResult>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResultValue ResultValue::_impl_dateResult::operator()(const DateResult& val) const {
    auto result = ResultValue::_make();
    alignas(DateResult) unsigned char buffer[sizeof(DateResult)];
    auto *valCopy = new(buffer) DateResult(val);
    swift::_impl::implClassFor<DateResult>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<DateResult>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultValueO04dateC0yAcA04DateC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultValue::isDateResult() const {
    return *this == ResultValue::dateResult;
  }
  SWIFT_INLINE_THUNK DateResult ResultValue::getDateResult() const {
    if (!isDateResult()) abort();
    alignas(ResultValue) unsigned char buffer[sizeof(ResultValue)];
    auto *thisCopy = new(buffer) ResultValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<DateResult>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<DateResult>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResultValue ResultValue::_impl_detailedDateResult::operator()(const DetailedDateResult& val) const {
    auto result = ResultValue::_make();
    alignas(DetailedDateResult) unsigned char buffer[sizeof(DetailedDateResult)];
    auto *valCopy = new(buffer) DetailedDateResult(val);
    swift::_impl::implClassFor<DetailedDateResult>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<DetailedDateResult>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify11ResultValueO012detailedDateC0yAcA08DetailedfC0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResultValue::isDetailedDateResult() const {
    return *this == ResultValue::detailedDateResult;
  }
  SWIFT_INLINE_THUNK DetailedDateResult ResultValue::getDetailedDateResult() const {
    if (!isDetailedDateResult()) abort();
    alignas(ResultValue) unsigned char buffer[sizeof(ResultValue)];
    auto *thisCopy = new(buffer) ResultValue(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<DetailedDateResult>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<DetailedDateResult>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool ResultValue::isUnknownDefault() const {
    return *this == ResultValue::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String ResultValue::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11ResultValueO11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ReviewSensitivity ReviewSensitivity::_impl_low::operator()() const {
    auto result = ReviewSensitivity::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17ReviewSensitivityO3lowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewSensitivity::isLow() const {
    return *this == ReviewSensitivity::low;
  }
  SWIFT_INLINE_THUNK ReviewSensitivity ReviewSensitivity::_impl_standard::operator()() const {
    auto result = ReviewSensitivity::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17ReviewSensitivityO8standardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewSensitivity::isStandard() const {
    return *this == ReviewSensitivity::standard;
  }
  SWIFT_INLINE_THUNK ReviewSensitivity ReviewSensitivity::_impl_high::operator()() const {
    auto result = ReviewSensitivity::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17ReviewSensitivityO4highyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewSensitivity::isHigh() const {
    return *this == ReviewSensitivity::high;
  }
  SWIFT_INLINE_THUNK ReviewSensitivity ReviewSensitivity::_impl_unknown::operator()() const {
    auto result = ReviewSensitivity::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify17ReviewSensitivityO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewSensitivity::isUnknown() const {
    return *this == ReviewSensitivity::unknown;
  }
  SWIFT_INLINE_THUNK  bool ReviewSensitivity::isUnknownDefault() const {
    return *this == ReviewSensitivity::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String ReviewSensitivity::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify17ReviewSensitivityO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ReviewSensitivity::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify17ReviewSensitivityO11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ReviewSensitivity> ReviewSensitivity::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ReviewSensitivity>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify17ReviewSensitivityO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ReviewSensitivity::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify17ReviewSensitivityO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ReviewStrategy ReviewStrategy::_impl_never::operator()() const {
    auto result = ReviewStrategy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ReviewStrategyO5neveryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewStrategy::isNever() const {
    return *this == ReviewStrategy::never;
  }
  SWIFT_INLINE_THUNK ReviewStrategy ReviewStrategy::_impl_rejectedAndAccepted::operator()() const {
    auto result = ReviewStrategy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ReviewStrategyO19rejectedAndAcceptedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewStrategy::isRejectedAndAccepted() const {
    return *this == ReviewStrategy::rejectedAndAccepted;
  }
  SWIFT_INLINE_THUNK ReviewStrategy ReviewStrategy::_impl_rejectedOnly::operator()() const {
    auto result = ReviewStrategy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ReviewStrategyO12rejectedOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewStrategy::isRejectedOnly() const {
    return *this == ReviewStrategy::rejectedOnly;
  }
  SWIFT_INLINE_THUNK ReviewStrategy ReviewStrategy::_impl_acceptedOnly::operator()() const {
    auto result = ReviewStrategy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ReviewStrategyO12acceptedOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewStrategy::isAcceptedOnly() const {
    return *this == ReviewStrategy::acceptedOnly;
  }
  SWIFT_INLINE_THUNK ReviewStrategy ReviewStrategy::_impl_unknown::operator()() const {
    auto result = ReviewStrategy::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify14ReviewStrategyO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ReviewStrategy::isUnknown() const {
    return *this == ReviewStrategy::unknown;
  }
  SWIFT_INLINE_THUNK  bool ReviewStrategy::isUnknownDefault() const {
    return *this == ReviewStrategy::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String ReviewStrategy::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify14ReviewStrategyO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String ReviewStrategy::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify14ReviewStrategyO11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ReviewStrategy> ReviewStrategy::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ReviewStrategy>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify14ReviewStrategyO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ReviewStrategy::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify14ReviewStrategyO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_resourceLoad::operator()(const ResourceLoadError& val) const {
    auto result = SDKInitError::_make();
    alignas(ResourceLoadError) unsigned char buffer[sizeof(ResourceLoadError)];
    auto *valCopy = new(buffer) ResourceLoadError(val);
    swift::_impl::implClassFor<ResourceLoadError>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<ResourceLoadError>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isResourceLoad() const {
    return *this == SDKInitError::resourceLoad;
  }
  SWIFT_INLINE_THUNK ResourceLoadError SDKInitError::getResourceLoad() const {
    if (!isResourceLoad()) abort();
    alignas(SDKInitError) unsigned char buffer[sizeof(SDKInitError)];
    auto *thisCopy = new(buffer) SDKInitError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<ResourceLoadError>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<ResourceLoadError>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_memoryReserve::operator()(const MemoryReserveError& val) const {
    auto result = SDKInitError::_make();
    alignas(MemoryReserveError) unsigned char buffer[sizeof(MemoryReserveError)];
    auto *valCopy = new(buffer) MemoryReserveError(val);
    swift::_impl::implClassFor<MemoryReserveError>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<MemoryReserveError>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isMemoryReserve() const {
    return *this == SDKInitError::memoryReserve;
  }
  SWIFT_INLINE_THUNK MemoryReserveError SDKInitError::getMemoryReserve() const {
    if (!isMemoryReserve()) abort();
    alignas(SDKInitError) unsigned char buffer[sizeof(SDKInitError)];
    auto *thisCopy = new(buffer) SDKInitError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<MemoryReserveError>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<MemoryReserveError>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isUnknownDefault() const {
    return *this == SDKInitError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> SDKInitError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify12SDKInitErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckResult Segment::getResult() const {
  return _impl::_impl_CheckResult::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify7SegmentV6resultAA11CheckResultOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String Segment::getType() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify7SegmentV4typeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Bounds Segment::getBounds() const {
  return _impl::_impl_Bounds::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify7SegmentV6boundsAA6BoundsVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String Segment::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify7SegmentV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Side Side::_impl_front::operator()() const {
    auto result = Side::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify4SideO5frontyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Side::isFront() const {
    return *this == Side::front;
  }
  SWIFT_INLINE_THUNK Side Side::_impl_back::operator()() const {
    auto result = Side::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify4SideO4backyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Side::isBack() const {
    return *this == Side::back;
  }
  SWIFT_INLINE_THUNK Side Side::_impl_unknown::operator()() const {
    auto result = Side::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify4SideO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Side::isUnknown() const {
    return *this == Side::unknown;
  }
  SWIFT_INLINE_THUNK  bool Side::isUnknownDefault() const {
    return *this == Side::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<Side> Side::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<Side>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify4SideO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String Side::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify4SideO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ResultType StringResult::getType() const {
  return _impl::_impl_ResultType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12StringResultV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> StringResult::getField() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify12StringResultV5fieldSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> StringResult::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12StringResultV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> StringResult::getResults() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12StringResultV7resultsAA0D5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> StringResult::getValue() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify12StringResultV5valueSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String StringResult::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify12StringResultV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> SuspiciousDataCheck::getOverall() const {
  return swift::_impl::_impl_Optional<DetailedCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19SuspiciousDataCheckV7overallAA08DetailedE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> SuspiciousDataCheck::getSampleStringCheck() const {
  return swift::_impl::_impl_Optional<DetailedCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19SuspiciousDataCheckV012sampleStringE0AA08DetailedE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCheck> SuspiciousDataCheck::getSuspiciousNumberCheck() const {
  return swift::_impl::_impl_Optional<DetailedCheck>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19SuspiciousDataCheckV016suspiciousNumberE0AA08DetailedE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String SuspiciousDataCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify19SuspiciousDataCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckType TieredCheck::getType() const {
  return _impl::_impl_CheckType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11TieredCheckV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> TieredCheck::getName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify11TieredCheckV4nameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> TieredCheck::getResult() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11TieredCheckV6resultAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> TieredCheck::getPerformedChecks() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13BlinkIDVerify11TieredCheckV15performedChecksSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> TieredCheck::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11TieredCheckV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> TieredCheck::getChecks() const {
  return swift::_impl::_impl_Optional<CheckArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11TieredCheckV6checksAA0D5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK MatchLevel TieredCheck::getMatchLevel() const {
  return _impl::_impl_MatchLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11TieredCheckV10matchLevelAA05MatchF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String TieredCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11TieredCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK VerificationContext VerificationContext::_impl_remote::operator()() const {
    auto result = VerificationContext::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify19VerificationContextO6remoteyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerificationContext::isRemote() const {
    return *this == VerificationContext::remote;
  }
  SWIFT_INLINE_THUNK VerificationContext VerificationContext::_impl_inPerson::operator()() const {
    auto result = VerificationContext::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify19VerificationContextO8inPersonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerificationContext::isInPerson() const {
    return *this == VerificationContext::inPerson;
  }
  SWIFT_INLINE_THUNK VerificationContext VerificationContext::_impl_unknown::operator()() const {
    auto result = VerificationContext::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify19VerificationContextO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerificationContext::isUnknown() const {
    return *this == VerificationContext::unknown;
  }
  SWIFT_INLINE_THUNK  bool VerificationContext::isUnknownDefault() const {
    return *this == VerificationContext::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String VerificationContext::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify19VerificationContextO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String VerificationContext::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify19VerificationContextO11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<VerificationContext> VerificationContext::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<VerificationContext>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify19VerificationContextO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String VerificationContext::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify19VerificationContextO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK VerificationSideMode VerificationSideMode::_impl_multiSide::operator()() const {
    auto result = VerificationSideMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify20VerificationSideModeO05multiD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerificationSideMode::isMultiSide() const {
    return *this == VerificationSideMode::multiSide;
  }
  SWIFT_INLINE_THUNK VerificationSideMode VerificationSideMode::_impl_frontOnly::operator()() const {
    auto result = VerificationSideMode::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify20VerificationSideModeO9frontOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerificationSideMode::isFrontOnly() const {
    return *this == VerificationSideMode::frontOnly;
  }
  SWIFT_INLINE_THUNK  bool VerificationSideMode::isUnknownDefault() const {
    return *this == VerificationSideMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<VerificationSideMode> VerificationSideMode::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<VerificationSideMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify20VerificationSideModeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String VerificationSideMode::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify20VerificationSideModeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK CheckType VerifyCheck::getType() const {
  return _impl::_impl_CheckType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11VerifyCheckV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyCheck::getName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify11VerifyCheckV4nameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckResult> VerifyCheck::getResult() const {
  return swift::_impl::_impl_Optional<CheckResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11VerifyCheckV6resultAA0D6ResultOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> VerifyCheck::getPerformedChecks() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13BlinkIDVerify11VerifyCheckV15performedChecksSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> VerifyCheck::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11VerifyCheckV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CheckArray> VerifyCheck::getChecks() const {
  return swift::_impl::_impl_Optional<CheckArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify11VerifyCheckV6checksAA0D5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String VerifyCheck::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify11VerifyCheckV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String VerifyMessage::getCode() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13VerifyMessageV4codeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String VerifyMessage::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13VerifyMessageV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK MessageStatus VerifyMessage::getStatus() const {
  return _impl::_impl_MessageStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify13VerifyMessageV6statusAA0D6StatusOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String VerifyMessage::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13VerifyMessageV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ResultType VerifyResult::getType() const {
  return _impl::_impl_ResultType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12VerifyResultV4typeAA0D4TypeOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyResult::getField() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify12VerifyResultV5fieldSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailDictionary> VerifyResult::getDetails() const {
  return swift::_impl::_impl_Optional<DetailDictionary>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12VerifyResultV7detailsAA16DetailDictionaryVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ResultArray> VerifyResult::getResults() const {
  return swift::_impl::_impl_Optional<ResultArray>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12VerifyResultV7resultsAA0D5ArrayVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String VerifyResult::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify12VerifyResultV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<uint64_t> VerifyRuntime::getElapsedMs() const {
  return swift::_impl::_impl_Optional<uint64_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV9elapsedMss6UInt64VSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyRuntime::getServiceVersion() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV14serviceVersionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyRuntime::getRunnerVersion() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV13runnerVersionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> VerifyRuntime::getRunnerInstanceIndex() const {
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint8_t_8_9(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV19runnerInstanceIndexSiSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyRuntime::getWrapperVersion() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV14wrapperVersionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyRuntime::getExtractionRecognizerVersion() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV27extractionRecognizerVersionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyRuntime::getVerificationRecognizerVersion() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV29verificationRecognizerVersionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyRuntime::getClientSdkName() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV13clientSdkNameSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> VerifyRuntime::getClientSdkVersion() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_uint64_t_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV16clientSdkVersionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String VerifyRuntime::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify13VerifyRuntimeV11descriptionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK VerifyScript VerifyScript::_impl_latin::operator()() const {
    auto result = VerifyScript::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12VerifyScriptO5latinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerifyScript::isLatin() const {
    return *this == VerifyScript::latin;
  }
  SWIFT_INLINE_THUNK VerifyScript VerifyScript::_impl_cyrillic::operator()() const {
    auto result = VerifyScript::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12VerifyScriptO8cyrillicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerifyScript::isCyrillic() const {
    return *this == VerifyScript::cyrillic;
  }
  SWIFT_INLINE_THUNK VerifyScript VerifyScript::_impl_arabic::operator()() const {
    auto result = VerifyScript::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12VerifyScriptO6arabicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerifyScript::isArabic() const {
    return *this == VerifyScript::arabic;
  }
  SWIFT_INLINE_THUNK VerifyScript VerifyScript::_impl_greek::operator()() const {
    auto result = VerifyScript::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12VerifyScriptO5greekyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerifyScript::isGreek() const {
    return *this == VerifyScript::greek;
  }
  SWIFT_INLINE_THUNK VerifyScript VerifyScript::_impl_unknown::operator()() const {
    auto result = VerifyScript::_make();
    result._destructiveInjectEnumTag(_impl::$s13BlinkIDVerify12VerifyScriptO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool VerifyScript::isUnknown() const {
    return *this == VerifyScript::unknown;
  }
  SWIFT_INLINE_THUNK  bool VerifyScript::isUnknownDefault() const {
    return *this == VerifyScript::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<VerifyScript> VerifyScript::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<VerifyScript>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify12VerifyScriptO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String VerifyScript::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify12VerifyScriptO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ResultArray VizResult::getFront() const {
  return _impl::_impl_ResultArray::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9VizResultV5frontAA0D5ArrayVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ResultArray VizResult::getBack() const {
  return _impl::_impl_ResultArray::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s13BlinkIDVerify9VizResultV4backAA0D5ArrayVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String VizResult::getDescription() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkIDVerify_uint64_t_0_8_void_ptr_8_16(result, _impl::$s13BlinkIDVerify9VizResultV11descriptionSSvg(_getOpaquePointer()));
  });
  }

class CaptureResult { } SWIFT_UNAVAILABLE_MSG("protocol 'CaptureResult' can not yet be represented in C++");

class CheckProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'CheckProtocol' can not yet be represented in C++");

class DetailValue { } SWIFT_UNAVAILABLE_MSG("indirect enum 'DetailValue' can not yet be represented in C++");

class ImageSource { } SWIFT_UNAVAILABLE_MSG("Swift enum 'ImageSource' cannot be represented in C++");

class ResourceDownloaderError { } SWIFT_UNAVAILABLE_MSG("enum 'ResourceDownloaderError' can not be represented in C++ as one of its cases has an associated value with type that can't be represented in C++");

class Safe { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic struct 'Safe' can not yet be represented in C++");

class VerifyResultProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'VerifyResultProtocol' can not yet be represented in C++");

} // namespace BlinkIDVerify

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
